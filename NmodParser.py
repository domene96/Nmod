# Generated from Nmod.g4 by ANTLR 4.7
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


from Compiler import *
# from VirtualMachine import *
c = Compiler()
# vm = VirtualMachine()

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3l")
        buf.write("\u0420\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\7\2\u009b\n\2\f\2\16\2\u009e\13\2\3\2\7\2\u00a1")
        buf.write("\n\2\f\2\16\2\u00a4\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\5\3\u00ae\n\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write("\4\7\4\u00ba\n\4\f\4\16\4\u00bd\13\4\3\4\3\4\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\7\5\u00d5\n\5\f\5\16\5\u00d8\13\5\3\5")
        buf.write("\3\5\5\5\u00dc\n\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write("\3\6\7\6\u00e8\n\6\f\6\16\6\u00eb\13\6\3\6\3\6\3\6\5\6")
        buf.write("\u00f0\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\5\7\u00fd\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\7\7\u010d\n\7\f\7\16\7\u0110\13\7\5\7")
        buf.write("\u0112\n\7\3\7\3\7\7\7\u0116\n\7\f\7\16\7\u0119\13\7\3")
        buf.write("\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\t\3\t")
        buf.write("\7\t\u0129\n\t\f\t\16\t\u012c\13\t\3\t\3\t\3\n\3\n\3\n")
        buf.write("\3\n\3\n\3\n\5\n\u0136\n\n\3\13\3\13\3\13\3\13\3\13\3")
        buf.write("\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f")
        buf.write("\u0149\n\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\6\16\u015c\n\16\r\16\16")
        buf.write("\16\u015d\3\16\3\16\7\16\u0162\n\16\f\16\16\16\u0165\13")
        buf.write("\16\5\16\u0167\n\16\3\16\3\16\3\16\3\16\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\6\17\u0173\n\17\r\17\16\17\u0174\3\17")
        buf.write("\3\17\7\17\u0179\n\17\f\17\16\17\u017c\13\17\5\17\u017e")
        buf.write("\n\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\7\20\u01c6\n\20\f\20\16\20\u01c9")
        buf.write("\13\20\5\20\u01cb\n\20\3\20\3\20\3\20\5\20\u01d0\n\20")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\6\21\u01d8\n\21\r\21\16")
        buf.write("\21\u01d9\3\21\6\21\u01dd\n\21\r\21\16\21\u01de\3\21\3")
        buf.write("\21\7\21\u01e3\n\21\f\21\16\21\u01e6\13\21\3\22\3\22\3")
        buf.write("\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\6\22")
        buf.write("\u01f4\n\22\r\22\16\22\u01f5\3\22\6\22\u01f9\n\22\r\22")
        buf.write("\16\22\u01fa\3\22\3\22\7\22\u01ff\n\22\f\22\16\22\u0202")
        buf.write("\13\22\3\23\3\23\3\23\3\23\3\23\3\23\6\23\u020a\n\23\r")
        buf.write("\23\16\23\u020b\3\23\6\23\u020f\n\23\r\23\16\23\u0210")
        buf.write("\3\23\3\23\7\23\u0215\n\23\f\23\16\23\u0218\13\23\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\6\24\u0220\n\24\r\24\16\24\u0221")
        buf.write("\3\24\6\24\u0225\n\24\r\24\16\24\u0226\3\24\3\24\7\24")
        buf.write("\u022b\n\24\f\24\16\24\u022e\13\24\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\5\25\u0237\n\25\3\25\3\25\3\25\3\25\5")
        buf.write("\25\u023d\n\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u0250")
        buf.write("\n\26\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37")
        buf.write("\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3 \3 \3")
        buf.write(" \3 \3 \3 \3 \3 \3 \3 \3 \3 \3!\3!\3!\3!\3!\3!\3!\3!\3")
        buf.write("!\3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"")
        buf.write("\3\"\3#\3#\3#\3#\3#\3#\3$\3$\3$\3$\3$\3$\3%\3%\3%\3%\3")
        buf.write("%\3%\3&\3&\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3")
        buf.write("(\3(\3(\3(\3)\3)\3)\3)\3)\3)\3*\3*\3*\3*\3*\3*\3+\3+\3")
        buf.write("+\3+\3+\3+\3,\3,\3,\3,\3,\3,\3-\3-\3-\3-\3-\7-\u030c\n")
        buf.write("-\f-\16-\u030f\13-\3-\3-\3-\3.\3.\3.\3.\3.\7.\u0319\n")
        buf.write(".\f.\16.\u031c\13.\3.\3.\3.\3/\3/\3/\3/\3/\7/\u0326\n")
        buf.write("/\f/\16/\u0329\13/\3/\3/\3/\3\60\3\60\3\60\3\60\3\60\7")
        buf.write("\60\u0333\n\60\f\60\16\60\u0336\13\60\3\60\3\60\3\60\3")
        buf.write("\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\62\3\62\3\62")
        buf.write("\3\62\3\62\7\62\u0348\n\62\f\62\16\62\u034b\13\62\3\62")
        buf.write("\3\62\3\62\3\63\3\63\3\63\3\63\3\63\3\63\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\65\3\65\3\65\3\65\3\65\7\65\u0361\n")
        buf.write("\65\f\65\16\65\u0364\13\65\3\65\3\65\3\65\3\66\3\66\3")
        buf.write("\66\3\66\3\66\7\66\u036e\n\66\f\66\16\66\u0371\13\66\3")
        buf.write("\66\3\66\3\66\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67")
        buf.write("\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\5\67\u0386\n")
        buf.write("\67\38\38\38\38\38\38\38\38\39\39\39\39\39\39\3:\3:\3")
        buf.write(":\3:\3:\3:\3:\3:\3:\3:\3;\3;\3;\3;\3;\3;\3<\3<\3<\3<\3")
        buf.write("<\7<\u03ab\n<\f<\16<\u03ae\13<\3<\3<\3<\3=\3=\3=\3=\3")
        buf.write("=\3=\3>\3>\3>\3>\3>\3>\3?\3?\3?\3?\3?\3?\3@\3@\3@\3@\3")
        buf.write("@\3@\3A\3A\3A\3A\3A\3A\3B\3B\3B\3B\3B\7B\u03d6\nB\fB\16")
        buf.write("B\u03d9\13B\3B\3B\3B\3C\3C\3C\3C\3C\7C\u03e3\nC\fC\16")
        buf.write("C\u03e6\13C\3C\3C\3C\3D\3D\3D\3D\5D\u03ef\nD\3D\3D\3D")
        buf.write("\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3F\3F\3F\3F\3F\3F\3G\3")
        buf.write("G\3G\3G\3G\3G\3G\3G\3G\3G\3H\3H\3H\3H\3H\3H\3H\3H\3I\3")
        buf.write("I\3I\3I\3I\3I\3I\3I\3J\3J\3J\2\2K\2\4\6\b\n\f\16\20\22")
        buf.write("\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPR")
        buf.write("TVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088")
        buf.write("\u008a\u008c\u008e\u0090\u0092\2\4\3\2\'(\3\2_a\2\u044c")
        buf.write("\2\u0094\3\2\2\2\4\u00ad\3\2\2\2\6\u00af\3\2\2\2\b\u00c0")
        buf.write("\3\2\2\2\n\u00dd\3\2\2\2\f\u00f1\3\2\2\2\16\u011e\3\2")
        buf.write("\2\2\20\u0126\3\2\2\2\22\u0135\3\2\2\2\24\u0137\3\2\2")
        buf.write("\2\26\u013f\3\2\2\2\30\u014c\3\2\2\2\32\u0155\3\2\2\2")
        buf.write("\34\u016c\3\2\2\2\36\u01cf\3\2\2\2 \u01d1\3\2\2\2\"\u01e7")
        buf.write("\3\2\2\2$\u0203\3\2\2\2&\u0219\3\2\2\2(\u023c\3\2\2\2")
        buf.write("*\u024f\3\2\2\2,\u0251\3\2\2\2.\u0256\3\2\2\2\60\u0262")
        buf.write("\3\2\2\2\62\u026a\3\2\2\2\64\u0274\3\2\2\2\66\u027c\3")
        buf.write("\2\2\28\u0284\3\2\2\2:\u028e\3\2\2\2<\u029a\3\2\2\2>\u02a6")
        buf.write("\3\2\2\2@\u02b2\3\2\2\2B\u02be\3\2\2\2D\u02ca\3\2\2\2")
        buf.write("F\u02d0\3\2\2\2H\u02d6\3\2\2\2J\u02dc\3\2\2\2L\u02e2\3")
        buf.write("\2\2\2N\u02e8\3\2\2\2P\u02ee\3\2\2\2R\u02f4\3\2\2\2T\u02fa")
        buf.write("\3\2\2\2V\u0300\3\2\2\2X\u0306\3\2\2\2Z\u0313\3\2\2\2")
        buf.write("\\\u0320\3\2\2\2^\u032d\3\2\2\2`\u033a\3\2\2\2b\u0342")
        buf.write("\3\2\2\2d\u034f\3\2\2\2f\u0355\3\2\2\2h\u035b\3\2\2\2")
        buf.write("j\u0368\3\2\2\2l\u0385\3\2\2\2n\u0387\3\2\2\2p\u038f\3")
        buf.write("\2\2\2r\u0395\3\2\2\2t\u039f\3\2\2\2v\u03a5\3\2\2\2x\u03b2")
        buf.write("\3\2\2\2z\u03b8\3\2\2\2|\u03be\3\2\2\2~\u03c4\3\2\2\2")
        buf.write("\u0080\u03ca\3\2\2\2\u0082\u03d0\3\2\2\2\u0084\u03dd\3")
        buf.write("\2\2\2\u0086\u03ea\3\2\2\2\u0088\u03f3\3\2\2\2\u008a\u03fd")
        buf.write("\3\2\2\2\u008c\u0403\3\2\2\2\u008e\u040d\3\2\2\2\u0090")
        buf.write("\u0415\3\2\2\2\u0092\u041d\3\2\2\2\u0094\u0095\7\4\2\2")
        buf.write("\u0095\u0096\7j\2\2\u0096\u0097\b\2\1\2\u0097\u0098\b")
        buf.write("\2\1\2\u0098\u009c\7\t\2\2\u0099\u009b\5\6\4\2\u009a\u0099")
        buf.write("\3\2\2\2\u009b\u009e\3\2\2\2\u009c\u009a\3\2\2\2\u009c")
        buf.write("\u009d\3\2\2\2\u009d\u00a2\3\2\2\2\u009e\u009c\3\2\2\2")
        buf.write("\u009f\u00a1\5\f\7\2\u00a0\u009f\3\2\2\2\u00a1\u00a4\3")
        buf.write("\2\2\2\u00a2\u00a0\3\2\2\2\u00a2\u00a3\3\2\2\2\u00a3\u00a5")
        buf.write("\3\2\2\2\u00a4\u00a2\3\2\2\2\u00a5\u00a6\5\16\b\2\u00a6")
        buf.write("\3\3\2\2\2\u00a7\u00a8\7\26\2\2\u00a8\u00ae\b\3\1\2\u00a9")
        buf.write("\u00aa\7\27\2\2\u00aa\u00ae\b\3\1\2\u00ab\u00ac\7\30\2")
        buf.write("\2\u00ac\u00ae\b\3\1\2\u00ad\u00a7\3\2\2\2\u00ad\u00a9")
        buf.write("\3\2\2\2\u00ad\u00ab\3\2\2\2\u00ae\5\3\2\2\2\u00af\u00b0")
        buf.write("\7\6\2\2\u00b0\u00b1\5\4\3\2\u00b1\u00b2\b\4\1\2\u00b2")
        buf.write("\u00b3\7\t\2\2\u00b3\u00b4\5\b\5\2\u00b4\u00bb\b\4\1\2")
        buf.write("\u00b5\u00b6\7\n\2\2\u00b6\u00b7\5\b\5\2\u00b7\u00b8\b")
        buf.write("\4\1\2\u00b8\u00ba\3\2\2\2\u00b9\u00b5\3\2\2\2\u00ba\u00bd")
        buf.write("\3\2\2\2\u00bb\u00b9\3\2\2\2\u00bb\u00bc\3\2\2\2\u00bc")
        buf.write("\u00be\3\2\2\2\u00bd\u00bb\3\2\2\2\u00be\u00bf\7\b\2\2")
        buf.write("\u00bf\7\3\2\2\2\u00c0\u00c1\7j\2\2\u00c1\u00db\b\5\1")
        buf.write("\2\u00c2\u00c3\7\13\2\2\u00c3\u00c4\b\5\1\2\u00c4\u00c5")
        buf.write("\7f\2\2\u00c5\u00c6\b\5\1\2\u00c6\u00c7\b\5\1\2\u00c7")
        buf.write("\u00c8\7\t\2\2\u00c8\u00c9\7f\2\2\u00c9\u00ca\b\5\1\2")
        buf.write("\u00ca\u00d6\b\5\1\2\u00cb\u00cc\7\n\2\2\u00cc\u00cd\b")
        buf.write("\5\1\2\u00cd\u00ce\7f\2\2\u00ce\u00cf\b\5\1\2\u00cf\u00d0")
        buf.write("\b\5\1\2\u00d0\u00d1\7\t\2\2\u00d1\u00d2\7f\2\2\u00d2")
        buf.write("\u00d3\b\5\1\2\u00d3\u00d5\b\5\1\2\u00d4\u00cb\3\2\2\2")
        buf.write("\u00d5\u00d8\3\2\2\2\u00d6\u00d4\3\2\2\2\u00d6\u00d7\3")
        buf.write("\2\2\2\u00d7\u00d9\3\2\2\2\u00d8\u00d6\3\2\2\2\u00d9\u00da")
        buf.write("\7\f\2\2\u00da\u00dc\b\5\1\2\u00db\u00c2\3\2\2\2\u00db")
        buf.write("\u00dc\3\2\2\2\u00dc\t\3\2\2\2\u00dd\u00ef\7j\2\2\u00de")
        buf.write("\u00df\7\13\2\2\u00df\u00e0\b\6\1\2\u00e0\u00e1\5$\23")
        buf.write("\2\u00e1\u00e9\b\6\1\2\u00e2\u00e3\7\n\2\2\u00e3\u00e4")
        buf.write("\b\6\1\2\u00e4\u00e5\5$\23\2\u00e5\u00e6\b\6\1\2\u00e6")
        buf.write("\u00e8\3\2\2\2\u00e7\u00e2\3\2\2\2\u00e8\u00eb\3\2\2\2")
        buf.write("\u00e9\u00e7\3\2\2\2\u00e9\u00ea\3\2\2\2\u00ea\u00ec\3")
        buf.write("\2\2\2\u00eb\u00e9\3\2\2\2\u00ec\u00ed\7\f\2\2\u00ed\u00ee")
        buf.write("\b\6\1\2\u00ee\u00f0\3\2\2\2\u00ef\u00de\3\2\2\2\u00ef")
        buf.write("\u00f0\3\2\2\2\u00f0\13\3\2\2\2\u00f1\u00f2\7j\2\2\u00f2")
        buf.write("\u00f3\b\7\1\2\u00f3\u00fc\7\21\2\2\u00f4\u00f5\7\25\2")
        buf.write("\2\u00f5\u00f6\b\7\1\2\u00f6\u00fd\b\7\1\2\u00f7\u00f8")
        buf.write("\5\4\3\2\u00f8\u00f9\b\7\1\2\u00f9\u00fa\b\7\1\2\u00fa")
        buf.write("\u00fb\b\7\1\2\u00fb\u00fd\3\2\2\2\u00fc\u00f4\3\2\2\2")
        buf.write("\u00fc\u00f7\3\2\2\2\u00fd\u00fe\3\2\2\2\u00fe\u00ff\7")
        buf.write("\22\2\2\u00ff\u0111\7\r\2\2\u0100\u0101\5\4\3\2\u0101")
        buf.write("\u0102\b\7\1\2\u0102\u0103\7j\2\2\u0103\u0104\b\7\1\2")
        buf.write("\u0104\u010e\b\7\1\2\u0105\u0106\7\n\2\2\u0106\u0107\5")
        buf.write("\4\3\2\u0107\u0108\b\7\1\2\u0108\u0109\7j\2\2\u0109\u010a")
        buf.write("\b\7\1\2\u010a\u010b\b\7\1\2\u010b\u010d\3\2\2\2\u010c")
        buf.write("\u0105\3\2\2\2\u010d\u0110\3\2\2\2\u010e\u010c\3\2\2\2")
        buf.write("\u010e\u010f\3\2\2\2\u010f\u0112\3\2\2\2\u0110\u010e\3")
        buf.write("\2\2\2\u0111\u0100\3\2\2\2\u0111\u0112\3\2\2\2\u0112\u0113")
        buf.write("\3\2\2\2\u0113\u0117\7\16\2\2\u0114\u0116\5\6\4\2\u0115")
        buf.write("\u0114\3\2\2\2\u0116\u0119\3\2\2\2\u0117\u0115\3\2\2\2")
        buf.write("\u0117\u0118\3\2\2\2\u0118\u011a\3\2\2\2\u0119\u0117\3")
        buf.write("\2\2\2\u011a\u011b\b\7\1\2\u011b\u011c\5\20\t\2\u011c")
        buf.write("\u011d\b\7\1\2\u011d\r\3\2\2\2\u011e\u011f\7\5\2\2\u011f")
        buf.write("\u0120\b\b\1\2\u0120\u0121\b\b\1\2\u0121\u0122\7\r\2\2")
        buf.write("\u0122\u0123\7\16\2\2\u0123\u0124\5\20\t\2\u0124\u0125")
        buf.write("\b\b\1\2\u0125\17\3\2\2\2\u0126\u012a\7\17\2\2\u0127\u0129")
        buf.write("\5\22\n\2\u0128\u0127\3\2\2\2\u0129\u012c\3\2\2\2\u012a")
        buf.write("\u0128\3\2\2\2\u012a\u012b\3\2\2\2\u012b\u012d\3\2\2\2")
        buf.write("\u012c\u012a\3\2\2\2\u012d\u012e\7\20\2\2\u012e\21\3\2")
        buf.write("\2\2\u012f\u0136\5\24\13\2\u0130\u0136\5\26\f\2\u0131")
        buf.write("\u0136\5\32\16\2\u0132\u0136\5\34\17\2\u0133\u0136\5\30")
        buf.write("\r\2\u0134\u0136\5\36\20\2\u0135\u012f\3\2\2\2\u0135\u0130")
        buf.write("\3\2\2\2\u0135\u0131\3\2\2\2\u0135\u0132\3\2\2\2\u0135")
        buf.write("\u0133\3\2\2\2\u0135\u0134\3\2\2\2\u0136\23\3\2\2\2\u0137")
        buf.write("\u0138\5\n\6\2\u0138\u0139\b\13\1\2\u0139\u013a\7\36\2")
        buf.write("\2\u013a\u013b\b\13\1\2\u013b\u013c\5$\23\2\u013c\u013d")
        buf.write("\b\13\1\2\u013d\u013e\7\b\2\2\u013e\25\3\2\2\2\u013f\u0140")
        buf.write("\7\31\2\2\u0140\u0141\7\r\2\2\u0141\u0142\5 \21\2\u0142")
        buf.write("\u0143\7\16\2\2\u0143\u0144\b\f\1\2\u0144\u0148\5\20\t")
        buf.write("\2\u0145\u0146\7\32\2\2\u0146\u0147\b\f\1\2\u0147\u0149")
        buf.write("\5\20\t\2\u0148\u0145\3\2\2\2\u0148\u0149\3\2\2\2\u0149")
        buf.write("\u014a\3\2\2\2\u014a\u014b\b\f\1\2\u014b\27\3\2\2\2\u014c")
        buf.write("\u014d\7\33\2\2\u014d\u014e\b\r\1\2\u014e\u014f\7\r\2")
        buf.write("\2\u014f\u0150\5 \21\2\u0150\u0151\7\16\2\2\u0151\u0152")
        buf.write("\b\r\1\2\u0152\u0153\5\20\t\2\u0153\u0154\b\r\1\2\u0154")
        buf.write("\31\3\2\2\2\u0155\u0156\7\34\2\2\u0156\u0166\7\r\2\2\u0157")
        buf.write("\u0158\7i\2\2\u0158\u0159\b\16\1\2\u0159\u0167\b\16\1")
        buf.write("\2\u015a\u015c\5 \21\2\u015b\u015a\3\2\2\2\u015c\u015d")
        buf.write("\3\2\2\2\u015d\u015b\3\2\2\2\u015d\u015e\3\2\2\2\u015e")
        buf.write("\u0163\3\2\2\2\u015f\u0160\7\n\2\2\u0160\u0162\5 \21\2")
        buf.write("\u0161\u015f\3\2\2\2\u0162\u0165\3\2\2\2\u0163\u0161\3")
        buf.write("\2\2\2\u0163\u0164\3\2\2\2\u0164\u0167\3\2\2\2\u0165\u0163")
        buf.write("\3\2\2\2\u0166\u0157\3\2\2\2\u0166\u015b\3\2\2\2\u0166")
        buf.write("\u0167\3\2\2\2\u0167\u0168\3\2\2\2\u0168\u0169\7\16\2")
        buf.write("\2\u0169\u016a\7\b\2\2\u016a\u016b\b\16\1\2\u016b\33\3")
        buf.write("\2\2\2\u016c\u016d\7\35\2\2\u016d\u017d\7\r\2\2\u016e")
        buf.write("\u016f\7i\2\2\u016f\u0170\b\17\1\2\u0170\u017e\b\17\1")
        buf.write("\2\u0171\u0173\5 \21\2\u0172\u0171\3\2\2\2\u0173\u0174")
        buf.write("\3\2\2\2\u0174\u0172\3\2\2\2\u0174\u0175\3\2\2\2\u0175")
        buf.write("\u017a\3\2\2\2\u0176\u0177\7\n\2\2\u0177\u0179\5 \21\2")
        buf.write("\u0178\u0176\3\2\2\2\u0179\u017c\3\2\2\2\u017a\u0178\3")
        buf.write("\2\2\2\u017a\u017b\3\2\2\2\u017b\u017e\3\2\2\2\u017c\u017a")
        buf.write("\3\2\2\2\u017d\u016e\3\2\2\2\u017d\u0172\3\2\2\2\u017d")
        buf.write("\u017e\3\2\2\2\u017e\u017f\3\2\2\2\u017f\u0180\7\16\2")
        buf.write("\2\u0180\u0181\7\b\2\2\u0181\u0182\b\17\1\2\u0182\35\3")
        buf.write("\2\2\2\u0183\u01d0\5,\27\2\u0184\u01d0\5.\30\2\u0185\u01d0")
        buf.write("\5\60\31\2\u0186\u01d0\5\62\32\2\u0187\u01d0\5\64\33\2")
        buf.write("\u0188\u01d0\5\66\34\2\u0189\u01d0\58\35\2\u018a\u01d0")
        buf.write("\5:\36\2\u018b\u01d0\5<\37\2\u018c\u01d0\5> \2\u018d\u01d0")
        buf.write("\5@!\2\u018e\u01d0\5B\"\2\u018f\u01d0\5D#\2\u0190\u01d0")
        buf.write("\5F$\2\u0191\u01d0\5H%\2\u0192\u01d0\5J&\2\u0193\u01d0")
        buf.write("\5L\'\2\u0194\u01d0\5N(\2\u0195\u01d0\5P)\2\u0196\u01d0")
        buf.write("\5R*\2\u0197\u01d0\5T+\2\u0198\u01d0\5V,\2\u0199\u01d0")
        buf.write("\5X-\2\u019a\u01d0\5Z.\2\u019b\u01d0\5\\/\2\u019c\u01d0")
        buf.write("\5^\60\2\u019d\u01d0\5`\61\2\u019e\u01d0\5b\62\2\u019f")
        buf.write("\u01d0\5d\63\2\u01a0\u01d0\5f\64\2\u01a1\u01d0\5h\65\2")
        buf.write("\u01a2\u01d0\5j\66\2\u01a3\u01d0\5l\67\2\u01a4\u01d0\5")
        buf.write("n8\2\u01a5\u01d0\5p9\2\u01a6\u01d0\5r:\2\u01a7\u01d0\5")
        buf.write("t;\2\u01a8\u01d0\5v<\2\u01a9\u01d0\5x=\2\u01aa\u01d0\5")
        buf.write("z>\2\u01ab\u01d0\5|?\2\u01ac\u01d0\5~@\2\u01ad\u01d0\5")
        buf.write("\u0080A\2\u01ae\u01d0\5\u0082B\2\u01af\u01d0\5\u0084C")
        buf.write("\2\u01b0\u01d0\5\u0086D\2\u01b1\u01d0\5\u0088E\2\u01b2")
        buf.write("\u01d0\5\u008aF\2\u01b3\u01d0\5\u008cG\2\u01b4\u01d0\5")
        buf.write("\u008eH\2\u01b5\u01d0\5\u0090I\2\u01b6\u01b7\7j\2\2\u01b7")
        buf.write("\u01b8\b\20\1\2\u01b8\u01b9\b\20\1\2\u01b9\u01ba\b\20")
        buf.write("\1\2\u01ba\u01bb\b\20\1\2\u01bb\u01bc\b\20\1\2\u01bc\u01bd")
        buf.write("\7\r\2\2\u01bd\u01ca\b\20\1\2\u01be\u01bf\5$\23\2\u01bf")
        buf.write("\u01c7\b\20\1\2\u01c0\u01c1\7\n\2\2\u01c1\u01c2\b\20\1")
        buf.write("\2\u01c2\u01c3\5$\23\2\u01c3\u01c4\b\20\1\2\u01c4\u01c6")
        buf.write("\3\2\2\2\u01c5\u01c0\3\2\2\2\u01c6\u01c9\3\2\2\2\u01c7")
        buf.write("\u01c5\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01cb\3\2\2\2")
        buf.write("\u01c9\u01c7\3\2\2\2\u01ca\u01be\3\2\2\2\u01ca\u01cb\3")
        buf.write("\2\2\2\u01cb\u01cc\3\2\2\2\u01cc\u01cd\7\16\2\2\u01cd")
        buf.write("\u01ce\b\20\1\2\u01ce\u01d0\b\20\1\2\u01cf\u0183\3\2\2")
        buf.write("\2\u01cf\u0184\3\2\2\2\u01cf\u0185\3\2\2\2\u01cf\u0186")
        buf.write("\3\2\2\2\u01cf\u0187\3\2\2\2\u01cf\u0188\3\2\2\2\u01cf")
        buf.write("\u0189\3\2\2\2\u01cf\u018a\3\2\2\2\u01cf\u018b\3\2\2\2")
        buf.write("\u01cf\u018c\3\2\2\2\u01cf\u018d\3\2\2\2\u01cf\u018e\3")
        buf.write("\2\2\2\u01cf\u018f\3\2\2\2\u01cf\u0190\3\2\2\2\u01cf\u0191")
        buf.write("\3\2\2\2\u01cf\u0192\3\2\2\2\u01cf\u0193\3\2\2\2\u01cf")
        buf.write("\u0194\3\2\2\2\u01cf\u0195\3\2\2\2\u01cf\u0196\3\2\2\2")
        buf.write("\u01cf\u0197\3\2\2\2\u01cf\u0198\3\2\2\2\u01cf\u0199\3")
        buf.write("\2\2\2\u01cf\u019a\3\2\2\2\u01cf\u019b\3\2\2\2\u01cf\u019c")
        buf.write("\3\2\2\2\u01cf\u019d\3\2\2\2\u01cf\u019e\3\2\2\2\u01cf")
        buf.write("\u019f\3\2\2\2\u01cf\u01a0\3\2\2\2\u01cf\u01a1\3\2\2\2")
        buf.write("\u01cf\u01a2\3\2\2\2\u01cf\u01a3\3\2\2\2\u01cf\u01a4\3")
        buf.write("\2\2\2\u01cf\u01a5\3\2\2\2\u01cf\u01a6\3\2\2\2\u01cf\u01a7")
        buf.write("\3\2\2\2\u01cf\u01a8\3\2\2\2\u01cf\u01a9\3\2\2\2\u01cf")
        buf.write("\u01aa\3\2\2\2\u01cf\u01ab\3\2\2\2\u01cf\u01ac\3\2\2\2")
        buf.write("\u01cf\u01ad\3\2\2\2\u01cf\u01ae\3\2\2\2\u01cf\u01af\3")
        buf.write("\2\2\2\u01cf\u01b0\3\2\2\2\u01cf\u01b1\3\2\2\2\u01cf\u01b2")
        buf.write("\3\2\2\2\u01cf\u01b3\3\2\2\2\u01cf\u01b4\3\2\2\2\u01cf")
        buf.write("\u01b5\3\2\2\2\u01cf\u01b6\3\2\2\2\u01d0\37\3\2\2\2\u01d1")
        buf.write("\u01d2\5\"\22\2\u01d2\u01e4\b\21\1\2\u01d3\u01d4\7\37")
        buf.write("\2\2\u01d4\u01d8\b\21\1\2\u01d5\u01d6\7 \2\2\u01d6\u01d8")
        buf.write("\b\21\1\2\u01d7\u01d3\3\2\2\2\u01d7\u01d5\3\2\2\2\u01d8")
        buf.write("\u01d9\3\2\2\2\u01d9\u01d7\3\2\2\2\u01d9\u01da\3\2\2\2")
        buf.write("\u01da\u01dc\3\2\2\2\u01db\u01dd\5\"\22\2\u01dc\u01db")
        buf.write("\3\2\2\2\u01dd\u01de\3\2\2\2\u01de\u01dc\3\2\2\2\u01de")
        buf.write("\u01df\3\2\2\2\u01df\u01e0\3\2\2\2\u01e0\u01e1\b\21\1")
        buf.write("\2\u01e1\u01e3\3\2\2\2\u01e2\u01d7\3\2\2\2\u01e3\u01e6")
        buf.write("\3\2\2\2\u01e4\u01e2\3\2\2\2\u01e4\u01e5\3\2\2\2\u01e5")
        buf.write("!\3\2\2\2\u01e6\u01e4\3\2\2\2\u01e7\u01e8\5$\23\2\u01e8")
        buf.write("\u0200\b\22\1\2\u01e9\u01ea\7&\2\2\u01ea\u01f4\b\22\1")
        buf.write("\2\u01eb\u01ec\7#\2\2\u01ec\u01f4\b\22\1\2\u01ed\u01ee")
        buf.write("\7\"\2\2\u01ee\u01f4\b\22\1\2\u01ef\u01f0\7%\2\2\u01f0")
        buf.write("\u01f4\b\22\1\2\u01f1\u01f2\7$\2\2\u01f2\u01f4\b\22\1")
        buf.write("\2\u01f3\u01e9\3\2\2\2\u01f3\u01eb\3\2\2\2\u01f3\u01ed")
        buf.write("\3\2\2\2\u01f3\u01ef\3\2\2\2\u01f3\u01f1\3\2\2\2\u01f4")
        buf.write("\u01f5\3\2\2\2\u01f5\u01f3\3\2\2\2\u01f5\u01f6\3\2\2\2")
        buf.write("\u01f6\u01f8\3\2\2\2\u01f7\u01f9\5$\23\2\u01f8\u01f7\3")
        buf.write("\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\u01f8\3\2\2\2\u01fa\u01fb")
        buf.write("\3\2\2\2\u01fb\u01fc\3\2\2\2\u01fc\u01fd\b\22\1\2\u01fd")
        buf.write("\u01ff\3\2\2\2\u01fe\u01f3\3\2\2\2\u01ff\u0202\3\2\2\2")
        buf.write("\u0200\u01fe\3\2\2\2\u0200\u0201\3\2\2\2\u0201#\3\2\2")
        buf.write("\2\u0202\u0200\3\2\2\2\u0203\u0204\5&\24\2\u0204\u0216")
        buf.write("\b\23\1\2\u0205\u0206\7(\2\2\u0206\u020a\b\23\1\2\u0207")
        buf.write("\u0208\7\'\2\2\u0208\u020a\b\23\1\2\u0209\u0205\3\2\2")
        buf.write("\2\u0209\u0207\3\2\2\2\u020a\u020b\3\2\2\2\u020b\u0209")
        buf.write("\3\2\2\2\u020b\u020c\3\2\2\2\u020c\u020e\3\2\2\2\u020d")
        buf.write("\u020f\5&\24\2\u020e\u020d\3\2\2\2\u020f\u0210\3\2\2\2")
        buf.write("\u0210\u020e\3\2\2\2\u0210\u0211\3\2\2\2\u0211\u0212\3")
        buf.write("\2\2\2\u0212\u0213\b\23\1\2\u0213\u0215\3\2\2\2\u0214")
        buf.write("\u0209\3\2\2\2\u0215\u0218\3\2\2\2\u0216\u0214\3\2\2\2")
        buf.write("\u0216\u0217\3\2\2\2\u0217%\3\2\2\2\u0218\u0216\3\2\2")
        buf.write("\2\u0219\u021a\5(\25\2\u021a\u022c\b\24\1\2\u021b\u021c")
        buf.write("\7*\2\2\u021c\u0220\b\24\1\2\u021d\u021e\7)\2\2\u021e")
        buf.write("\u0220\b\24\1\2\u021f\u021b\3\2\2\2\u021f\u021d\3\2\2")
        buf.write("\2\u0220\u0221\3\2\2\2\u0221\u021f\3\2\2\2\u0221\u0222")
        buf.write("\3\2\2\2\u0222\u0224\3\2\2\2\u0223\u0225\5(\25\2\u0224")
        buf.write("\u0223\3\2\2\2\u0225\u0226\3\2\2\2\u0226\u0224\3\2\2\2")
        buf.write("\u0226\u0227\3\2\2\2\u0227\u0228\3\2\2\2\u0228\u0229\b")
        buf.write("\24\1\2\u0229\u022b\3\2\2\2\u022a\u021f\3\2\2\2\u022b")
        buf.write("\u022e\3\2\2\2\u022c\u022a\3\2\2\2\u022c\u022d\3\2\2\2")
        buf.write("\u022d\'\3\2\2\2\u022e\u022c\3\2\2\2\u022f\u0230\7\r\2")
        buf.write("\2\u0230\u0231\b\25\1\2\u0231\u0232\5 \21\2\u0232\u0233")
        buf.write("\7\16\2\2\u0233\u0234\b\25\1\2\u0234\u023d\3\2\2\2\u0235")
        buf.write("\u0237\t\2\2\2\u0236\u0235\3\2\2\2\u0236\u0237\3\2\2\2")
        buf.write("\u0237\u0238\3\2\2\2\u0238\u0239\5*\26\2\u0239\u023a\b")
        buf.write("\25\1\2\u023a\u023b\b\25\1\2\u023b\u023d\3\2\2\2\u023c")
        buf.write("\u022f\3\2\2\2\u023c\u0236\3\2\2\2\u023d)\3\2\2\2\u023e")
        buf.write("\u023f\5\n\6\2\u023f\u0240\b\26\1\2\u0240\u0241\b\26\1")
        buf.write("\2\u0241\u0250\3\2\2\2\u0242\u0243\7f\2\2\u0243\u0244")
        buf.write("\b\26\1\2\u0244\u0250\b\26\1\2\u0245\u0246\7g\2\2\u0246")
        buf.write("\u0247\b\26\1\2\u0247\u0250\b\26\1\2\u0248\u0249\7h\2")
        buf.write("\2\u0249\u024a\b\26\1\2\u024a\u0250\b\26\1\2\u024b\u024c")
        buf.write("\5\36\20\2\u024c\u024d\b\26\1\2\u024d\u024e\b\26\1\2\u024e")
        buf.write("\u0250\3\2\2\2\u024f\u023e\3\2\2\2\u024f\u0242\3\2\2\2")
        buf.write("\u024f\u0245\3\2\2\2\u024f\u0248\3\2\2\2\u024f\u024b\3")
        buf.write("\2\2\2\u0250+\3\2\2\2\u0251\u0252\7,\2\2\u0252\u0253\5")
        buf.write(" \21\2\u0253\u0254\7\b\2\2\u0254\u0255\b\27\1\2\u0255")
        buf.write("-\3\2\2\2\u0256\u0257\7-\2\2\u0257\u0258\7\r\2\2\u0258")
        buf.write("\u0259\5*\26\2\u0259\u025a\7\n\2\2\u025a\u025b\5*\26\2")
        buf.write("\u025b\u025c\7\n\2\2\u025c\u025d\5*\26\2\u025d\u025e\7")
        buf.write("\n\2\2\u025e\u025f\5*\26\2\u025f\u0260\7\16\2\2\u0260")
        buf.write("\u0261\7\b\2\2\u0261/\3\2\2\2\u0262\u0263\7.\2\2\u0263")
        buf.write("\u0264\7\r\2\2\u0264\u0265\5*\26\2\u0265\u0266\7\n\2\2")
        buf.write("\u0266\u0267\5*\26\2\u0267\u0268\7\16\2\2\u0268\u0269")
        buf.write("\7\b\2\2\u0269\61\3\2\2\2\u026a\u026b\7/\2\2\u026b\u026c")
        buf.write("\7\r\2\2\u026c\u026d\5*\26\2\u026d\u026e\7\n\2\2\u026e")
        buf.write("\u026f\5*\26\2\u026f\u0270\7\n\2\2\u0270\u0271\5*\26\2")
        buf.write("\u0271\u0272\7\16\2\2\u0272\u0273\7\b\2\2\u0273\63\3\2")
        buf.write("\2\2\u0274\u0275\7\60\2\2\u0275\u0276\7\r\2\2\u0276\u0277")
        buf.write("\5*\26\2\u0277\u0278\7\n\2\2\u0278\u0279\5*\26\2\u0279")
        buf.write("\u027a\7\16\2\2\u027a\u027b\7\b\2\2\u027b\65\3\2\2\2\u027c")
        buf.write("\u027d\7\61\2\2\u027d\u027e\7\r\2\2\u027e\u027f\5*\26")
        buf.write("\2\u027f\u0280\7\n\2\2\u0280\u0281\5*\26\2\u0281\u0282")
        buf.write("\7\16\2\2\u0282\u0283\7\b\2\2\u0283\67\3\2\2\2\u0284\u0285")
        buf.write("\7\62\2\2\u0285\u0286\7\r\2\2\u0286\u0287\7f\2\2\u0287")
        buf.write("\u0288\7\n\2\2\u0288\u0289\7f\2\2\u0289\u028a\7\n\2\2")
        buf.write("\u028a\u028b\5\b\5\2\u028b\u028c\7\16\2\2\u028c\u028d")
        buf.write("\7\b\2\2\u028d9\3\2\2\2\u028e\u028f\7\63\2\2\u028f\u0290")
        buf.write("\7\r\2\2\u0290\u0291\5*\26\2\u0291\u0292\7\n\2\2\u0292")
        buf.write("\u0293\5*\26\2\u0293\u0294\7\n\2\2\u0294\u0295\5*\26\2")
        buf.write("\u0295\u0296\7\n\2\2\u0296\u0297\5*\26\2\u0297\u0298\7")
        buf.write("\16\2\2\u0298\u0299\7\b\2\2\u0299;\3\2\2\2\u029a\u029b")
        buf.write("\7\64\2\2\u029b\u029c\7\r\2\2\u029c\u029d\5*\26\2\u029d")
        buf.write("\u029e\7\n\2\2\u029e\u029f\5*\26\2\u029f\u02a0\7\n\2\2")
        buf.write("\u02a0\u02a1\5*\26\2\u02a1\u02a2\7\n\2\2\u02a2\u02a3\5")
        buf.write("*\26\2\u02a3\u02a4\7\16\2\2\u02a4\u02a5\7\b\2\2\u02a5")
        buf.write("=\3\2\2\2\u02a6\u02a7\7\65\2\2\u02a7\u02a8\7\r\2\2\u02a8")
        buf.write("\u02a9\5*\26\2\u02a9\u02aa\7\n\2\2\u02aa\u02ab\5*\26\2")
        buf.write("\u02ab\u02ac\7\n\2\2\u02ac\u02ad\5*\26\2\u02ad\u02ae\7")
        buf.write("\n\2\2\u02ae\u02af\5*\26\2\u02af\u02b0\7\16\2\2\u02b0")
        buf.write("\u02b1\7\b\2\2\u02b1?\3\2\2\2\u02b2\u02b3\7\66\2\2\u02b3")
        buf.write("\u02b4\7\r\2\2\u02b4\u02b5\5*\26\2\u02b5\u02b6\7\n\2\2")
        buf.write("\u02b6\u02b7\5*\26\2\u02b7\u02b8\7\n\2\2\u02b8\u02b9\5")
        buf.write("*\26\2\u02b9\u02ba\7\n\2\2\u02ba\u02bb\5*\26\2\u02bb\u02bc")
        buf.write("\7\16\2\2\u02bc\u02bd\7\b\2\2\u02bdA\3\2\2\2\u02be\u02bf")
        buf.write("\7\67\2\2\u02bf\u02c0\7\r\2\2\u02c0\u02c1\5*\26\2\u02c1")
        buf.write("\u02c2\7\n\2\2\u02c2\u02c3\5*\26\2\u02c3\u02c4\7\n\2\2")
        buf.write("\u02c4\u02c5\5*\26\2\u02c5\u02c6\7\n\2\2\u02c6\u02c7\5")
        buf.write("*\26\2\u02c7\u02c8\7\16\2\2\u02c8\u02c9\7\b\2\2\u02c9")
        buf.write("C\3\2\2\2\u02ca\u02cb\78\2\2\u02cb\u02cc\7\r\2\2\u02cc")
        buf.write("\u02cd\5 \21\2\u02cd\u02ce\7\16\2\2\u02ce\u02cf\7\b\2")
        buf.write("\2\u02cfE\3\2\2\2\u02d0\u02d1\79\2\2\u02d1\u02d2\7\r\2")
        buf.write("\2\u02d2\u02d3\5 \21\2\u02d3\u02d4\7\16\2\2\u02d4\u02d5")
        buf.write("\7\b\2\2\u02d5G\3\2\2\2\u02d6\u02d7\7:\2\2\u02d7\u02d8")
        buf.write("\7\r\2\2\u02d8\u02d9\5 \21\2\u02d9\u02da\7\16\2\2\u02da")
        buf.write("\u02db\7\b\2\2\u02dbI\3\2\2\2\u02dc\u02dd\7;\2\2\u02dd")
        buf.write("\u02de\7\r\2\2\u02de\u02df\5 \21\2\u02df\u02e0\7\16\2")
        buf.write("\2\u02e0\u02e1\7\b\2\2\u02e1K\3\2\2\2\u02e2\u02e3\7<\2")
        buf.write("\2\u02e3\u02e4\7\r\2\2\u02e4\u02e5\5 \21\2\u02e5\u02e6")
        buf.write("\7\16\2\2\u02e6\u02e7\7\b\2\2\u02e7M\3\2\2\2\u02e8\u02e9")
        buf.write("\7=\2\2\u02e9\u02ea\7\r\2\2\u02ea\u02eb\5 \21\2\u02eb")
        buf.write("\u02ec\7\16\2\2\u02ec\u02ed\7\b\2\2\u02edO\3\2\2\2\u02ee")
        buf.write("\u02ef\7>\2\2\u02ef\u02f0\7\r\2\2\u02f0\u02f1\5 \21\2")
        buf.write("\u02f1\u02f2\7\16\2\2\u02f2\u02f3\7\b\2\2\u02f3Q\3\2\2")
        buf.write("\2\u02f4\u02f5\7?\2\2\u02f5\u02f6\7\r\2\2\u02f6\u02f7")
        buf.write("\5 \21\2\u02f7\u02f8\7\16\2\2\u02f8\u02f9\7\b\2\2\u02f9")
        buf.write("S\3\2\2\2\u02fa\u02fb\7@\2\2\u02fb\u02fc\7\r\2\2\u02fc")
        buf.write("\u02fd\5 \21\2\u02fd\u02fe\7\16\2\2\u02fe\u02ff\7\b\2")
        buf.write("\2\u02ffU\3\2\2\2\u0300\u0301\7A\2\2\u0301\u0302\7\r\2")
        buf.write("\2\u0302\u0303\5 \21\2\u0303\u0304\7\16\2\2\u0304\u0305")
        buf.write("\7\b\2\2\u0305W\3\2\2\2\u0306\u0307\7B\2\2\u0307\u0308")
        buf.write("\7\r\2\2\u0308\u030d\5 \21\2\u0309\u030a\7\n\2\2\u030a")
        buf.write("\u030c\5 \21\2\u030b\u0309\3\2\2\2\u030c\u030f\3\2\2\2")
        buf.write("\u030d\u030b\3\2\2\2\u030d\u030e\3\2\2\2\u030e\u0310\3")
        buf.write("\2\2\2\u030f\u030d\3\2\2\2\u0310\u0311\7\16\2\2\u0311")
        buf.write("\u0312\7\b\2\2\u0312Y\3\2\2\2\u0313\u0314\7C\2\2\u0314")
        buf.write("\u0315\7\r\2\2\u0315\u031a\5 \21\2\u0316\u0317\7\n\2\2")
        buf.write("\u0317\u0319\5 \21\2\u0318\u0316\3\2\2\2\u0319\u031c\3")
        buf.write("\2\2\2\u031a\u0318\3\2\2\2\u031a\u031b\3\2\2\2\u031b\u031d")
        buf.write("\3\2\2\2\u031c\u031a\3\2\2\2\u031d\u031e\7\16\2\2\u031e")
        buf.write("\u031f\7\b\2\2\u031f[\3\2\2\2\u0320\u0321\7D\2\2\u0321")
        buf.write("\u0322\7\r\2\2\u0322\u0327\5 \21\2\u0323\u0324\7\n\2\2")
        buf.write("\u0324\u0326\5 \21\2\u0325\u0323\3\2\2\2\u0326\u0329\3")
        buf.write("\2\2\2\u0327\u0325\3\2\2\2\u0327\u0328\3\2\2\2\u0328\u032a")
        buf.write("\3\2\2\2\u0329\u0327\3\2\2\2\u032a\u032b\7\16\2\2\u032b")
        buf.write("\u032c\7\b\2\2\u032c]\3\2\2\2\u032d\u032e\7E\2\2\u032e")
        buf.write("\u032f\7\r\2\2\u032f\u0334\5 \21\2\u0330\u0331\7\n\2\2")
        buf.write("\u0331\u0333\5 \21\2\u0332\u0330\3\2\2\2\u0333\u0336\3")
        buf.write("\2\2\2\u0334\u0332\3\2\2\2\u0334\u0335\3\2\2\2\u0335\u0337")
        buf.write("\3\2\2\2\u0336\u0334\3\2\2\2\u0337\u0338\7\16\2\2\u0338")
        buf.write("\u0339\7\b\2\2\u0339_\3\2\2\2\u033a\u033b\7F\2\2\u033b")
        buf.write("\u033c\7\r\2\2\u033c\u033d\5\b\5\2\u033d\u033e\7\n\2\2")
        buf.write("\u033e\u033f\7f\2\2\u033f\u0340\7\16\2\2\u0340\u0341\7")
        buf.write("\b\2\2\u0341a\3\2\2\2\u0342\u0343\7G\2\2\u0343\u0344\7")
        buf.write("\r\2\2\u0344\u0349\5 \21\2\u0345\u0346\7\n\2\2\u0346\u0348")
        buf.write("\5 \21\2\u0347\u0345\3\2\2\2\u0348\u034b\3\2\2\2\u0349")
        buf.write("\u0347\3\2\2\2\u0349\u034a\3\2\2\2\u034a\u034c\3\2\2\2")
        buf.write("\u034b\u0349\3\2\2\2\u034c\u034d\7\16\2\2\u034d\u034e")
        buf.write("\7\b\2\2\u034ec\3\2\2\2\u034f\u0350\7H\2\2\u0350\u0351")
        buf.write("\7\r\2\2\u0351\u0352\5\b\5\2\u0352\u0353\7\16\2\2\u0353")
        buf.write("\u0354\7\b\2\2\u0354e\3\2\2\2\u0355\u0356\7I\2\2\u0356")
        buf.write("\u0357\7\r\2\2\u0357\u0358\5\b\5\2\u0358\u0359\7\16\2")
        buf.write("\2\u0359\u035a\7\b\2\2\u035ag\3\2\2\2\u035b\u035c\7J\2")
        buf.write("\2\u035c\u035d\7\r\2\2\u035d\u0362\5 \21\2\u035e\u035f")
        buf.write("\7\n\2\2\u035f\u0361\5 \21\2\u0360\u035e\3\2\2\2\u0361")
        buf.write("\u0364\3\2\2\2\u0362\u0360\3\2\2\2\u0362\u0363\3\2\2\2")
        buf.write("\u0363\u0365\3\2\2\2\u0364\u0362\3\2\2\2\u0365\u0366\7")
        buf.write("\16\2\2\u0366\u0367\7\b\2\2\u0367i\3\2\2\2\u0368\u0369")
        buf.write("\7K\2\2\u0369\u036a\7\r\2\2\u036a\u036f\5 \21\2\u036b")
        buf.write("\u036c\7\n\2\2\u036c\u036e\5 \21\2\u036d\u036b\3\2\2\2")
        buf.write("\u036e\u0371\3\2\2\2\u036f\u036d\3\2\2\2\u036f\u0370\3")
        buf.write("\2\2\2\u0370\u0372\3\2\2\2\u0371\u036f\3\2\2\2\u0372\u0373")
        buf.write("\7\16\2\2\u0373\u0374\7\b\2\2\u0374k\3\2\2\2\u0375\u0376")
        buf.write("\7L\2\2\u0376\u0377\7\r\2\2\u0377\u0378\5\b\5\2\u0378")
        buf.write("\u0379\7\n\2\2\u0379\u037a\7k\2\2\u037a\u037b\7\16\2\2")
        buf.write("\u037b\u037c\7\b\2\2\u037c\u0386\3\2\2\2\u037d\u037e\7")
        buf.write("L\2\2\u037e\u037f\7\r\2\2\u037f\u0380\5\b\5\2\u0380\u0381")
        buf.write("\7\n\2\2\u0381\u0382\7l\2\2\u0382\u0383\7\16\2\2\u0383")
        buf.write("\u0384\7\b\2\2\u0384\u0386\3\2\2\2\u0385\u0375\3\2\2\2")
        buf.write("\u0385\u037d\3\2\2\2\u0386m\3\2\2\2\u0387\u0388\7M\2\2")
        buf.write("\u0388\u0389\7\r\2\2\u0389\u038a\5*\26\2\u038a\u038b\7")
        buf.write("\n\2\2\u038b\u038c\5*\26\2\u038c\u038d\7\16\2\2\u038d")
        buf.write("\u038e\7\b\2\2\u038eo\3\2\2\2\u038f\u0390\7N\2\2\u0390")
        buf.write("\u0391\7\r\2\2\u0391\u0392\5*\26\2\u0392\u0393\7\16\2")
        buf.write("\2\u0393\u0394\7\b\2\2\u0394q\3\2\2\2\u0395\u0396\7O\2")
        buf.write("\2\u0396\u0397\7\r\2\2\u0397\u0398\5*\26\2\u0398\u0399")
        buf.write("\7\n\2\2\u0399\u039a\5*\26\2\u039a\u039b\7\n\2\2\u039b")
        buf.write("\u039c\t\3\2\2\u039c\u039d\7\16\2\2\u039d\u039e\7\b\2")
        buf.write("\2\u039es\3\2\2\2\u039f\u03a0\7P\2\2\u03a0\u03a1\7\r\2")
        buf.write("\2\u03a1\u03a2\5*\26\2\u03a2\u03a3\7\16\2\2\u03a3\u03a4")
        buf.write("\7\b\2\2\u03a4u\3\2\2\2\u03a5\u03a6\7Q\2\2\u03a6\u03a7")
        buf.write("\7\r\2\2\u03a7\u03ac\5*\26\2\u03a8\u03a9\7\n\2\2\u03a9")
        buf.write("\u03ab\5*\26\2\u03aa\u03a8\3\2\2\2\u03ab\u03ae\3\2\2\2")
        buf.write("\u03ac\u03aa\3\2\2\2\u03ac\u03ad\3\2\2\2\u03ad\u03af\3")
        buf.write("\2\2\2\u03ae\u03ac\3\2\2\2\u03af\u03b0\7\16\2\2\u03b0")
        buf.write("\u03b1\7\b\2\2\u03b1w\3\2\2\2\u03b2\u03b3\7R\2\2\u03b3")
        buf.write("\u03b4\7\r\2\2\u03b4\u03b5\5*\26\2\u03b5\u03b6\7\16\2")
        buf.write("\2\u03b6\u03b7\7\b\2\2\u03b7y\3\2\2\2\u03b8\u03b9\7S\2")
        buf.write("\2\u03b9\u03ba\7\r\2\2\u03ba\u03bb\5*\26\2\u03bb\u03bc")
        buf.write("\7\16\2\2\u03bc\u03bd\7\b\2\2\u03bd{\3\2\2\2\u03be\u03bf")
        buf.write("\7T\2\2\u03bf\u03c0\7\r\2\2\u03c0\u03c1\5*\26\2\u03c1")
        buf.write("\u03c2\7\16\2\2\u03c2\u03c3\7\b\2\2\u03c3}\3\2\2\2\u03c4")
        buf.write("\u03c5\7U\2\2\u03c5\u03c6\7\r\2\2\u03c6\u03c7\5*\26\2")
        buf.write("\u03c7\u03c8\7\16\2\2\u03c8\u03c9\7\b\2\2\u03c9\177\3")
        buf.write("\2\2\2\u03ca\u03cb\7V\2\2\u03cb\u03cc\7\r\2\2\u03cc\u03cd")
        buf.write("\5*\26\2\u03cd\u03ce\7\16\2\2\u03ce\u03cf\7\b\2\2\u03cf")
        buf.write("\u0081\3\2\2\2\u03d0\u03d1\7W\2\2\u03d1\u03d2\7\r\2\2")
        buf.write("\u03d2\u03d7\5*\26\2\u03d3\u03d4\7\n\2\2\u03d4\u03d6\5")
        buf.write("*\26\2\u03d5\u03d3\3\2\2\2\u03d6\u03d9\3\2\2\2\u03d7\u03d5")
        buf.write("\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8\u03da\3\2\2\2\u03d9")
        buf.write("\u03d7\3\2\2\2\u03da\u03db\7\16\2\2\u03db\u03dc\7\b\2")
        buf.write("\2\u03dc\u0083\3\2\2\2\u03dd\u03de\7X\2\2\u03de\u03df")
        buf.write("\7\r\2\2\u03df\u03e4\5 \21\2\u03e0\u03e1\7\n\2\2\u03e1")
        buf.write("\u03e3\5 \21\2\u03e2\u03e0\3\2\2\2\u03e3\u03e6\3\2\2\2")
        buf.write("\u03e4\u03e2\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5\u03e7\3")
        buf.write("\2\2\2\u03e6\u03e4\3\2\2\2\u03e7\u03e8\7\16\2\2\u03e8")
        buf.write("\u03e9\7\b\2\2\u03e9\u0085\3\2\2\2\u03ea\u03eb\7Y\2\2")
        buf.write("\u03eb\u03ee\7\r\2\2\u03ec\u03ef\7i\2\2\u03ed\u03ef\5")
        buf.write("*\26\2\u03ee\u03ec\3\2\2\2\u03ee\u03ed\3\2\2\2\u03ef\u03f0")
        buf.write("\3\2\2\2\u03f0\u03f1\7\16\2\2\u03f1\u03f2\7\b\2\2\u03f2")
        buf.write("\u0087\3\2\2\2\u03f3\u03f4\7Z\2\2\u03f4\u03f5\7\r\2\2")
        buf.write("\u03f5\u03f6\5*\26\2\u03f6\u03f7\7\n\2\2\u03f7\u03f8\5")
        buf.write("*\26\2\u03f8\u03f9\7\n\2\2\u03f9\u03fa\5*\26\2\u03fa\u03fb")
        buf.write("\7\16\2\2\u03fb\u03fc\7\b\2\2\u03fc\u0089\3\2\2\2\u03fd")
        buf.write("\u03fe\7[\2\2\u03fe\u03ff\7\r\2\2\u03ff\u0400\5*\26\2")
        buf.write("\u0400\u0401\7\16\2\2\u0401\u0402\7\b\2\2\u0402\u008b")
        buf.write("\3\2\2\2\u0403\u0404\7\\\2\2\u0404\u0405\7\r\2\2\u0405")
        buf.write("\u0406\5*\26\2\u0406\u0407\7\n\2\2\u0407\u0408\5*\26\2")
        buf.write("\u0408\u0409\7\n\2\2\u0409\u040a\5*\26\2\u040a\u040b\7")
        buf.write("\16\2\2\u040b\u040c\7\b\2\2\u040c\u008d\3\2\2\2\u040d")
        buf.write("\u040e\7]\2\2\u040e\u040f\7\r\2\2\u040f\u0410\5*\26\2")
        buf.write("\u0410\u0411\7\n\2\2\u0411\u0412\5*\26\2\u0412\u0413\7")
        buf.write("\16\2\2\u0413\u0414\7\b\2\2\u0414\u008f\3\2\2\2\u0415")
        buf.write("\u0416\7^\2\2\u0416\u0417\7\r\2\2\u0417\u0418\5*\26\2")
        buf.write("\u0418\u0419\7\n\2\2\u0419\u041a\5*\26\2\u041a\u041b\7")
        buf.write("\16\2\2\u041b\u041c\7\b\2\2\u041c\u0091\3\2\2\2\u041d")
        buf.write("\u041e\7\3\2\2\u041e\u0093\3\2\2\29\u009c\u00a2\u00ad")
        buf.write("\u00bb\u00d6\u00db\u00e9\u00ef\u00fc\u010e\u0111\u0117")
        buf.write("\u012a\u0135\u0148\u015d\u0163\u0166\u0174\u017a\u017d")
        buf.write("\u01c7\u01ca\u01cf\u01d7\u01d9\u01de\u01e4\u01f3\u01f5")
        buf.write("\u01fa\u0200\u0209\u020b\u0210\u0216\u021f\u0221\u0226")
        buf.write("\u022c\u0236\u023c\u024f\u030d\u031a\u0327\u0334\u0349")
        buf.write("\u0362\u036f\u0385\u03ac\u03d7\u03e4\u03ee")
        return buf.getvalue()


class NmodParser ( Parser ):

    grammarFileName = "Nmod.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'dotchart'", "'program'", "'main'", "'var'", 
                     "'.'", "';'", "':'", "','", "'['", "']'", "'('", "')'", 
                     "'{'", "'}'", "'<-'", "'func'", "'error'", "'null'", 
                     "'void'", "'int'", "'float'", "'char'", "'if'", "'else'", 
                     "'while'", "'read'", "'print'", "'='", "'and'", "'or'", 
                     "'not'", "'>'", "'>='", "'<'", "'<='", "'equal'", "'+'", 
                     "'-'", "'*'", "'/'", "'%'", "'return'", "'rnom'", "'rexp'", 
                     "'rgamma'", "'points'", "'lines'", "'text'", "'barplot'", 
                     "'piechart'", "'xyplot'", "'densityplot'", "'histogram'", 
                     "'sin'", "'cos'", "'tan'", "'asin'", "'acos'", "'atan'", 
                     "'atan2'", "'log'", "'log10'", "'exp'", "'f_max'", 
                     "'f_min'", "'f_range'", "'f_sum'", "'diff'", "'prod'", 
                     "'mean'", "'median'", "'quantile'", "'weighedmean'", 
                     "'rank'", "'variance'", "'sd'", "'cor'", "'cov'", "'f_round'", 
                     "'transpose'", "'diagonal'", "'ginv'", "'rowsum'", 
                     "'colsum'", "'load'", "'data'", "'library'", "'rpois'", 
                     "'rweibull'", "'rbinom'", "'rgeom'", "'runif'", "'pearson'", 
                     "'kendall'", "'spearman'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'0'", "'1'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "PROGRAM", "MAIN", "VARIABLES", 
                      "PERIOD", "SEMICOLON", "COLON", "COMMA", "LBRACKET", 
                      "RBRACKET", "LPRACKET", "RPRACKET", "LCRACKET", "RCRACKET", 
                      "ISFUNCTION", "FUNC", "ERROR", "NULL", "VOID", "INT", 
                      "FLOAT", "CHAR", "IF", "ELSE", "WHILE", "READ", "PRINT", 
                      "EQUALS", "AND", "OR", "NOT", "GREATERTHAN", "GREATEROR", 
                      "LESSERTHAN", "LESSEROR", "EQUAL", "PLUS", "MINUS", 
                      "TIMES", "DIVISION", "MODULE", "RETURN", "RNOM", "REXP", 
                      "RGAMMA", "POINTS", "LINES", "TEXT", "BARPLOT", "PIECHART", 
                      "XYPLOT", "DENSITYPLOT", "HISTOGRAM", "SIN", "COS", 
                      "TAN", "ASIN", "ACOS", "ATAN", "ATAN2", "LOG", "LOG10", 
                      "EXPONENT", "MAX", "MIN", "RANGE", "SUM", "DIFF", 
                      "PROD", "MEAN", "MEDIAN", "QUANTILE", "WEIGHEDMEAN", 
                      "RANK", "VARIANCE", "SD", "COR", "COV", "ROUND", "TRANSPOSE", 
                      "DIAGONAL", "GINV", "ROWSUM", "COLSUM", "LOAD", "DATA", 
                      "LIBRARY", "RPOIS", "RWEIBULL", "RBINOM", "RGEOM", 
                      "RUNIF", "PEARSON", "KENDALL", "SPEARMAN", "WHITESPACE", 
                      "NEWLINE", "LINECOMMENT", "MULTICOMMENT", "CTEI", 
                      "CTEF", "CTEC", "STRING", "ID", "ZERO", "ONE" ]

    RULE_program = 0
    RULE_f_type = 1
    RULE_variables = 2
    RULE_id_decl = 3
    RULE_id_access = 4
    RULE_modules = 5
    RULE_main = 6
    RULE_block = 7
    RULE_statute = 8
    RULE_assignment = 9
    RULE_condition = 10
    RULE_cicle = 11
    RULE_reading = 12
    RULE_writing = 13
    RULE_call_module = 14
    RULE_expression = 15
    RULE_sub_exp = 16
    RULE_exp = 17
    RULE_term = 18
    RULE_factor = 19
    RULE_var_cte = 20
    RULE_r_return = 21
    RULE_rnom = 22
    RULE_rexp = 23
    RULE_rgamma = 24
    RULE_points = 25
    RULE_lines = 26
    RULE_text = 27
    RULE_barplot = 28
    RULE_piechart = 29
    RULE_xyplot = 30
    RULE_densityplot = 31
    RULE_histogram = 32
    RULE_sin = 33
    RULE_cos = 34
    RULE_tan = 35
    RULE_asin = 36
    RULE_acos = 37
    RULE_atan = 38
    RULE_atan2 = 39
    RULE_log = 40
    RULE_log10 = 41
    RULE_exponent = 42
    RULE_f_max = 43
    RULE_f_min = 44
    RULE_f_range = 45
    RULE_f_sum = 46
    RULE_diff = 47
    RULE_prod = 48
    RULE_mean = 49
    RULE_median = 50
    RULE_quantile = 51
    RULE_weighedmean = 52
    RULE_rank = 53
    RULE_var = 54
    RULE_sd = 55
    RULE_cor = 56
    RULE_cov = 57
    RULE_f_round = 58
    RULE_transpose = 59
    RULE_diagonal = 60
    RULE_ginv = 61
    RULE_rowsum = 62
    RULE_colsum = 63
    RULE_load = 64
    RULE_data = 65
    RULE_library = 66
    RULE_rpois = 67
    RULE_rweibull = 68
    RULE_rbinom = 69
    RULE_rgeom = 70
    RULE_runif = 71
    RULE_dotchart = 72

    ruleNames =  [ "program", "f_type", "variables", "id_decl", "id_access", 
                   "modules", "main", "block", "statute", "assignment", 
                   "condition", "cicle", "reading", "writing", "call_module", 
                   "expression", "sub_exp", "exp", "term", "factor", "var_cte", 
                   "r_return", "rnom", "rexp", "rgamma", "points", "lines", 
                   "text", "barplot", "piechart", "xyplot", "densityplot", 
                   "histogram", "sin", "cos", "tan", "asin", "acos", "atan", 
                   "atan2", "log", "log10", "exponent", "f_max", "f_min", 
                   "f_range", "f_sum", "diff", "prod", "mean", "median", 
                   "quantile", "weighedmean", "rank", "var", "sd", "cor", 
                   "cov", "f_round", "transpose", "diagonal", "ginv", "rowsum", 
                   "colsum", "load", "data", "library", "rpois", "rweibull", 
                   "rbinom", "rgeom", "runif", "dotchart" ]

    EOF = Token.EOF
    T__0=1
    PROGRAM=2
    MAIN=3
    VARIABLES=4
    PERIOD=5
    SEMICOLON=6
    COLON=7
    COMMA=8
    LBRACKET=9
    RBRACKET=10
    LPRACKET=11
    RPRACKET=12
    LCRACKET=13
    RCRACKET=14
    ISFUNCTION=15
    FUNC=16
    ERROR=17
    NULL=18
    VOID=19
    INT=20
    FLOAT=21
    CHAR=22
    IF=23
    ELSE=24
    WHILE=25
    READ=26
    PRINT=27
    EQUALS=28
    AND=29
    OR=30
    NOT=31
    GREATERTHAN=32
    GREATEROR=33
    LESSERTHAN=34
    LESSEROR=35
    EQUAL=36
    PLUS=37
    MINUS=38
    TIMES=39
    DIVISION=40
    MODULE=41
    RETURN=42
    RNOM=43
    REXP=44
    RGAMMA=45
    POINTS=46
    LINES=47
    TEXT=48
    BARPLOT=49
    PIECHART=50
    XYPLOT=51
    DENSITYPLOT=52
    HISTOGRAM=53
    SIN=54
    COS=55
    TAN=56
    ASIN=57
    ACOS=58
    ATAN=59
    ATAN2=60
    LOG=61
    LOG10=62
    EXPONENT=63
    MAX=64
    MIN=65
    RANGE=66
    SUM=67
    DIFF=68
    PROD=69
    MEAN=70
    MEDIAN=71
    QUANTILE=72
    WEIGHEDMEAN=73
    RANK=74
    VARIANCE=75
    SD=76
    COR=77
    COV=78
    ROUND=79
    TRANSPOSE=80
    DIAGONAL=81
    GINV=82
    ROWSUM=83
    COLSUM=84
    LOAD=85
    DATA=86
    LIBRARY=87
    RPOIS=88
    RWEIBULL=89
    RBINOM=90
    RGEOM=91
    RUNIF=92
    PEARSON=93
    KENDALL=94
    SPEARMAN=95
    WHITESPACE=96
    NEWLINE=97
    LINECOMMENT=98
    MULTICOMMENT=99
    CTEI=100
    CTEF=101
    CTEC=102
    STRING=103
    ID=104
    ZERO=105
    ONE=106

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class ProgramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROGRAM(self):
            return self.getToken(NmodParser.PROGRAM, 0)

        def ID(self):
            return self.getToken(NmodParser.ID, 0)

        def COLON(self):
            return self.getToken(NmodParser.COLON, 0)

        def main(self):
            return self.getTypedRuleContext(NmodParser.MainContext,0)


        def variables(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.VariablesContext)
            else:
                return self.getTypedRuleContext(NmodParser.VariablesContext,i)


        def modules(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ModulesContext)
            else:
                return self.getTypedRuleContext(NmodParser.ModulesContext,i)


        def getRuleIndex(self):
            return NmodParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = NmodParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 146
            self.match(NmodParser.PROGRAM)
            self.state = 147
            self.match(NmodParser.ID)
            c.localFunc = 'global'
            c.insertFunctionDirectory(c.localFunc, 'void')
            self.state = 150
            self.match(NmodParser.COLON)
            self.state = 154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.VARIABLES:
                self.state = 151
                self.variables()
                self.state = 156
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.ID:
                self.state = 157
                self.modules()
                self.state = 162
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 163
            self.main()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class F_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self._INT = None # Token
            self._FLOAT = None # Token
            self._CHAR = None # Token

        def INT(self):
            return self.getToken(NmodParser.INT, 0)

        def FLOAT(self):
            return self.getToken(NmodParser.FLOAT, 0)

        def CHAR(self):
            return self.getToken(NmodParser.CHAR, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_f_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterF_type" ):
                listener.enterF_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitF_type" ):
                listener.exitF_type(self)




    def f_type(self):

        localctx = NmodParser.F_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_f_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 171
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NmodParser.INT]:
                self.state = 165
                localctx._INT = self.match(NmodParser.INT)
                localctx.type = (None if localctx._INT is None else localctx._INT.text)
                pass
            elif token in [NmodParser.FLOAT]:
                self.state = 167
                localctx._FLOAT = self.match(NmodParser.FLOAT)
                localctx.type = (None if localctx._FLOAT is None else localctx._FLOAT.text)
                pass
            elif token in [NmodParser.CHAR]:
                self.state = 169
                localctx._CHAR = self.match(NmodParser.CHAR)
                localctx.type = (None if localctx._CHAR is None else localctx._CHAR.text)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._f_type = None # F_typeContext
            self._id_decl = None # Id_declContext

        def VARIABLES(self):
            return self.getToken(NmodParser.VARIABLES, 0)

        def f_type(self):
            return self.getTypedRuleContext(NmodParser.F_typeContext,0)


        def COLON(self):
            return self.getToken(NmodParser.COLON, 0)

        def id_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Id_declContext)
            else:
                return self.getTypedRuleContext(NmodParser.Id_declContext,i)


        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_variables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariables" ):
                listener.enterVariables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariables" ):
                listener.exitVariables(self)




    def variables(self):

        localctx = NmodParser.VariablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_variables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 173
            self.match(NmodParser.VARIABLES)
            self.state = 174
            localctx._f_type = self.f_type()
            c.localType = (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop)))
            self.state = 176
            self.match(NmodParser.COLON)
            self.state = 177
            localctx._id_decl = self.id_decl()
            c.insertVarTable(c.localFunc, (None if localctx._id_decl is None else self._input.getText((localctx._id_decl.start,localctx._id_decl.stop))), c.localType)
            self.state = 185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 179
                self.match(NmodParser.COMMA)
                self.state = 180
                localctx._id_decl = self.id_decl()
                c.insertVarTable(c.localFunc, (None if localctx._id_decl is None else self._input.getText((localctx._id_decl.start,localctx._id_decl.stop))), c.localType)
                self.state = 187
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 188
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Id_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._ID = None # Token
            self._CTEI = None # Token

        def ID(self):
            return self.getToken(NmodParser.ID, 0)

        def LBRACKET(self):
            return self.getToken(NmodParser.LBRACKET, 0)

        def CTEI(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.CTEI)
            else:
                return self.getToken(NmodParser.CTEI, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COLON)
            else:
                return self.getToken(NmodParser.COLON, i)

        def RBRACKET(self):
            return self.getToken(NmodParser.RBRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_id_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_decl" ):
                listener.enterId_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_decl" ):
                listener.exitId_decl(self)




    def id_decl(self):

        localctx = NmodParser.Id_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_id_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 190
            localctx._ID = self.match(NmodParser.ID)
            c.insertStackOperand((None if localctx._ID is None else localctx._ID.text))
            self.state = 217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NmodParser.LBRACKET:
                self.state = 192
                self.match(NmodParser.LBRACKET)
                c.initDimVar()
                self.state = 194
                localctx._CTEI = self.match(NmodParser.CTEI)
                c.insertConstant('int', (None if localctx._CTEI is None else localctx._CTEI.text))
                c.setDimLowBound((None if localctx._CTEI is None else localctx._CTEI.text))
                self.state = 197
                self.match(NmodParser.COLON)
                self.state = 198
                localctx._CTEI = self.match(NmodParser.CTEI)
                c.insertConstant('int', (None if localctx._CTEI is None else localctx._CTEI.text))
                c.setDimHighBound((None if localctx._CTEI is None else localctx._CTEI.text))
                self.state = 212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NmodParser.COMMA:
                    self.state = 201
                    self.match(NmodParser.COMMA)
                    c.addDimension()
                    self.state = 203
                    localctx._CTEI = self.match(NmodParser.CTEI)
                    c.insertConstant('int', (None if localctx._CTEI is None else localctx._CTEI.text))
                    c.setDimLowBound((None if localctx._CTEI is None else localctx._CTEI.text))
                    self.state = 206
                    self.match(NmodParser.COLON)
                    self.state = 207
                    localctx._CTEI = self.match(NmodParser.CTEI)
                    c.insertConstant('int', (None if localctx._CTEI is None else localctx._CTEI.text))
                    c.setDimHighBound((None if localctx._CTEI is None else localctx._CTEI.text))
                    self.state = 214
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 215
                self.match(NmodParser.RBRACKET)
                c.calculateK()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Id_accessContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(NmodParser.ID, 0)

        def LBRACKET(self):
            return self.getToken(NmodParser.LBRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RBRACKET(self):
            return self.getToken(NmodParser.RBRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_id_access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_access" ):
                listener.enterId_access(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_access" ):
                listener.exitId_access(self)




    def id_access(self):

        localctx = NmodParser.Id_accessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_id_access)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 219
            self.match(NmodParser.ID)
            self.state = 237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NmodParser.LBRACKET:
                self.state = 220
                self.match(NmodParser.LBRACKET)
                c.dimVarBegin()
                self.state = 222
                self.exp()
                c.generateQuad(c.localFunc, 'exp')
                self.state = 231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NmodParser.COMMA:
                    self.state = 224
                    self.match(NmodParser.COMMA)
                    c.nextDimension()
                    self.state = 226
                    self.exp()
                    c.generateQuad(c.localFunc, 'exp')
                    self.state = 233
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 234
                self.match(NmodParser.RBRACKET)
                c.dimVarEnd()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModulesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._ID = None # Token
            self._f_type = None # F_typeContext

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.ID)
            else:
                return self.getToken(NmodParser.ID, i)

        def ISFUNCTION(self):
            return self.getToken(NmodParser.ISFUNCTION, 0)

        def FUNC(self):
            return self.getToken(NmodParser.FUNC, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def block(self):
            return self.getTypedRuleContext(NmodParser.BlockContext,0)


        def VOID(self):
            return self.getToken(NmodParser.VOID, 0)

        def f_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.F_typeContext)
            else:
                return self.getTypedRuleContext(NmodParser.F_typeContext,i)


        def variables(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.VariablesContext)
            else:
                return self.getTypedRuleContext(NmodParser.VariablesContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_modules

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModules" ):
                listener.enterModules(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModules" ):
                listener.exitModules(self)




    def modules(self):

        localctx = NmodParser.ModulesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_modules)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            localctx._ID = self.match(NmodParser.ID)
            c.localFunc = (None if localctx._ID is None else localctx._ID.text)
            self.state = 241
            self.match(NmodParser.ISFUNCTION)
            self.state = 250
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NmodParser.VOID]:
                self.state = 242
                self.match(NmodParser.VOID)
                c.localType = 'void'
                c.insertFunctionDirectory((None if localctx._ID is None else localctx._ID.text), 'void')
                pass
            elif token in [NmodParser.INT, NmodParser.FLOAT, NmodParser.CHAR]:
                self.state = 245
                localctx._f_type = self.f_type()
                c.localType = (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop)))
                c.insertFunctionDirectory((None if localctx._ID is None else localctx._ID.text), (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop))))
                c.insertVarTable('global', (None if localctx._ID is None else localctx._ID.text), (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop))))
                pass
            else:
                raise NoViableAltException(self)

            self.state = 252
            self.match(NmodParser.FUNC)
            self.state = 253
            self.match(NmodParser.LPRACKET)
            self.state = 271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NmodParser.INT) | (1 << NmodParser.FLOAT) | (1 << NmodParser.CHAR))) != 0):
                self.state = 254
                localctx._f_type = self.f_type()
                c.localType = (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop)))
                self.state = 256
                localctx._ID = self.match(NmodParser.ID)
                c.insertVarTable(c.localFunc, (None if localctx._ID is None else localctx._ID.text), (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop))))
                c.insertParam(c.localFunc, (None if localctx._ID is None else localctx._ID.text), (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop))))
                self.state = 268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NmodParser.COMMA:
                    self.state = 259
                    self.match(NmodParser.COMMA)
                    self.state = 260
                    localctx._f_type = self.f_type()
                    c.localType = (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop)))
                    self.state = 262
                    localctx._ID = self.match(NmodParser.ID)
                    c.insertVarTable(c.localFunc, (None if localctx._ID is None else localctx._ID.text), (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop))))
                    c.insertParam(c.localFunc, (None if localctx._ID is None else localctx._ID.text), (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop))))
                    self.state = 270
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 273
            self.match(NmodParser.RPRACKET)
            self.state = 277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.VARIABLES:
                self.state = 274
                self.variables()
                self.state = 279
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            c.moduleBegin()
            self.state = 281
            self.block()
            c.moduleEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MainContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAIN(self):
            return self.getToken(NmodParser.MAIN, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def block(self):
            return self.getTypedRuleContext(NmodParser.BlockContext,0)


        def getRuleIndex(self):
            return NmodParser.RULE_main

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMain" ):
                listener.enterMain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMain" ):
                listener.exitMain(self)




    def main(self):

        localctx = NmodParser.MainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_main)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 284
            self.match(NmodParser.MAIN)
            c.localFunc = 'global'
            c.mainBegin()
            self.state = 287
            self.match(NmodParser.LPRACKET)
            self.state = 288
            self.match(NmodParser.RPRACKET)
            self.state = 289
            self.block()
            c.mainEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCRACKET(self):
            return self.getToken(NmodParser.LCRACKET, 0)

        def RCRACKET(self):
            return self.getToken(NmodParser.RCRACKET, 0)

        def statute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.StatuteContext)
            else:
                return self.getTypedRuleContext(NmodParser.StatuteContext,i)


        def getRuleIndex(self):
            return NmodParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = NmodParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            self.match(NmodParser.LCRACKET)
            self.state = 296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NmodParser.IF) | (1 << NmodParser.WHILE) | (1 << NmodParser.READ) | (1 << NmodParser.PRINT) | (1 << NmodParser.RETURN) | (1 << NmodParser.RNOM) | (1 << NmodParser.REXP) | (1 << NmodParser.RGAMMA) | (1 << NmodParser.POINTS) | (1 << NmodParser.LINES) | (1 << NmodParser.TEXT) | (1 << NmodParser.BARPLOT) | (1 << NmodParser.PIECHART) | (1 << NmodParser.XYPLOT) | (1 << NmodParser.DENSITYPLOT) | (1 << NmodParser.HISTOGRAM) | (1 << NmodParser.SIN) | (1 << NmodParser.COS) | (1 << NmodParser.TAN) | (1 << NmodParser.ASIN) | (1 << NmodParser.ACOS) | (1 << NmodParser.ATAN) | (1 << NmodParser.ATAN2) | (1 << NmodParser.LOG) | (1 << NmodParser.LOG10) | (1 << NmodParser.EXPONENT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NmodParser.MAX - 64)) | (1 << (NmodParser.MIN - 64)) | (1 << (NmodParser.RANGE - 64)) | (1 << (NmodParser.SUM - 64)) | (1 << (NmodParser.DIFF - 64)) | (1 << (NmodParser.PROD - 64)) | (1 << (NmodParser.MEAN - 64)) | (1 << (NmodParser.MEDIAN - 64)) | (1 << (NmodParser.QUANTILE - 64)) | (1 << (NmodParser.WEIGHEDMEAN - 64)) | (1 << (NmodParser.RANK - 64)) | (1 << (NmodParser.VARIANCE - 64)) | (1 << (NmodParser.SD - 64)) | (1 << (NmodParser.COR - 64)) | (1 << (NmodParser.COV - 64)) | (1 << (NmodParser.ROUND - 64)) | (1 << (NmodParser.TRANSPOSE - 64)) | (1 << (NmodParser.DIAGONAL - 64)) | (1 << (NmodParser.GINV - 64)) | (1 << (NmodParser.ROWSUM - 64)) | (1 << (NmodParser.COLSUM - 64)) | (1 << (NmodParser.LOAD - 64)) | (1 << (NmodParser.DATA - 64)) | (1 << (NmodParser.LIBRARY - 64)) | (1 << (NmodParser.RPOIS - 64)) | (1 << (NmodParser.RWEIBULL - 64)) | (1 << (NmodParser.RBINOM - 64)) | (1 << (NmodParser.RGEOM - 64)) | (1 << (NmodParser.RUNIF - 64)) | (1 << (NmodParser.ID - 64)))) != 0):
                self.state = 293
                self.statute()
                self.state = 298
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 299
            self.match(NmodParser.RCRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatuteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self):
            return self.getTypedRuleContext(NmodParser.AssignmentContext,0)


        def condition(self):
            return self.getTypedRuleContext(NmodParser.ConditionContext,0)


        def reading(self):
            return self.getTypedRuleContext(NmodParser.ReadingContext,0)


        def writing(self):
            return self.getTypedRuleContext(NmodParser.WritingContext,0)


        def cicle(self):
            return self.getTypedRuleContext(NmodParser.CicleContext,0)


        def call_module(self):
            return self.getTypedRuleContext(NmodParser.Call_moduleContext,0)


        def getRuleIndex(self):
            return NmodParser.RULE_statute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatute" ):
                listener.enterStatute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatute" ):
                listener.exitStatute(self)




    def statute(self):

        localctx = NmodParser.StatuteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_statute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 301
                self.assignment()
                pass

            elif la_ == 2:
                self.state = 302
                self.condition()
                pass

            elif la_ == 3:
                self.state = 303
                self.reading()
                pass

            elif la_ == 4:
                self.state = 304
                self.writing()
                pass

            elif la_ == 5:
                self.state = 305
                self.cicle()
                pass

            elif la_ == 6:
                self.state = 306
                self.call_module()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._id_access = None # Id_accessContext
            self._EQUALS = None # Token

        def id_access(self):
            return self.getTypedRuleContext(NmodParser.Id_accessContext,0)


        def EQUALS(self):
            return self.getToken(NmodParser.EQUALS, 0)

        def exp(self):
            return self.getTypedRuleContext(NmodParser.ExpContext,0)


        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = NmodParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            localctx._id_access = self.id_access()
            c.insertStackOperand((None if localctx._id_access is None else self._input.getText((localctx._id_access.start,localctx._id_access.stop))))
            self.state = 311
            localctx._EQUALS = self.match(NmodParser.EQUALS)
            c.insertStackOperator((None if localctx._EQUALS is None else localctx._EQUALS.text))
            self.state = 313
            self.exp()
            c.generateAssignmentQuad()
            self.state = 315
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(NmodParser.IF, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.BlockContext)
            else:
                return self.getTypedRuleContext(NmodParser.BlockContext,i)


        def ELSE(self):
            return self.getToken(NmodParser.ELSE, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)




    def condition(self):

        localctx = NmodParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_condition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self.match(NmodParser.IF)
            self.state = 318
            self.match(NmodParser.LPRACKET)
            self.state = 319
            self.expression()
            self.state = 320
            self.match(NmodParser.RPRACKET)
            c.conditionStart('condition')
            self.state = 322
            self.block()
            self.state = 326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NmodParser.ELSE:
                self.state = 323
                self.match(NmodParser.ELSE)
                c.conditionElse()
                self.state = 325
                self.block()


            c.conditionEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CicleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(NmodParser.WHILE, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def block(self):
            return self.getTypedRuleContext(NmodParser.BlockContext,0)


        def getRuleIndex(self):
            return NmodParser.RULE_cicle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCicle" ):
                listener.enterCicle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCicle" ):
                listener.exitCicle(self)




    def cicle(self):

        localctx = NmodParser.CicleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_cicle)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.match(NmodParser.WHILE)
            c.insertStackJump(c.quadCount)
            self.state = 332
            self.match(NmodParser.LPRACKET)
            self.state = 333
            self.expression()
            self.state = 334
            self.match(NmodParser.RPRACKET)
            c.conditionStart('cicle')
            self.state = 336
            self.block()
            c.cicleEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReadingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._STRING = None # Token

        def READ(self):
            return self.getToken(NmodParser.READ, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def STRING(self):
            return self.getToken(NmodParser.STRING, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_reading

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReading" ):
                listener.enterReading(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReading" ):
                listener.exitReading(self)




    def reading(self):

        localctx = NmodParser.ReadingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_reading)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self.match(NmodParser.READ)
            self.state = 340
            self.match(NmodParser.LPRACKET)
            self.state = 356
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NmodParser.STRING]:
                self.state = 341
                localctx._STRING = self.match(NmodParser.STRING)
                c.insertStackOperand((None if localctx._STRING is None else localctx._STRING.text))
                c.insertStackType('char[]')
                pass
            elif token in [NmodParser.LPRACKET, NmodParser.PLUS, NmodParser.MINUS, NmodParser.RETURN, NmodParser.RNOM, NmodParser.REXP, NmodParser.RGAMMA, NmodParser.POINTS, NmodParser.LINES, NmodParser.TEXT, NmodParser.BARPLOT, NmodParser.PIECHART, NmodParser.XYPLOT, NmodParser.DENSITYPLOT, NmodParser.HISTOGRAM, NmodParser.SIN, NmodParser.COS, NmodParser.TAN, NmodParser.ASIN, NmodParser.ACOS, NmodParser.ATAN, NmodParser.ATAN2, NmodParser.LOG, NmodParser.LOG10, NmodParser.EXPONENT, NmodParser.MAX, NmodParser.MIN, NmodParser.RANGE, NmodParser.SUM, NmodParser.DIFF, NmodParser.PROD, NmodParser.MEAN, NmodParser.MEDIAN, NmodParser.QUANTILE, NmodParser.WEIGHEDMEAN, NmodParser.RANK, NmodParser.VARIANCE, NmodParser.SD, NmodParser.COR, NmodParser.COV, NmodParser.ROUND, NmodParser.TRANSPOSE, NmodParser.DIAGONAL, NmodParser.GINV, NmodParser.ROWSUM, NmodParser.COLSUM, NmodParser.LOAD, NmodParser.DATA, NmodParser.LIBRARY, NmodParser.RPOIS, NmodParser.RWEIBULL, NmodParser.RBINOM, NmodParser.RGEOM, NmodParser.RUNIF, NmodParser.CTEI, NmodParser.CTEF, NmodParser.CTEC, NmodParser.ID]:
                self.state = 345 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 344
                    self.expression()
                    self.state = 347 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NmodParser.LPRACKET) | (1 << NmodParser.PLUS) | (1 << NmodParser.MINUS) | (1 << NmodParser.RETURN) | (1 << NmodParser.RNOM) | (1 << NmodParser.REXP) | (1 << NmodParser.RGAMMA) | (1 << NmodParser.POINTS) | (1 << NmodParser.LINES) | (1 << NmodParser.TEXT) | (1 << NmodParser.BARPLOT) | (1 << NmodParser.PIECHART) | (1 << NmodParser.XYPLOT) | (1 << NmodParser.DENSITYPLOT) | (1 << NmodParser.HISTOGRAM) | (1 << NmodParser.SIN) | (1 << NmodParser.COS) | (1 << NmodParser.TAN) | (1 << NmodParser.ASIN) | (1 << NmodParser.ACOS) | (1 << NmodParser.ATAN) | (1 << NmodParser.ATAN2) | (1 << NmodParser.LOG) | (1 << NmodParser.LOG10) | (1 << NmodParser.EXPONENT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NmodParser.MAX - 64)) | (1 << (NmodParser.MIN - 64)) | (1 << (NmodParser.RANGE - 64)) | (1 << (NmodParser.SUM - 64)) | (1 << (NmodParser.DIFF - 64)) | (1 << (NmodParser.PROD - 64)) | (1 << (NmodParser.MEAN - 64)) | (1 << (NmodParser.MEDIAN - 64)) | (1 << (NmodParser.QUANTILE - 64)) | (1 << (NmodParser.WEIGHEDMEAN - 64)) | (1 << (NmodParser.RANK - 64)) | (1 << (NmodParser.VARIANCE - 64)) | (1 << (NmodParser.SD - 64)) | (1 << (NmodParser.COR - 64)) | (1 << (NmodParser.COV - 64)) | (1 << (NmodParser.ROUND - 64)) | (1 << (NmodParser.TRANSPOSE - 64)) | (1 << (NmodParser.DIAGONAL - 64)) | (1 << (NmodParser.GINV - 64)) | (1 << (NmodParser.ROWSUM - 64)) | (1 << (NmodParser.COLSUM - 64)) | (1 << (NmodParser.LOAD - 64)) | (1 << (NmodParser.DATA - 64)) | (1 << (NmodParser.LIBRARY - 64)) | (1 << (NmodParser.RPOIS - 64)) | (1 << (NmodParser.RWEIBULL - 64)) | (1 << (NmodParser.RBINOM - 64)) | (1 << (NmodParser.RGEOM - 64)) | (1 << (NmodParser.RUNIF - 64)) | (1 << (NmodParser.CTEI - 64)) | (1 << (NmodParser.CTEF - 64)) | (1 << (NmodParser.CTEC - 64)) | (1 << (NmodParser.ID - 64)))) != 0)):
                        break

                self.state = 353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NmodParser.COMMA:
                    self.state = 349
                    self.match(NmodParser.COMMA)
                    self.state = 350
                    self.expression()
                    self.state = 355
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [NmodParser.RPRACKET]:
                pass
            else:
                pass
            self.state = 358
            self.match(NmodParser.RPRACKET)
            self.state = 359
            self.match(NmodParser.SEMICOLON)
            c.generateCommonQuad('read')
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WritingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._STRING = None # Token

        def PRINT(self):
            return self.getToken(NmodParser.PRINT, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def STRING(self):
            return self.getToken(NmodParser.STRING, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_writing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWriting" ):
                listener.enterWriting(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWriting" ):
                listener.exitWriting(self)




    def writing(self):

        localctx = NmodParser.WritingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_writing)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.match(NmodParser.PRINT)
            self.state = 363
            self.match(NmodParser.LPRACKET)
            self.state = 379
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NmodParser.STRING]:
                self.state = 364
                localctx._STRING = self.match(NmodParser.STRING)
                c.insertStackOperand((None if localctx._STRING is None else localctx._STRING.text))
                c.insertStackType('char[]')
                pass
            elif token in [NmodParser.LPRACKET, NmodParser.PLUS, NmodParser.MINUS, NmodParser.RETURN, NmodParser.RNOM, NmodParser.REXP, NmodParser.RGAMMA, NmodParser.POINTS, NmodParser.LINES, NmodParser.TEXT, NmodParser.BARPLOT, NmodParser.PIECHART, NmodParser.XYPLOT, NmodParser.DENSITYPLOT, NmodParser.HISTOGRAM, NmodParser.SIN, NmodParser.COS, NmodParser.TAN, NmodParser.ASIN, NmodParser.ACOS, NmodParser.ATAN, NmodParser.ATAN2, NmodParser.LOG, NmodParser.LOG10, NmodParser.EXPONENT, NmodParser.MAX, NmodParser.MIN, NmodParser.RANGE, NmodParser.SUM, NmodParser.DIFF, NmodParser.PROD, NmodParser.MEAN, NmodParser.MEDIAN, NmodParser.QUANTILE, NmodParser.WEIGHEDMEAN, NmodParser.RANK, NmodParser.VARIANCE, NmodParser.SD, NmodParser.COR, NmodParser.COV, NmodParser.ROUND, NmodParser.TRANSPOSE, NmodParser.DIAGONAL, NmodParser.GINV, NmodParser.ROWSUM, NmodParser.COLSUM, NmodParser.LOAD, NmodParser.DATA, NmodParser.LIBRARY, NmodParser.RPOIS, NmodParser.RWEIBULL, NmodParser.RBINOM, NmodParser.RGEOM, NmodParser.RUNIF, NmodParser.CTEI, NmodParser.CTEF, NmodParser.CTEC, NmodParser.ID]:
                self.state = 368 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 367
                    self.expression()
                    self.state = 370 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NmodParser.LPRACKET) | (1 << NmodParser.PLUS) | (1 << NmodParser.MINUS) | (1 << NmodParser.RETURN) | (1 << NmodParser.RNOM) | (1 << NmodParser.REXP) | (1 << NmodParser.RGAMMA) | (1 << NmodParser.POINTS) | (1 << NmodParser.LINES) | (1 << NmodParser.TEXT) | (1 << NmodParser.BARPLOT) | (1 << NmodParser.PIECHART) | (1 << NmodParser.XYPLOT) | (1 << NmodParser.DENSITYPLOT) | (1 << NmodParser.HISTOGRAM) | (1 << NmodParser.SIN) | (1 << NmodParser.COS) | (1 << NmodParser.TAN) | (1 << NmodParser.ASIN) | (1 << NmodParser.ACOS) | (1 << NmodParser.ATAN) | (1 << NmodParser.ATAN2) | (1 << NmodParser.LOG) | (1 << NmodParser.LOG10) | (1 << NmodParser.EXPONENT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NmodParser.MAX - 64)) | (1 << (NmodParser.MIN - 64)) | (1 << (NmodParser.RANGE - 64)) | (1 << (NmodParser.SUM - 64)) | (1 << (NmodParser.DIFF - 64)) | (1 << (NmodParser.PROD - 64)) | (1 << (NmodParser.MEAN - 64)) | (1 << (NmodParser.MEDIAN - 64)) | (1 << (NmodParser.QUANTILE - 64)) | (1 << (NmodParser.WEIGHEDMEAN - 64)) | (1 << (NmodParser.RANK - 64)) | (1 << (NmodParser.VARIANCE - 64)) | (1 << (NmodParser.SD - 64)) | (1 << (NmodParser.COR - 64)) | (1 << (NmodParser.COV - 64)) | (1 << (NmodParser.ROUND - 64)) | (1 << (NmodParser.TRANSPOSE - 64)) | (1 << (NmodParser.DIAGONAL - 64)) | (1 << (NmodParser.GINV - 64)) | (1 << (NmodParser.ROWSUM - 64)) | (1 << (NmodParser.COLSUM - 64)) | (1 << (NmodParser.LOAD - 64)) | (1 << (NmodParser.DATA - 64)) | (1 << (NmodParser.LIBRARY - 64)) | (1 << (NmodParser.RPOIS - 64)) | (1 << (NmodParser.RWEIBULL - 64)) | (1 << (NmodParser.RBINOM - 64)) | (1 << (NmodParser.RGEOM - 64)) | (1 << (NmodParser.RUNIF - 64)) | (1 << (NmodParser.CTEI - 64)) | (1 << (NmodParser.CTEF - 64)) | (1 << (NmodParser.CTEC - 64)) | (1 << (NmodParser.ID - 64)))) != 0)):
                        break

                self.state = 376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NmodParser.COMMA:
                    self.state = 372
                    self.match(NmodParser.COMMA)
                    self.state = 373
                    self.expression()
                    self.state = 378
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [NmodParser.RPRACKET]:
                pass
            else:
                pass
            self.state = 381
            self.match(NmodParser.RPRACKET)
            self.state = 382
            self.match(NmodParser.SEMICOLON)
            c.generateCommonQuad('print')
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Call_moduleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self.val = None
            self._ID = None # Token

        def r_return(self):
            return self.getTypedRuleContext(NmodParser.R_returnContext,0)


        def rnom(self):
            return self.getTypedRuleContext(NmodParser.RnomContext,0)


        def rexp(self):
            return self.getTypedRuleContext(NmodParser.RexpContext,0)


        def rgamma(self):
            return self.getTypedRuleContext(NmodParser.RgammaContext,0)


        def points(self):
            return self.getTypedRuleContext(NmodParser.PointsContext,0)


        def lines(self):
            return self.getTypedRuleContext(NmodParser.LinesContext,0)


        def text(self):
            return self.getTypedRuleContext(NmodParser.TextContext,0)


        def barplot(self):
            return self.getTypedRuleContext(NmodParser.BarplotContext,0)


        def piechart(self):
            return self.getTypedRuleContext(NmodParser.PiechartContext,0)


        def xyplot(self):
            return self.getTypedRuleContext(NmodParser.XyplotContext,0)


        def densityplot(self):
            return self.getTypedRuleContext(NmodParser.DensityplotContext,0)


        def histogram(self):
            return self.getTypedRuleContext(NmodParser.HistogramContext,0)


        def sin(self):
            return self.getTypedRuleContext(NmodParser.SinContext,0)


        def cos(self):
            return self.getTypedRuleContext(NmodParser.CosContext,0)


        def tan(self):
            return self.getTypedRuleContext(NmodParser.TanContext,0)


        def asin(self):
            return self.getTypedRuleContext(NmodParser.AsinContext,0)


        def acos(self):
            return self.getTypedRuleContext(NmodParser.AcosContext,0)


        def atan(self):
            return self.getTypedRuleContext(NmodParser.AtanContext,0)


        def atan2(self):
            return self.getTypedRuleContext(NmodParser.Atan2Context,0)


        def log(self):
            return self.getTypedRuleContext(NmodParser.LogContext,0)


        def log10(self):
            return self.getTypedRuleContext(NmodParser.Log10Context,0)


        def exponent(self):
            return self.getTypedRuleContext(NmodParser.ExponentContext,0)


        def f_max(self):
            return self.getTypedRuleContext(NmodParser.F_maxContext,0)


        def f_min(self):
            return self.getTypedRuleContext(NmodParser.F_minContext,0)


        def f_range(self):
            return self.getTypedRuleContext(NmodParser.F_rangeContext,0)


        def f_sum(self):
            return self.getTypedRuleContext(NmodParser.F_sumContext,0)


        def diff(self):
            return self.getTypedRuleContext(NmodParser.DiffContext,0)


        def prod(self):
            return self.getTypedRuleContext(NmodParser.ProdContext,0)


        def mean(self):
            return self.getTypedRuleContext(NmodParser.MeanContext,0)


        def median(self):
            return self.getTypedRuleContext(NmodParser.MedianContext,0)


        def quantile(self):
            return self.getTypedRuleContext(NmodParser.QuantileContext,0)


        def weighedmean(self):
            return self.getTypedRuleContext(NmodParser.WeighedmeanContext,0)


        def rank(self):
            return self.getTypedRuleContext(NmodParser.RankContext,0)


        def var(self):
            return self.getTypedRuleContext(NmodParser.VarContext,0)


        def sd(self):
            return self.getTypedRuleContext(NmodParser.SdContext,0)


        def cor(self):
            return self.getTypedRuleContext(NmodParser.CorContext,0)


        def cov(self):
            return self.getTypedRuleContext(NmodParser.CovContext,0)


        def f_round(self):
            return self.getTypedRuleContext(NmodParser.F_roundContext,0)


        def transpose(self):
            return self.getTypedRuleContext(NmodParser.TransposeContext,0)


        def diagonal(self):
            return self.getTypedRuleContext(NmodParser.DiagonalContext,0)


        def ginv(self):
            return self.getTypedRuleContext(NmodParser.GinvContext,0)


        def rowsum(self):
            return self.getTypedRuleContext(NmodParser.RowsumContext,0)


        def colsum(self):
            return self.getTypedRuleContext(NmodParser.ColsumContext,0)


        def load(self):
            return self.getTypedRuleContext(NmodParser.LoadContext,0)


        def data(self):
            return self.getTypedRuleContext(NmodParser.DataContext,0)


        def library(self):
            return self.getTypedRuleContext(NmodParser.LibraryContext,0)


        def rpois(self):
            return self.getTypedRuleContext(NmodParser.RpoisContext,0)


        def rweibull(self):
            return self.getTypedRuleContext(NmodParser.RweibullContext,0)


        def rbinom(self):
            return self.getTypedRuleContext(NmodParser.RbinomContext,0)


        def rgeom(self):
            return self.getTypedRuleContext(NmodParser.RgeomContext,0)


        def runif(self):
            return self.getTypedRuleContext(NmodParser.RunifContext,0)


        def ID(self):
            return self.getToken(NmodParser.ID, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_call_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCall_module" ):
                listener.enterCall_module(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCall_module" ):
                listener.exitCall_module(self)




    def call_module(self):

        localctx = NmodParser.Call_moduleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_call_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 461
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NmodParser.RETURN]:
                self.state = 385
                self.r_return()
                pass
            elif token in [NmodParser.RNOM]:
                self.state = 386
                self.rnom()
                pass
            elif token in [NmodParser.REXP]:
                self.state = 387
                self.rexp()
                pass
            elif token in [NmodParser.RGAMMA]:
                self.state = 388
                self.rgamma()
                pass
            elif token in [NmodParser.POINTS]:
                self.state = 389
                self.points()
                pass
            elif token in [NmodParser.LINES]:
                self.state = 390
                self.lines()
                pass
            elif token in [NmodParser.TEXT]:
                self.state = 391
                self.text()
                pass
            elif token in [NmodParser.BARPLOT]:
                self.state = 392
                self.barplot()
                pass
            elif token in [NmodParser.PIECHART]:
                self.state = 393
                self.piechart()
                pass
            elif token in [NmodParser.XYPLOT]:
                self.state = 394
                self.xyplot()
                pass
            elif token in [NmodParser.DENSITYPLOT]:
                self.state = 395
                self.densityplot()
                pass
            elif token in [NmodParser.HISTOGRAM]:
                self.state = 396
                self.histogram()
                pass
            elif token in [NmodParser.SIN]:
                self.state = 397
                self.sin()
                pass
            elif token in [NmodParser.COS]:
                self.state = 398
                self.cos()
                pass
            elif token in [NmodParser.TAN]:
                self.state = 399
                self.tan()
                pass
            elif token in [NmodParser.ASIN]:
                self.state = 400
                self.asin()
                pass
            elif token in [NmodParser.ACOS]:
                self.state = 401
                self.acos()
                pass
            elif token in [NmodParser.ATAN]:
                self.state = 402
                self.atan()
                pass
            elif token in [NmodParser.ATAN2]:
                self.state = 403
                self.atan2()
                pass
            elif token in [NmodParser.LOG]:
                self.state = 404
                self.log()
                pass
            elif token in [NmodParser.LOG10]:
                self.state = 405
                self.log10()
                pass
            elif token in [NmodParser.EXPONENT]:
                self.state = 406
                self.exponent()
                pass
            elif token in [NmodParser.MAX]:
                self.state = 407
                self.f_max()
                pass
            elif token in [NmodParser.MIN]:
                self.state = 408
                self.f_min()
                pass
            elif token in [NmodParser.RANGE]:
                self.state = 409
                self.f_range()
                pass
            elif token in [NmodParser.SUM]:
                self.state = 410
                self.f_sum()
                pass
            elif token in [NmodParser.DIFF]:
                self.state = 411
                self.diff()
                pass
            elif token in [NmodParser.PROD]:
                self.state = 412
                self.prod()
                pass
            elif token in [NmodParser.MEAN]:
                self.state = 413
                self.mean()
                pass
            elif token in [NmodParser.MEDIAN]:
                self.state = 414
                self.median()
                pass
            elif token in [NmodParser.QUANTILE]:
                self.state = 415
                self.quantile()
                pass
            elif token in [NmodParser.WEIGHEDMEAN]:
                self.state = 416
                self.weighedmean()
                pass
            elif token in [NmodParser.RANK]:
                self.state = 417
                self.rank()
                pass
            elif token in [NmodParser.VARIANCE]:
                self.state = 418
                self.var()
                pass
            elif token in [NmodParser.SD]:
                self.state = 419
                self.sd()
                pass
            elif token in [NmodParser.COR]:
                self.state = 420
                self.cor()
                pass
            elif token in [NmodParser.COV]:
                self.state = 421
                self.cov()
                pass
            elif token in [NmodParser.ROUND]:
                self.state = 422
                self.f_round()
                pass
            elif token in [NmodParser.TRANSPOSE]:
                self.state = 423
                self.transpose()
                pass
            elif token in [NmodParser.DIAGONAL]:
                self.state = 424
                self.diagonal()
                pass
            elif token in [NmodParser.GINV]:
                self.state = 425
                self.ginv()
                pass
            elif token in [NmodParser.ROWSUM]:
                self.state = 426
                self.rowsum()
                pass
            elif token in [NmodParser.COLSUM]:
                self.state = 427
                self.colsum()
                pass
            elif token in [NmodParser.LOAD]:
                self.state = 428
                self.load()
                pass
            elif token in [NmodParser.DATA]:
                self.state = 429
                self.data()
                pass
            elif token in [NmodParser.LIBRARY]:
                self.state = 430
                self.library()
                pass
            elif token in [NmodParser.RPOIS]:
                self.state = 431
                self.rpois()
                pass
            elif token in [NmodParser.RWEIBULL]:
                self.state = 432
                self.rweibull()
                pass
            elif token in [NmodParser.RBINOM]:
                self.state = 433
                self.rbinom()
                pass
            elif token in [NmodParser.RGEOM]:
                self.state = 434
                self.rgeom()
                pass
            elif token in [NmodParser.RUNIF]:
                self.state = 435
                self.runif()
                pass
            elif token in [NmodParser.ID]:
                self.state = 436
                localctx._ID = self.match(NmodParser.ID)
                c.generateERA((None if localctx._ID is None else localctx._ID.text))
                c.functionDirectory.functionExists((None if localctx._ID is None else localctx._ID.text))
                c.localFunc = (None if localctx._ID is None else localctx._ID.text)
                localctx.val = c.getModuleReturnAddr((None if localctx._ID is None else localctx._ID.text))
                localctx.type = c.getModuleReturnType((None if localctx._ID is None else localctx._ID.text))
                self.state = 442
                self.match(NmodParser.LPRACKET)
                c.insertFalseBottom()
                self.state = 456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NmodParser.LPRACKET) | (1 << NmodParser.PLUS) | (1 << NmodParser.MINUS) | (1 << NmodParser.RETURN) | (1 << NmodParser.RNOM) | (1 << NmodParser.REXP) | (1 << NmodParser.RGAMMA) | (1 << NmodParser.POINTS) | (1 << NmodParser.LINES) | (1 << NmodParser.TEXT) | (1 << NmodParser.BARPLOT) | (1 << NmodParser.PIECHART) | (1 << NmodParser.XYPLOT) | (1 << NmodParser.DENSITYPLOT) | (1 << NmodParser.HISTOGRAM) | (1 << NmodParser.SIN) | (1 << NmodParser.COS) | (1 << NmodParser.TAN) | (1 << NmodParser.ASIN) | (1 << NmodParser.ACOS) | (1 << NmodParser.ATAN) | (1 << NmodParser.ATAN2) | (1 << NmodParser.LOG) | (1 << NmodParser.LOG10) | (1 << NmodParser.EXPONENT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NmodParser.MAX - 64)) | (1 << (NmodParser.MIN - 64)) | (1 << (NmodParser.RANGE - 64)) | (1 << (NmodParser.SUM - 64)) | (1 << (NmodParser.DIFF - 64)) | (1 << (NmodParser.PROD - 64)) | (1 << (NmodParser.MEAN - 64)) | (1 << (NmodParser.MEDIAN - 64)) | (1 << (NmodParser.QUANTILE - 64)) | (1 << (NmodParser.WEIGHEDMEAN - 64)) | (1 << (NmodParser.RANK - 64)) | (1 << (NmodParser.VARIANCE - 64)) | (1 << (NmodParser.SD - 64)) | (1 << (NmodParser.COR - 64)) | (1 << (NmodParser.COV - 64)) | (1 << (NmodParser.ROUND - 64)) | (1 << (NmodParser.TRANSPOSE - 64)) | (1 << (NmodParser.DIAGONAL - 64)) | (1 << (NmodParser.GINV - 64)) | (1 << (NmodParser.ROWSUM - 64)) | (1 << (NmodParser.COLSUM - 64)) | (1 << (NmodParser.LOAD - 64)) | (1 << (NmodParser.DATA - 64)) | (1 << (NmodParser.LIBRARY - 64)) | (1 << (NmodParser.RPOIS - 64)) | (1 << (NmodParser.RWEIBULL - 64)) | (1 << (NmodParser.RBINOM - 64)) | (1 << (NmodParser.RGEOM - 64)) | (1 << (NmodParser.RUNIF - 64)) | (1 << (NmodParser.CTEI - 64)) | (1 << (NmodParser.CTEF - 64)) | (1 << (NmodParser.CTEC - 64)) | (1 << (NmodParser.ID - 64)))) != 0):
                    self.state = 444
                    self.exp()
                    c.generateActionParameter()
                    self.state = 453
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==NmodParser.COMMA:
                        self.state = 446
                        self.match(NmodParser.COMMA)
                        c.moveParameterPointer()
                        self.state = 448
                        self.exp()
                        c.generateActionParameter()
                        self.state = 455
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 458
                self.match(NmodParser.RPRACKET)
                c.removeFalseBottom()
                c.resetParameterPointer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._AND = None # Token
            self._OR = None # Token

        def sub_exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Sub_expContext)
            else:
                return self.getTypedRuleContext(NmodParser.Sub_expContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.AND)
            else:
                return self.getToken(NmodParser.AND, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.OR)
            else:
                return self.getToken(NmodParser.OR, i)

        def getRuleIndex(self):
            return NmodParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = NmodParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self.sub_exp()
            c.generateQuad(c.localFunc, 'sub_exp')
            self.state = 482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.AND or _la==NmodParser.OR:
                self.state = 469 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 469
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [NmodParser.AND]:
                        self.state = 465
                        localctx._AND = self.match(NmodParser.AND)
                        c.insertStackOperator((None if localctx._AND is None else localctx._AND.text))
                        pass
                    elif token in [NmodParser.OR]:
                        self.state = 467
                        localctx._OR = self.match(NmodParser.OR)
                        c.insertStackOperator((None if localctx._OR is None else localctx._OR.text))
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 471 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==NmodParser.AND or _la==NmodParser.OR):
                        break

                self.state = 474 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 473
                        self.sub_exp()

                    else:
                        raise NoViableAltException(self)
                    self.state = 476 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

                c.generateQuad(c.localFunc, 'sub_exp')
                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sub_expContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._EQUAL = None # Token
            self._GREATEROR = None # Token
            self._GREATERTHAN = None # Token
            self._LESSEROR = None # Token
            self._LESSERTHAN = None # Token

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.EQUAL)
            else:
                return self.getToken(NmodParser.EQUAL, i)

        def GREATEROR(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.GREATEROR)
            else:
                return self.getToken(NmodParser.GREATEROR, i)

        def GREATERTHAN(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.GREATERTHAN)
            else:
                return self.getToken(NmodParser.GREATERTHAN, i)

        def LESSEROR(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.LESSEROR)
            else:
                return self.getToken(NmodParser.LESSEROR, i)

        def LESSERTHAN(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.LESSERTHAN)
            else:
                return self.getToken(NmodParser.LESSERTHAN, i)

        def getRuleIndex(self):
            return NmodParser.RULE_sub_exp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSub_exp" ):
                listener.enterSub_exp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSub_exp" ):
                listener.exitSub_exp(self)




    def sub_exp(self):

        localctx = NmodParser.Sub_expContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_sub_exp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.exp()
            c.generateQuad(c.localFunc, 'exp')
            self.state = 510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NmodParser.GREATERTHAN) | (1 << NmodParser.GREATEROR) | (1 << NmodParser.LESSERTHAN) | (1 << NmodParser.LESSEROR) | (1 << NmodParser.EQUAL))) != 0):
                self.state = 497 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 497
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [NmodParser.EQUAL]:
                        self.state = 487
                        localctx._EQUAL = self.match(NmodParser.EQUAL)
                        c.insertStackOperator((None if localctx._EQUAL is None else localctx._EQUAL.text))
                        pass
                    elif token in [NmodParser.GREATEROR]:
                        self.state = 489
                        localctx._GREATEROR = self.match(NmodParser.GREATEROR)
                        c.insertStackOperator((None if localctx._GREATEROR is None else localctx._GREATEROR.text))
                        pass
                    elif token in [NmodParser.GREATERTHAN]:
                        self.state = 491
                        localctx._GREATERTHAN = self.match(NmodParser.GREATERTHAN)
                        c.insertStackOperator((None if localctx._GREATERTHAN is None else localctx._GREATERTHAN.text))
                        pass
                    elif token in [NmodParser.LESSEROR]:
                        self.state = 493
                        localctx._LESSEROR = self.match(NmodParser.LESSEROR)
                        c.insertStackOperator((None if localctx._LESSEROR is None else localctx._LESSEROR.text))
                        pass
                    elif token in [NmodParser.LESSERTHAN]:
                        self.state = 495
                        localctx._LESSERTHAN = self.match(NmodParser.LESSERTHAN)
                        c.insertStackOperator((None if localctx._LESSERTHAN is None else localctx._LESSERTHAN.text))
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 499 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NmodParser.GREATERTHAN) | (1 << NmodParser.GREATEROR) | (1 << NmodParser.LESSERTHAN) | (1 << NmodParser.LESSEROR) | (1 << NmodParser.EQUAL))) != 0)):
                        break

                self.state = 502 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 501
                        self.exp()

                    else:
                        raise NoViableAltException(self)
                    self.state = 504 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

                c.generateQuad(c.localFunc, 'exp')
                self.state = 512
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._MINUS = None # Token
            self._PLUS = None # Token

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.TermContext)
            else:
                return self.getTypedRuleContext(NmodParser.TermContext,i)


        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.MINUS)
            else:
                return self.getToken(NmodParser.MINUS, i)

        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.PLUS)
            else:
                return self.getToken(NmodParser.PLUS, i)

        def getRuleIndex(self):
            return NmodParser.RULE_exp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp" ):
                listener.enterExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp" ):
                listener.exitExp(self)




    def exp(self):

        localctx = NmodParser.ExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_exp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.term()
            c.generateQuad(c.localFunc, 'term')
            self.state = 532
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 519 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 519
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [NmodParser.MINUS]:
                                self.state = 515
                                localctx._MINUS = self.match(NmodParser.MINUS)
                                c.insertStackOperator((None if localctx._MINUS is None else localctx._MINUS.text))
                                pass
                            elif token in [NmodParser.PLUS]:
                                self.state = 517
                                localctx._PLUS = self.match(NmodParser.PLUS)
                                c.insertStackOperator((None if localctx._PLUS is None else localctx._PLUS.text))
                                pass
                            else:
                                raise NoViableAltException(self)


                        else:
                            raise NoViableAltException(self)
                        self.state = 521 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

                    self.state = 524 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 523
                            self.term()

                        else:
                            raise NoViableAltException(self)
                        self.state = 526 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

                    c.generateQuad(c.localFunc, 'term') 
                self.state = 534
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._DIVISION = None # Token
            self._TIMES = None # Token

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.FactorContext)
            else:
                return self.getTypedRuleContext(NmodParser.FactorContext,i)


        def DIVISION(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.DIVISION)
            else:
                return self.getToken(NmodParser.DIVISION, i)

        def TIMES(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.TIMES)
            else:
                return self.getToken(NmodParser.TIMES, i)

        def getRuleIndex(self):
            return NmodParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = NmodParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 535
            self.factor()
            c.generateQuad(c.localFunc, 'factor')
            self.state = 554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.TIMES or _la==NmodParser.DIVISION:
                self.state = 541 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 541
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [NmodParser.DIVISION]:
                        self.state = 537
                        localctx._DIVISION = self.match(NmodParser.DIVISION)
                        c.insertStackOperator((None if localctx._DIVISION is None else localctx._DIVISION.text))
                        pass
                    elif token in [NmodParser.TIMES]:
                        self.state = 539
                        localctx._TIMES = self.match(NmodParser.TIMES)
                        c.insertStackOperator((None if localctx._TIMES is None else localctx._TIMES.text))
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 543 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==NmodParser.TIMES or _la==NmodParser.DIVISION):
                        break

                self.state = 546 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 545
                        self.factor()

                    else:
                        raise NoViableAltException(self)
                    self.state = 548 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

                c.generateQuad(c.localFunc, 'factor')
                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._var_cte = None # Var_cteContext

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def var_cte(self):
            return self.getTypedRuleContext(NmodParser.Var_cteContext,0)


        def PLUS(self):
            return self.getToken(NmodParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(NmodParser.MINUS, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)




    def factor(self):

        localctx = NmodParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_factor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NmodParser.LPRACKET]:
                self.state = 557
                self.match(NmodParser.LPRACKET)
                c.insertFalseBottom()
                self.state = 559
                self.expression()
                self.state = 560
                self.match(NmodParser.RPRACKET)
                c.removeFalseBottom()
                pass
            elif token in [NmodParser.PLUS, NmodParser.MINUS, NmodParser.RETURN, NmodParser.RNOM, NmodParser.REXP, NmodParser.RGAMMA, NmodParser.POINTS, NmodParser.LINES, NmodParser.TEXT, NmodParser.BARPLOT, NmodParser.PIECHART, NmodParser.XYPLOT, NmodParser.DENSITYPLOT, NmodParser.HISTOGRAM, NmodParser.SIN, NmodParser.COS, NmodParser.TAN, NmodParser.ASIN, NmodParser.ACOS, NmodParser.ATAN, NmodParser.ATAN2, NmodParser.LOG, NmodParser.LOG10, NmodParser.EXPONENT, NmodParser.MAX, NmodParser.MIN, NmodParser.RANGE, NmodParser.SUM, NmodParser.DIFF, NmodParser.PROD, NmodParser.MEAN, NmodParser.MEDIAN, NmodParser.QUANTILE, NmodParser.WEIGHEDMEAN, NmodParser.RANK, NmodParser.VARIANCE, NmodParser.SD, NmodParser.COR, NmodParser.COV, NmodParser.ROUND, NmodParser.TRANSPOSE, NmodParser.DIAGONAL, NmodParser.GINV, NmodParser.ROWSUM, NmodParser.COLSUM, NmodParser.LOAD, NmodParser.DATA, NmodParser.LIBRARY, NmodParser.RPOIS, NmodParser.RWEIBULL, NmodParser.RBINOM, NmodParser.RGEOM, NmodParser.RUNIF, NmodParser.CTEI, NmodParser.CTEF, NmodParser.CTEC, NmodParser.ID]:
                self.state = 564
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NmodParser.PLUS or _la==NmodParser.MINUS:
                    self.state = 563
                    _la = self._input.LA(1)
                    if not(_la==NmodParser.PLUS or _la==NmodParser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 566
                localctx._var_cte = self.var_cte()
                c.insertStackOperand((None if localctx._var_cte is None else self._input.getText((localctx._var_cte.start,localctx._var_cte.stop))))
                c.insertStackType(localctx._var_cte.type)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Var_cteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self.val = None
            self._id_access = None # Id_accessContext
            self._CTEI = None # Token
            self._CTEF = None # Token
            self._CTEC = None # Token
            self._call_module = None # Call_moduleContext

        def id_access(self):
            return self.getTypedRuleContext(NmodParser.Id_accessContext,0)


        def CTEI(self):
            return self.getToken(NmodParser.CTEI, 0)

        def CTEF(self):
            return self.getToken(NmodParser.CTEF, 0)

        def CTEC(self):
            return self.getToken(NmodParser.CTEC, 0)

        def call_module(self):
            return self.getTypedRuleContext(NmodParser.Call_moduleContext,0)


        def getRuleIndex(self):
            return NmodParser.RULE_var_cte

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_cte" ):
                listener.enterVar_cte(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_cte" ):
                listener.exitVar_cte(self)




    def var_cte(self):

        localctx = NmodParser.Var_cteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_var_cte)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 572
                localctx._id_access = self.id_access()
                localctx.type = c.getVarType(c.localFunc, (None if localctx._id_access is None else self._input.getText((localctx._id_access.start,localctx._id_access.stop))))
                localctx.val = c.getVarVal(c.localFunc, (None if localctx._id_access is None else self._input.getText((localctx._id_access.start,localctx._id_access.stop))))
                pass

            elif la_ == 2:
                self.state = 576
                localctx._CTEI = self.match(NmodParser.CTEI)
                localctx.type = 'int'
                localctx.val = c.insertConstant(localctx.type, (None if localctx._CTEI is None else localctx._CTEI.text))
                pass

            elif la_ == 3:
                self.state = 579
                localctx._CTEF = self.match(NmodParser.CTEF)
                localctx.type = 'float'
                localctx.val = c.insertConstant(localctx.type, (None if localctx._CTEF is None else localctx._CTEF.text))
                pass

            elif la_ == 4:
                self.state = 582
                localctx._CTEC = self.match(NmodParser.CTEC)
                localctx.type = 'char'
                localctx.val = c.insertConstant(localctx.type, (None if localctx._CTEC is None else localctx._CTEC.text))
                pass

            elif la_ == 5:
                self.state = 585
                localctx._call_module = self.call_module()
                localctx.type = localctx._call_module.type
                localctx.val = localctx._call_module.val
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class R_returnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(NmodParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_r_return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterR_return" ):
                listener.enterR_return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitR_return" ):
                listener.exitR_return(self)




    def r_return(self):

        localctx = NmodParser.R_returnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_r_return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 591
            self.match(NmodParser.RETURN)
            self.state = 592
            self.expression()
            self.state = 593
            self.match(NmodParser.SEMICOLON)
            c.generateCommonQuad('return')
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RnomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RNOM(self):
            return self.getToken(NmodParser.RNOM, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_rnom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRnom" ):
                listener.enterRnom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRnom" ):
                listener.exitRnom(self)




    def rnom(self):

        localctx = NmodParser.RnomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_rnom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self.match(NmodParser.RNOM)
            self.state = 597
            self.match(NmodParser.LPRACKET)
            self.state = 598
            self.var_cte()
            self.state = 599
            self.match(NmodParser.COMMA)
            self.state = 600
            self.var_cte()
            self.state = 601
            self.match(NmodParser.COMMA)
            self.state = 602
            self.var_cte()
            self.state = 603
            self.match(NmodParser.COMMA)
            self.state = 604
            self.var_cte()
            self.state = 605
            self.match(NmodParser.RPRACKET)
            self.state = 606
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RexpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REXP(self):
            return self.getToken(NmodParser.REXP, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self):
            return self.getToken(NmodParser.COMMA, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_rexp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRexp" ):
                listener.enterRexp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRexp" ):
                listener.exitRexp(self)




    def rexp(self):

        localctx = NmodParser.RexpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_rexp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(NmodParser.REXP)
            self.state = 609
            self.match(NmodParser.LPRACKET)
            self.state = 610
            self.var_cte()
            self.state = 611
            self.match(NmodParser.COMMA)
            self.state = 612
            self.var_cte()
            self.state = 613
            self.match(NmodParser.RPRACKET)
            self.state = 614
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RgammaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RGAMMA(self):
            return self.getToken(NmodParser.RGAMMA, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_rgamma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRgamma" ):
                listener.enterRgamma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRgamma" ):
                listener.exitRgamma(self)




    def rgamma(self):

        localctx = NmodParser.RgammaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_rgamma)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self.match(NmodParser.RGAMMA)
            self.state = 617
            self.match(NmodParser.LPRACKET)
            self.state = 618
            self.var_cte()
            self.state = 619
            self.match(NmodParser.COMMA)
            self.state = 620
            self.var_cte()
            self.state = 621
            self.match(NmodParser.COMMA)
            self.state = 622
            self.var_cte()
            self.state = 623
            self.match(NmodParser.RPRACKET)
            self.state = 624
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PointsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POINTS(self):
            return self.getToken(NmodParser.POINTS, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self):
            return self.getToken(NmodParser.COMMA, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_points

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPoints" ):
                listener.enterPoints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPoints" ):
                listener.exitPoints(self)




    def points(self):

        localctx = NmodParser.PointsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_points)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self.match(NmodParser.POINTS)
            self.state = 627
            self.match(NmodParser.LPRACKET)
            self.state = 628
            self.var_cte()
            self.state = 629
            self.match(NmodParser.COMMA)
            self.state = 630
            self.var_cte()
            self.state = 631
            self.match(NmodParser.RPRACKET)
            self.state = 632
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LinesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINES(self):
            return self.getToken(NmodParser.LINES, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self):
            return self.getToken(NmodParser.COMMA, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_lines

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLines" ):
                listener.enterLines(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLines" ):
                listener.exitLines(self)




    def lines(self):

        localctx = NmodParser.LinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_lines)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            self.match(NmodParser.LINES)
            self.state = 635
            self.match(NmodParser.LPRACKET)
            self.state = 636
            self.var_cte()
            self.state = 637
            self.match(NmodParser.COMMA)
            self.state = 638
            self.var_cte()
            self.state = 639
            self.match(NmodParser.RPRACKET)
            self.state = 640
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TextContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TEXT(self):
            return self.getToken(NmodParser.TEXT, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def CTEI(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.CTEI)
            else:
                return self.getToken(NmodParser.CTEI, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def id_decl(self):
            return self.getTypedRuleContext(NmodParser.Id_declContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_text

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterText" ):
                listener.enterText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitText" ):
                listener.exitText(self)




    def text(self):

        localctx = NmodParser.TextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_text)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self.match(NmodParser.TEXT)
            self.state = 643
            self.match(NmodParser.LPRACKET)
            self.state = 644
            self.match(NmodParser.CTEI)
            self.state = 645
            self.match(NmodParser.COMMA)
            self.state = 646
            self.match(NmodParser.CTEI)
            self.state = 647
            self.match(NmodParser.COMMA)
            self.state = 648
            self.id_decl()
            self.state = 649
            self.match(NmodParser.RPRACKET)
            self.state = 650
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BarplotContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BARPLOT(self):
            return self.getToken(NmodParser.BARPLOT, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_barplot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBarplot" ):
                listener.enterBarplot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBarplot" ):
                listener.exitBarplot(self)




    def barplot(self):

        localctx = NmodParser.BarplotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_barplot)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self.match(NmodParser.BARPLOT)
            self.state = 653
            self.match(NmodParser.LPRACKET)
            self.state = 654
            self.var_cte()
            self.state = 655
            self.match(NmodParser.COMMA)
            self.state = 656
            self.var_cte()
            self.state = 657
            self.match(NmodParser.COMMA)
            self.state = 658
            self.var_cte()
            self.state = 659
            self.match(NmodParser.COMMA)
            self.state = 660
            self.var_cte()
            self.state = 661
            self.match(NmodParser.RPRACKET)
            self.state = 662
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PiechartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PIECHART(self):
            return self.getToken(NmodParser.PIECHART, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_piechart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPiechart" ):
                listener.enterPiechart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPiechart" ):
                listener.exitPiechart(self)




    def piechart(self):

        localctx = NmodParser.PiechartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_piechart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 664
            self.match(NmodParser.PIECHART)
            self.state = 665
            self.match(NmodParser.LPRACKET)
            self.state = 666
            self.var_cte()
            self.state = 667
            self.match(NmodParser.COMMA)
            self.state = 668
            self.var_cte()
            self.state = 669
            self.match(NmodParser.COMMA)
            self.state = 670
            self.var_cte()
            self.state = 671
            self.match(NmodParser.COMMA)
            self.state = 672
            self.var_cte()
            self.state = 673
            self.match(NmodParser.RPRACKET)
            self.state = 674
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class XyplotContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XYPLOT(self):
            return self.getToken(NmodParser.XYPLOT, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_xyplot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXyplot" ):
                listener.enterXyplot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXyplot" ):
                listener.exitXyplot(self)




    def xyplot(self):

        localctx = NmodParser.XyplotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_xyplot)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            self.match(NmodParser.XYPLOT)
            self.state = 677
            self.match(NmodParser.LPRACKET)
            self.state = 678
            self.var_cte()
            self.state = 679
            self.match(NmodParser.COMMA)
            self.state = 680
            self.var_cte()
            self.state = 681
            self.match(NmodParser.COMMA)
            self.state = 682
            self.var_cte()
            self.state = 683
            self.match(NmodParser.COMMA)
            self.state = 684
            self.var_cte()
            self.state = 685
            self.match(NmodParser.RPRACKET)
            self.state = 686
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DensityplotContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DENSITYPLOT(self):
            return self.getToken(NmodParser.DENSITYPLOT, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_densityplot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDensityplot" ):
                listener.enterDensityplot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDensityplot" ):
                listener.exitDensityplot(self)




    def densityplot(self):

        localctx = NmodParser.DensityplotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_densityplot)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self.match(NmodParser.DENSITYPLOT)
            self.state = 689
            self.match(NmodParser.LPRACKET)
            self.state = 690
            self.var_cte()
            self.state = 691
            self.match(NmodParser.COMMA)
            self.state = 692
            self.var_cte()
            self.state = 693
            self.match(NmodParser.COMMA)
            self.state = 694
            self.var_cte()
            self.state = 695
            self.match(NmodParser.COMMA)
            self.state = 696
            self.var_cte()
            self.state = 697
            self.match(NmodParser.RPRACKET)
            self.state = 698
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HistogramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HISTOGRAM(self):
            return self.getToken(NmodParser.HISTOGRAM, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_histogram

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHistogram" ):
                listener.enterHistogram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHistogram" ):
                listener.exitHistogram(self)




    def histogram(self):

        localctx = NmodParser.HistogramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_histogram)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self.match(NmodParser.HISTOGRAM)
            self.state = 701
            self.match(NmodParser.LPRACKET)
            self.state = 702
            self.var_cte()
            self.state = 703
            self.match(NmodParser.COMMA)
            self.state = 704
            self.var_cte()
            self.state = 705
            self.match(NmodParser.COMMA)
            self.state = 706
            self.var_cte()
            self.state = 707
            self.match(NmodParser.COMMA)
            self.state = 708
            self.var_cte()
            self.state = 709
            self.match(NmodParser.RPRACKET)
            self.state = 710
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SinContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIN(self):
            return self.getToken(NmodParser.SIN, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_sin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSin" ):
                listener.enterSin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSin" ):
                listener.exitSin(self)




    def sin(self):

        localctx = NmodParser.SinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_sin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self.match(NmodParser.SIN)
            self.state = 713
            self.match(NmodParser.LPRACKET)
            self.state = 714
            self.expression()
            self.state = 715
            self.match(NmodParser.RPRACKET)
            self.state = 716
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CosContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COS(self):
            return self.getToken(NmodParser.COS, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_cos

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCos" ):
                listener.enterCos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCos" ):
                listener.exitCos(self)




    def cos(self):

        localctx = NmodParser.CosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_cos)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self.match(NmodParser.COS)
            self.state = 719
            self.match(NmodParser.LPRACKET)
            self.state = 720
            self.expression()
            self.state = 721
            self.match(NmodParser.RPRACKET)
            self.state = 722
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TanContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAN(self):
            return self.getToken(NmodParser.TAN, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_tan

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTan" ):
                listener.enterTan(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTan" ):
                listener.exitTan(self)




    def tan(self):

        localctx = NmodParser.TanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_tan)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.match(NmodParser.TAN)
            self.state = 725
            self.match(NmodParser.LPRACKET)
            self.state = 726
            self.expression()
            self.state = 727
            self.match(NmodParser.RPRACKET)
            self.state = 728
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AsinContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASIN(self):
            return self.getToken(NmodParser.ASIN, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_asin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsin" ):
                listener.enterAsin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsin" ):
                listener.exitAsin(self)




    def asin(self):

        localctx = NmodParser.AsinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_asin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self.match(NmodParser.ASIN)
            self.state = 731
            self.match(NmodParser.LPRACKET)
            self.state = 732
            self.expression()
            self.state = 733
            self.match(NmodParser.RPRACKET)
            self.state = 734
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AcosContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACOS(self):
            return self.getToken(NmodParser.ACOS, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_acos

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAcos" ):
                listener.enterAcos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAcos" ):
                listener.exitAcos(self)




    def acos(self):

        localctx = NmodParser.AcosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_acos)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 736
            self.match(NmodParser.ACOS)
            self.state = 737
            self.match(NmodParser.LPRACKET)
            self.state = 738
            self.expression()
            self.state = 739
            self.match(NmodParser.RPRACKET)
            self.state = 740
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtanContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATAN(self):
            return self.getToken(NmodParser.ATAN, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_atan

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtan" ):
                listener.enterAtan(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtan" ):
                listener.exitAtan(self)




    def atan(self):

        localctx = NmodParser.AtanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_atan)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.match(NmodParser.ATAN)
            self.state = 743
            self.match(NmodParser.LPRACKET)
            self.state = 744
            self.expression()
            self.state = 745
            self.match(NmodParser.RPRACKET)
            self.state = 746
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Atan2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATAN2(self):
            return self.getToken(NmodParser.ATAN2, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_atan2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtan2" ):
                listener.enterAtan2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtan2" ):
                listener.exitAtan2(self)




    def atan2(self):

        localctx = NmodParser.Atan2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_atan2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self.match(NmodParser.ATAN2)
            self.state = 749
            self.match(NmodParser.LPRACKET)
            self.state = 750
            self.expression()
            self.state = 751
            self.match(NmodParser.RPRACKET)
            self.state = 752
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LogContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG(self):
            return self.getToken(NmodParser.LOG, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_log

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLog" ):
                listener.enterLog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLog" ):
                listener.exitLog(self)




    def log(self):

        localctx = NmodParser.LogContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_log)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self.match(NmodParser.LOG)
            self.state = 755
            self.match(NmodParser.LPRACKET)
            self.state = 756
            self.expression()
            self.state = 757
            self.match(NmodParser.RPRACKET)
            self.state = 758
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Log10Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG10(self):
            return self.getToken(NmodParser.LOG10, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_log10

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLog10" ):
                listener.enterLog10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLog10" ):
                listener.exitLog10(self)




    def log10(self):

        localctx = NmodParser.Log10Context(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_log10)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.match(NmodParser.LOG10)
            self.state = 761
            self.match(NmodParser.LPRACKET)
            self.state = 762
            self.expression()
            self.state = 763
            self.match(NmodParser.RPRACKET)
            self.state = 764
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExponentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPONENT(self):
            return self.getToken(NmodParser.EXPONENT, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_exponent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExponent" ):
                listener.enterExponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExponent" ):
                listener.exitExponent(self)




    def exponent(self):

        localctx = NmodParser.ExponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_exponent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self.match(NmodParser.EXPONENT)
            self.state = 767
            self.match(NmodParser.LPRACKET)
            self.state = 768
            self.expression()
            self.state = 769
            self.match(NmodParser.RPRACKET)
            self.state = 770
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class F_maxContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAX(self):
            return self.getToken(NmodParser.MAX, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpressionContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_f_max

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterF_max" ):
                listener.enterF_max(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitF_max" ):
                listener.exitF_max(self)




    def f_max(self):

        localctx = NmodParser.F_maxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_f_max)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.match(NmodParser.MAX)
            self.state = 773
            self.match(NmodParser.LPRACKET)
            self.state = 774
            self.expression()
            self.state = 779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 775
                self.match(NmodParser.COMMA)
                self.state = 776
                self.expression()
                self.state = 781
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 782
            self.match(NmodParser.RPRACKET)
            self.state = 783
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class F_minContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MIN(self):
            return self.getToken(NmodParser.MIN, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpressionContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_f_min

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterF_min" ):
                listener.enterF_min(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitF_min" ):
                listener.exitF_min(self)




    def f_min(self):

        localctx = NmodParser.F_minContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_f_min)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self.match(NmodParser.MIN)
            self.state = 786
            self.match(NmodParser.LPRACKET)
            self.state = 787
            self.expression()
            self.state = 792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 788
                self.match(NmodParser.COMMA)
                self.state = 789
                self.expression()
                self.state = 794
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 795
            self.match(NmodParser.RPRACKET)
            self.state = 796
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class F_rangeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANGE(self):
            return self.getToken(NmodParser.RANGE, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpressionContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_f_range

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterF_range" ):
                listener.enterF_range(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitF_range" ):
                listener.exitF_range(self)




    def f_range(self):

        localctx = NmodParser.F_rangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_f_range)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(NmodParser.RANGE)
            self.state = 799
            self.match(NmodParser.LPRACKET)
            self.state = 800
            self.expression()
            self.state = 805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 801
                self.match(NmodParser.COMMA)
                self.state = 802
                self.expression()
                self.state = 807
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 808
            self.match(NmodParser.RPRACKET)
            self.state = 809
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class F_sumContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUM(self):
            return self.getToken(NmodParser.SUM, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpressionContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_f_sum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterF_sum" ):
                listener.enterF_sum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitF_sum" ):
                listener.exitF_sum(self)




    def f_sum(self):

        localctx = NmodParser.F_sumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_f_sum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811
            self.match(NmodParser.SUM)
            self.state = 812
            self.match(NmodParser.LPRACKET)
            self.state = 813
            self.expression()
            self.state = 818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 814
                self.match(NmodParser.COMMA)
                self.state = 815
                self.expression()
                self.state = 820
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 821
            self.match(NmodParser.RPRACKET)
            self.state = 822
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DiffContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIFF(self):
            return self.getToken(NmodParser.DIFF, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def id_decl(self):
            return self.getTypedRuleContext(NmodParser.Id_declContext,0)


        def COMMA(self):
            return self.getToken(NmodParser.COMMA, 0)

        def CTEI(self):
            return self.getToken(NmodParser.CTEI, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_diff

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiff" ):
                listener.enterDiff(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiff" ):
                listener.exitDiff(self)




    def diff(self):

        localctx = NmodParser.DiffContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_diff)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.match(NmodParser.DIFF)
            self.state = 825
            self.match(NmodParser.LPRACKET)
            self.state = 826
            self.id_decl()
            self.state = 827
            self.match(NmodParser.COMMA)
            self.state = 828
            self.match(NmodParser.CTEI)
            self.state = 829
            self.match(NmodParser.RPRACKET)
            self.state = 830
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROD(self):
            return self.getToken(NmodParser.PROD, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpressionContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_prod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProd" ):
                listener.enterProd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProd" ):
                listener.exitProd(self)




    def prod(self):

        localctx = NmodParser.ProdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_prod)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self.match(NmodParser.PROD)
            self.state = 833
            self.match(NmodParser.LPRACKET)
            self.state = 834
            self.expression()
            self.state = 839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 835
                self.match(NmodParser.COMMA)
                self.state = 836
                self.expression()
                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 842
            self.match(NmodParser.RPRACKET)
            self.state = 843
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MeanContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEAN(self):
            return self.getToken(NmodParser.MEAN, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def id_decl(self):
            return self.getTypedRuleContext(NmodParser.Id_declContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_mean

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMean" ):
                listener.enterMean(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMean" ):
                listener.exitMean(self)




    def mean(self):

        localctx = NmodParser.MeanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_mean)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.match(NmodParser.MEAN)
            self.state = 846
            self.match(NmodParser.LPRACKET)
            self.state = 847
            self.id_decl()
            self.state = 848
            self.match(NmodParser.RPRACKET)
            self.state = 849
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MedianContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEDIAN(self):
            return self.getToken(NmodParser.MEDIAN, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def id_decl(self):
            return self.getTypedRuleContext(NmodParser.Id_declContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_median

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMedian" ):
                listener.enterMedian(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMedian" ):
                listener.exitMedian(self)




    def median(self):

        localctx = NmodParser.MedianContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_median)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.match(NmodParser.MEDIAN)
            self.state = 852
            self.match(NmodParser.LPRACKET)
            self.state = 853
            self.id_decl()
            self.state = 854
            self.match(NmodParser.RPRACKET)
            self.state = 855
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantileContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUANTILE(self):
            return self.getToken(NmodParser.QUANTILE, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpressionContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_quantile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantile" ):
                listener.enterQuantile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantile" ):
                listener.exitQuantile(self)




    def quantile(self):

        localctx = NmodParser.QuantileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_quantile)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.match(NmodParser.QUANTILE)
            self.state = 858
            self.match(NmodParser.LPRACKET)
            self.state = 859
            self.expression()
            self.state = 864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 860
                self.match(NmodParser.COMMA)
                self.state = 861
                self.expression()
                self.state = 866
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 867
            self.match(NmodParser.RPRACKET)
            self.state = 868
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WeighedmeanContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WEIGHEDMEAN(self):
            return self.getToken(NmodParser.WEIGHEDMEAN, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpressionContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_weighedmean

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeighedmean" ):
                listener.enterWeighedmean(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeighedmean" ):
                listener.exitWeighedmean(self)




    def weighedmean(self):

        localctx = NmodParser.WeighedmeanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_weighedmean)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            self.match(NmodParser.WEIGHEDMEAN)
            self.state = 871
            self.match(NmodParser.LPRACKET)
            self.state = 872
            self.expression()
            self.state = 877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 873
                self.match(NmodParser.COMMA)
                self.state = 874
                self.expression()
                self.state = 879
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 880
            self.match(NmodParser.RPRACKET)
            self.state = 881
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RankContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANK(self):
            return self.getToken(NmodParser.RANK, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def id_decl(self):
            return self.getTypedRuleContext(NmodParser.Id_declContext,0)


        def COMMA(self):
            return self.getToken(NmodParser.COMMA, 0)

        def ZERO(self):
            return self.getToken(NmodParser.ZERO, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def ONE(self):
            return self.getToken(NmodParser.ONE, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_rank

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRank" ):
                listener.enterRank(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRank" ):
                listener.exitRank(self)




    def rank(self):

        localctx = NmodParser.RankContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_rank)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 883
                self.match(NmodParser.RANK)
                self.state = 884
                self.match(NmodParser.LPRACKET)
                self.state = 885
                self.id_decl()
                self.state = 886
                self.match(NmodParser.COMMA)
                self.state = 887
                self.match(NmodParser.ZERO)
                self.state = 888
                self.match(NmodParser.RPRACKET)
                self.state = 889
                self.match(NmodParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.state = 891
                self.match(NmodParser.RANK)
                self.state = 892
                self.match(NmodParser.LPRACKET)
                self.state = 893
                self.id_decl()
                self.state = 894
                self.match(NmodParser.COMMA)
                self.state = 895
                self.match(NmodParser.ONE)
                self.state = 896
                self.match(NmodParser.RPRACKET)
                self.state = 897
                self.match(NmodParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIANCE(self):
            return self.getToken(NmodParser.VARIANCE, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self):
            return self.getToken(NmodParser.COMMA, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_var

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar" ):
                listener.enterVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar" ):
                listener.exitVar(self)




    def var(self):

        localctx = NmodParser.VarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_var)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 901
            self.match(NmodParser.VARIANCE)
            self.state = 902
            self.match(NmodParser.LPRACKET)
            self.state = 903
            self.var_cte()
            self.state = 904
            self.match(NmodParser.COMMA)
            self.state = 905
            self.var_cte()
            self.state = 906
            self.match(NmodParser.RPRACKET)
            self.state = 907
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SD(self):
            return self.getToken(NmodParser.SD, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self):
            return self.getTypedRuleContext(NmodParser.Var_cteContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_sd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSd" ):
                listener.enterSd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSd" ):
                listener.exitSd(self)




    def sd(self):

        localctx = NmodParser.SdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_sd)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            self.match(NmodParser.SD)
            self.state = 910
            self.match(NmodParser.LPRACKET)
            self.state = 911
            self.var_cte()
            self.state = 912
            self.match(NmodParser.RPRACKET)
            self.state = 913
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COR(self):
            return self.getToken(NmodParser.COR, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def PEARSON(self):
            return self.getToken(NmodParser.PEARSON, 0)

        def KENDALL(self):
            return self.getToken(NmodParser.KENDALL, 0)

        def SPEARMAN(self):
            return self.getToken(NmodParser.SPEARMAN, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_cor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCor" ):
                listener.enterCor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCor" ):
                listener.exitCor(self)




    def cor(self):

        localctx = NmodParser.CorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_cor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self.match(NmodParser.COR)
            self.state = 916
            self.match(NmodParser.LPRACKET)
            self.state = 917
            self.var_cte()
            self.state = 918
            self.match(NmodParser.COMMA)
            self.state = 919
            self.var_cte()
            self.state = 920
            self.match(NmodParser.COMMA)
            self.state = 921
            _la = self._input.LA(1)
            if not(((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (NmodParser.PEARSON - 93)) | (1 << (NmodParser.KENDALL - 93)) | (1 << (NmodParser.SPEARMAN - 93)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 922
            self.match(NmodParser.RPRACKET)
            self.state = 923
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CovContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COV(self):
            return self.getToken(NmodParser.COV, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self):
            return self.getTypedRuleContext(NmodParser.Var_cteContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_cov

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCov" ):
                listener.enterCov(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCov" ):
                listener.exitCov(self)




    def cov(self):

        localctx = NmodParser.CovContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_cov)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            self.match(NmodParser.COV)
            self.state = 926
            self.match(NmodParser.LPRACKET)
            self.state = 927
            self.var_cte()
            self.state = 928
            self.match(NmodParser.RPRACKET)
            self.state = 929
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class F_roundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROUND(self):
            return self.getToken(NmodParser.ROUND, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_f_round

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterF_round" ):
                listener.enterF_round(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitF_round" ):
                listener.exitF_round(self)




    def f_round(self):

        localctx = NmodParser.F_roundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_f_round)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            self.match(NmodParser.ROUND)
            self.state = 932
            self.match(NmodParser.LPRACKET)
            self.state = 933
            self.var_cte()
            self.state = 938
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 934
                self.match(NmodParser.COMMA)
                self.state = 935
                self.var_cte()
                self.state = 940
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 941
            self.match(NmodParser.RPRACKET)
            self.state = 942
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TransposeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRANSPOSE(self):
            return self.getToken(NmodParser.TRANSPOSE, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self):
            return self.getTypedRuleContext(NmodParser.Var_cteContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_transpose

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranspose" ):
                listener.enterTranspose(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranspose" ):
                listener.exitTranspose(self)




    def transpose(self):

        localctx = NmodParser.TransposeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_transpose)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self.match(NmodParser.TRANSPOSE)
            self.state = 945
            self.match(NmodParser.LPRACKET)
            self.state = 946
            self.var_cte()
            self.state = 947
            self.match(NmodParser.RPRACKET)
            self.state = 948
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DiagonalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIAGONAL(self):
            return self.getToken(NmodParser.DIAGONAL, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self):
            return self.getTypedRuleContext(NmodParser.Var_cteContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_diagonal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiagonal" ):
                listener.enterDiagonal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiagonal" ):
                listener.exitDiagonal(self)




    def diagonal(self):

        localctx = NmodParser.DiagonalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_diagonal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self.match(NmodParser.DIAGONAL)
            self.state = 951
            self.match(NmodParser.LPRACKET)
            self.state = 952
            self.var_cte()
            self.state = 953
            self.match(NmodParser.RPRACKET)
            self.state = 954
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GinvContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GINV(self):
            return self.getToken(NmodParser.GINV, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self):
            return self.getTypedRuleContext(NmodParser.Var_cteContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_ginv

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGinv" ):
                listener.enterGinv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGinv" ):
                listener.exitGinv(self)




    def ginv(self):

        localctx = NmodParser.GinvContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_ginv)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 956
            self.match(NmodParser.GINV)
            self.state = 957
            self.match(NmodParser.LPRACKET)
            self.state = 958
            self.var_cte()
            self.state = 959
            self.match(NmodParser.RPRACKET)
            self.state = 960
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RowsumContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROWSUM(self):
            return self.getToken(NmodParser.ROWSUM, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self):
            return self.getTypedRuleContext(NmodParser.Var_cteContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_rowsum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowsum" ):
                listener.enterRowsum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowsum" ):
                listener.exitRowsum(self)




    def rowsum(self):

        localctx = NmodParser.RowsumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_rowsum)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self.match(NmodParser.ROWSUM)
            self.state = 963
            self.match(NmodParser.LPRACKET)
            self.state = 964
            self.var_cte()
            self.state = 965
            self.match(NmodParser.RPRACKET)
            self.state = 966
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColsumContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLSUM(self):
            return self.getToken(NmodParser.COLSUM, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self):
            return self.getTypedRuleContext(NmodParser.Var_cteContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_colsum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColsum" ):
                listener.enterColsum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColsum" ):
                listener.exitColsum(self)




    def colsum(self):

        localctx = NmodParser.ColsumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_colsum)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968
            self.match(NmodParser.COLSUM)
            self.state = 969
            self.match(NmodParser.LPRACKET)
            self.state = 970
            self.var_cte()
            self.state = 971
            self.match(NmodParser.RPRACKET)
            self.state = 972
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LoadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD(self):
            return self.getToken(NmodParser.LOAD, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_load

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoad" ):
                listener.enterLoad(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoad" ):
                listener.exitLoad(self)




    def load(self):

        localctx = NmodParser.LoadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_load)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self.match(NmodParser.LOAD)
            self.state = 975
            self.match(NmodParser.LPRACKET)
            self.state = 976
            self.var_cte()
            self.state = 981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 977
                self.match(NmodParser.COMMA)
                self.state = 978
                self.var_cte()
                self.state = 983
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 984
            self.match(NmodParser.RPRACKET)
            self.state = 985
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATA(self):
            return self.getToken(NmodParser.DATA, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpressionContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_data

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData" ):
                listener.enterData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData" ):
                listener.exitData(self)




    def data(self):

        localctx = NmodParser.DataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_data)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 987
            self.match(NmodParser.DATA)
            self.state = 988
            self.match(NmodParser.LPRACKET)
            self.state = 989
            self.expression()
            self.state = 994
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 990
                self.match(NmodParser.COMMA)
                self.state = 991
                self.expression()
                self.state = 996
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 997
            self.match(NmodParser.RPRACKET)
            self.state = 998
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LibraryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIBRARY(self):
            return self.getToken(NmodParser.LIBRARY, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def STRING(self):
            return self.getToken(NmodParser.STRING, 0)

        def var_cte(self):
            return self.getTypedRuleContext(NmodParser.Var_cteContext,0)


        def getRuleIndex(self):
            return NmodParser.RULE_library

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibrary" ):
                listener.enterLibrary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibrary" ):
                listener.exitLibrary(self)




    def library(self):

        localctx = NmodParser.LibraryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_library)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            self.match(NmodParser.LIBRARY)
            self.state = 1001
            self.match(NmodParser.LPRACKET)
            self.state = 1004
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NmodParser.STRING]:
                self.state = 1002
                self.match(NmodParser.STRING)
                pass
            elif token in [NmodParser.RETURN, NmodParser.RNOM, NmodParser.REXP, NmodParser.RGAMMA, NmodParser.POINTS, NmodParser.LINES, NmodParser.TEXT, NmodParser.BARPLOT, NmodParser.PIECHART, NmodParser.XYPLOT, NmodParser.DENSITYPLOT, NmodParser.HISTOGRAM, NmodParser.SIN, NmodParser.COS, NmodParser.TAN, NmodParser.ASIN, NmodParser.ACOS, NmodParser.ATAN, NmodParser.ATAN2, NmodParser.LOG, NmodParser.LOG10, NmodParser.EXPONENT, NmodParser.MAX, NmodParser.MIN, NmodParser.RANGE, NmodParser.SUM, NmodParser.DIFF, NmodParser.PROD, NmodParser.MEAN, NmodParser.MEDIAN, NmodParser.QUANTILE, NmodParser.WEIGHEDMEAN, NmodParser.RANK, NmodParser.VARIANCE, NmodParser.SD, NmodParser.COR, NmodParser.COV, NmodParser.ROUND, NmodParser.TRANSPOSE, NmodParser.DIAGONAL, NmodParser.GINV, NmodParser.ROWSUM, NmodParser.COLSUM, NmodParser.LOAD, NmodParser.DATA, NmodParser.LIBRARY, NmodParser.RPOIS, NmodParser.RWEIBULL, NmodParser.RBINOM, NmodParser.RGEOM, NmodParser.RUNIF, NmodParser.CTEI, NmodParser.CTEF, NmodParser.CTEC, NmodParser.ID]:
                self.state = 1003
                self.var_cte()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1006
            self.match(NmodParser.RPRACKET)
            self.state = 1007
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RpoisContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RPOIS(self):
            return self.getToken(NmodParser.RPOIS, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_rpois

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRpois" ):
                listener.enterRpois(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRpois" ):
                listener.exitRpois(self)




    def rpois(self):

        localctx = NmodParser.RpoisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_rpois)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            self.match(NmodParser.RPOIS)
            self.state = 1010
            self.match(NmodParser.LPRACKET)
            self.state = 1011
            self.var_cte()
            self.state = 1012
            self.match(NmodParser.COMMA)
            self.state = 1013
            self.var_cte()
            self.state = 1014
            self.match(NmodParser.COMMA)
            self.state = 1015
            self.var_cte()
            self.state = 1016
            self.match(NmodParser.RPRACKET)
            self.state = 1017
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RweibullContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RWEIBULL(self):
            return self.getToken(NmodParser.RWEIBULL, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self):
            return self.getTypedRuleContext(NmodParser.Var_cteContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_rweibull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRweibull" ):
                listener.enterRweibull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRweibull" ):
                listener.exitRweibull(self)




    def rweibull(self):

        localctx = NmodParser.RweibullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_rweibull)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1019
            self.match(NmodParser.RWEIBULL)
            self.state = 1020
            self.match(NmodParser.LPRACKET)
            self.state = 1021
            self.var_cte()
            self.state = 1022
            self.match(NmodParser.RPRACKET)
            self.state = 1023
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RbinomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RBINOM(self):
            return self.getToken(NmodParser.RBINOM, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_rbinom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRbinom" ):
                listener.enterRbinom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRbinom" ):
                listener.exitRbinom(self)




    def rbinom(self):

        localctx = NmodParser.RbinomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_rbinom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self.match(NmodParser.RBINOM)
            self.state = 1026
            self.match(NmodParser.LPRACKET)
            self.state = 1027
            self.var_cte()
            self.state = 1028
            self.match(NmodParser.COMMA)
            self.state = 1029
            self.var_cte()
            self.state = 1030
            self.match(NmodParser.COMMA)
            self.state = 1031
            self.var_cte()
            self.state = 1032
            self.match(NmodParser.RPRACKET)
            self.state = 1033
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RgeomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RGEOM(self):
            return self.getToken(NmodParser.RGEOM, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self):
            return self.getToken(NmodParser.COMMA, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_rgeom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRgeom" ):
                listener.enterRgeom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRgeom" ):
                listener.exitRgeom(self)




    def rgeom(self):

        localctx = NmodParser.RgeomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_rgeom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1035
            self.match(NmodParser.RGEOM)
            self.state = 1036
            self.match(NmodParser.LPRACKET)
            self.state = 1037
            self.var_cte()
            self.state = 1038
            self.match(NmodParser.COMMA)
            self.state = 1039
            self.var_cte()
            self.state = 1040
            self.match(NmodParser.RPRACKET)
            self.state = 1041
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RunifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RUNIF(self):
            return self.getToken(NmodParser.RUNIF, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self):
            return self.getToken(NmodParser.COMMA, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_runif

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRunif" ):
                listener.enterRunif(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRunif" ):
                listener.exitRunif(self)




    def runif(self):

        localctx = NmodParser.RunifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_runif)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1043
            self.match(NmodParser.RUNIF)
            self.state = 1044
            self.match(NmodParser.LPRACKET)
            self.state = 1045
            self.var_cte()
            self.state = 1046
            self.match(NmodParser.COMMA)
            self.state = 1047
            self.var_cte()
            self.state = 1048
            self.match(NmodParser.RPRACKET)
            self.state = 1049
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DotchartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NmodParser.RULE_dotchart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotchart" ):
                listener.enterDotchart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotchart" ):
                listener.exitDotchart(self)




    def dotchart(self):

        localctx = NmodParser.DotchartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_dotchart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self.match(NmodParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





