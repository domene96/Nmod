# Generated from Nmod.g4 by ANTLR 4.7
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


from Compiler import *
# from VirtualMachine import *
c = Compiler()
# vm = VirtualMachine()

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3k")
        buf.write("\u0557\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\3\2\7\2\u009c\n\2\f\2\16\2\u009f\13\2\3\2\7\2")
        buf.write("\u00a2\n\2\f\2\16\2\u00a5\13\2\3\2\3\2\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\5\3\u00af\n\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write("\3\4\3\4\7\4\u00bb\n\4\f\4\16\4\u00be\13\4\3\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\3\5\7\5\u00d3\n\5\f\5\16\5\u00d6\13\5\3\5\3\5\5")
        buf.write("\5\u00da\n\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write("\6\7\6\u00e7\n\6\f\6\16\6\u00ea\13\6\3\6\3\6\3\6\5\6\u00ef")
        buf.write("\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u00fc")
        buf.write("\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\7\7\u010c\n\7\f\7\16\7\u010f\13\7\5\7\u0111\n\7")
        buf.write("\3\7\3\7\7\7\u0115\n\7\f\7\16\7\u0118\13\7\3\7\3\7\3\7")
        buf.write("\3\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\t\3\t\7\t\u0128")
        buf.write("\n\t\f\t\16\t\u012b\13\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3")
        buf.write("\n\5\n\u0135\n\n\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3\f")
        buf.write("\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u0146\n\f\3\f\3\f\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3")
        buf.write("\16\3\16\3\16\3\16\7\16\u015b\n\16\f\16\16\16\u015e\13")
        buf.write("\16\5\16\u0160\n\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\7\17\u016e\n\17\f\17\16\17\u0171")
        buf.write("\13\17\5\17\u0173\n\17\3\17\3\17\3\17\3\20\3\20\3\20\3")
        buf.write("\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\7\20\u0187\n\20\f\20\16\20\u018a\13\20\5\20\u018c")
        buf.write("\n\20\3\20\3\20\3\20\3\20\5\20\u0192\n\20\3\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\5\21\u01c6\n\21\3\22\3\22\3\22\3")
        buf.write("\22\3\22\3\22\6\22\u01ce\n\22\r\22\16\22\u01cf\3\22\6")
        buf.write("\22\u01d3\n\22\r\22\16\22\u01d4\3\22\3\22\7\22\u01d9\n")
        buf.write("\22\f\22\16\22\u01dc\13\22\3\23\3\23\3\23\3\23\3\23\3")
        buf.write("\23\3\23\3\23\3\23\3\23\3\23\3\23\6\23\u01ea\n\23\r\23")
        buf.write("\16\23\u01eb\3\23\6\23\u01ef\n\23\r\23\16\23\u01f0\3\23")
        buf.write("\3\23\7\23\u01f5\n\23\f\23\16\23\u01f8\13\23\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\6\24\u0200\n\24\r\24\16\24\u0201")
        buf.write("\3\24\6\24\u0205\n\24\r\24\16\24\u0206\3\24\3\24\7\24")
        buf.write("\u020b\n\24\f\24\16\24\u020e\13\24\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\6\25\u0216\n\25\r\25\16\25\u0217\3\25\6\25")
        buf.write("\u021b\n\25\r\25\16\25\u021c\3\25\3\25\7\25\u0221\n\25")
        buf.write("\f\25\16\25\u0224\13\25\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\5\26\u022d\n\26\3\26\5\26\u0230\n\26\3\27\3\27\3")
        buf.write("\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\5\27\u024a\n\27\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3")
        buf.write("\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\7\31\u025b\n\31")
        buf.write("\f\31\16\31\u025e\13\31\3\31\3\31\3\31\3\31\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\7\32\u026f")
        buf.write("\n\32\f\32\16\32\u0272\13\32\3\32\3\32\3\32\3\32\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\7\33")
        buf.write("\u0283\n\33\f\33\16\33\u0286\13\33\3\33\3\33\3\33\3\33")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\7\34\u0297\n\34\f\34\16\34\u029a\13\34\3\34\3\34\3\34")
        buf.write("\3\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\7\35\u02ab\n\35\f\35\16\35\u02ae\13\35\3\35\3\35")
        buf.write("\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\37")
        buf.write("\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\7\37")
        buf.write("\u02d2\n\37\f\37\16\37\u02d5\13\37\3\37\3\37\3\37\3\37")
        buf.write("\3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \7 \u02e6\n \f \16 \u02e9")
        buf.write("\13 \3 \3 \3 \3 \3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\7!\u02fa")
        buf.write("\n!\f!\16!\u02fd\13!\3!\3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\7\"\u030e\n\"\f\"\16\"\u0311\13")
        buf.write("\"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\7")
        buf.write("#\u0322\n#\f#\16#\u0325\13#\3#\3#\3#\3#\3$\3$\3$\3$\3")
        buf.write("$\3$\3$\3$\3$\3$\3$\7$\u0336\n$\f$\16$\u0339\13$\3$\3")
        buf.write("$\3$\3$\3%\3%\3%\3%\3%\3&\3&\3&\3&\3&\3\'\3\'\3\'\3\'")
        buf.write("\3\'\3(\3(\3(\3(\3(\3)\3)\3)\3)\3)\3*\3*\3*\3*\3*\3+\3")
        buf.write("+\3+\3+\3+\3,\3,\3,\3,\3,\3-\3-\3-\3-\3-\3.\3.\3.\3.\3")
        buf.write(".\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\7/\u037c\n/\f/\16/")
        buf.write("\u037f\13/\3/\3/\3/\3/\3\60\3\60\3\60\3\60\3\60\3\60\3")
        buf.write("\60\3\60\3\60\3\60\3\60\7\60\u0390\n\60\f\60\16\60\u0393")
        buf.write("\13\60\3\60\3\60\3\60\3\60\3\61\3\61\3\61\3\61\3\61\3")
        buf.write("\61\3\61\3\61\3\61\3\61\3\61\7\61\u03a4\n\61\f\61\16\61")
        buf.write("\u03a7\13\61\3\61\3\61\3\61\3\61\3\62\3\62\3\62\3\62\3")
        buf.write("\62\3\62\3\62\3\62\3\62\3\62\3\62\7\62\u03b8\n\62\f\62")
        buf.write("\16\62\u03bb\13\62\3\62\3\62\3\62\3\62\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\7\64\u03d3\n\64\f\64\16\64\u03d6")
        buf.write("\13\64\3\64\3\64\3\64\3\64\3\65\3\65\3\65\3\65\3\65\3")
        buf.write("\66\3\66\3\66\3\66\3\66\3\67\3\67\3\67\3\67\3\67\3\67")
        buf.write("\3\67\3\67\3\67\3\67\3\67\7\67\u03f1\n\67\f\67\16\67\u03f4")
        buf.write("\13\67\3\67\3\67\3\67\3\67\38\38\38\38\38\38\38\38\38")
        buf.write("\38\38\38\38\38\58\u0408\n8\39\39\39\39\39\39\39\39\3")
        buf.write("9\39\39\79\u0415\n9\f9\169\u0418\139\39\39\39\39\3:\3")
        buf.write(":\3:\3:\3:\3:\3:\3:\3:\3:\3:\7:\u0429\n:\f:\16:\u042c")
        buf.write("\13:\3:\3:\3:\3:\3;\3;\3;\3;\3;\3<\3<\3<\3<\3<\3<\3<\3")
        buf.write("<\3<\3<\3<\7<\u0442\n<\f<\16<\u0445\13<\3<\3<\3<\3<\3")
        buf.write("=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\7=\u0456\n=\f=\16=\u0459")
        buf.write("\13=\3=\3=\3=\3=\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\7>\u046a")
        buf.write("\n>\f>\16>\u046d\13>\3>\3>\3>\3>\3?\3?\3?\3?\3?\3?\3?")
        buf.write("\3?\3?\3?\3?\7?\u047e\n?\f?\16?\u0481\13?\3?\3?\3?\3?")
        buf.write("\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\7@\u0492\n@\f@\16@\u0495")
        buf.write("\13@\3@\3@\3@\3@\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\7A\u04a6")
        buf.write("\nA\fA\16A\u04a9\13A\3A\3A\3A\3A\3B\3B\3B\3B\3B\3B\3B")
        buf.write("\3B\3B\3B\3B\7B\u04ba\nB\fB\16B\u04bd\13B\3B\3B\3B\3B")
        buf.write("\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\7C\u04ce\nC\fC\16C\u04d1")
        buf.write("\13C\3C\3C\3C\3C\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\7D\u04e2")
        buf.write("\nD\fD\16D\u04e5\13D\3D\3D\3D\3D\3E\3E\3E\3E\5E\u04ef")
        buf.write("\nE\3E\3E\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\7F\u04fe\n")
        buf.write("F\fF\16F\u0501\13F\3F\3F\3F\3F\3G\3G\3G\3G\3G\3G\3G\3")
        buf.write("G\3G\3G\3G\7G\u0512\nG\fG\16G\u0515\13G\3G\3G\3G\3G\3")
        buf.write("H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\7H\u0526\nH\fH\16H\u0529")
        buf.write("\13H\3H\3H\3H\3H\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\7I\u053a")
        buf.write("\nI\fI\16I\u053d\13I\3I\3I\3I\3I\3J\3J\3J\3J\3J\3J\3J")
        buf.write("\3J\3J\3J\3J\7J\u054e\nJ\fJ\16J\u0551\13J\3J\3J\3J\3J")
        buf.write("\3J\2\2K\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(")
        buf.write("*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080")
        buf.write("\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092")
        buf.write("\2\4\3\2&\'\3\2^`\2\u0597\2\u0094\3\2\2\2\4\u00ae\3\2")
        buf.write("\2\2\6\u00b0\3\2\2\2\b\u00bf\3\2\2\2\n\u00db\3\2\2\2\f")
        buf.write("\u00f0\3\2\2\2\16\u011d\3\2\2\2\20\u0125\3\2\2\2\22\u0134")
        buf.write("\3\2\2\2\24\u0136\3\2\2\2\26\u013c\3\2\2\2\30\u0149\3")
        buf.write("\2\2\2\32\u0152\3\2\2\2\34\u0164\3\2\2\2\36\u0191\3\2")
        buf.write("\2\2 \u01c5\3\2\2\2\"\u01c7\3\2\2\2$\u01dd\3\2\2\2&\u01f9")
        buf.write("\3\2\2\2(\u020f\3\2\2\2*\u022f\3\2\2\2,\u0249\3\2\2\2")
        buf.write(".\u024b\3\2\2\2\60\u024f\3\2\2\2\62\u0263\3\2\2\2\64\u0277")
        buf.write("\3\2\2\2\66\u028b\3\2\2\28\u029f\3\2\2\2:\u02b3\3\2\2")
        buf.write("\2<\u02c6\3\2\2\2>\u02da\3\2\2\2@\u02ee\3\2\2\2B\u0302")
        buf.write("\3\2\2\2D\u0316\3\2\2\2F\u032a\3\2\2\2H\u033e\3\2\2\2")
        buf.write("J\u0343\3\2\2\2L\u0348\3\2\2\2N\u034d\3\2\2\2P\u0352\3")
        buf.write("\2\2\2R\u0357\3\2\2\2T\u035c\3\2\2\2V\u0361\3\2\2\2X\u0366")
        buf.write("\3\2\2\2Z\u036b\3\2\2\2\\\u0370\3\2\2\2^\u0384\3\2\2\2")
        buf.write("`\u0398\3\2\2\2b\u03ac\3\2\2\2d\u03c0\3\2\2\2f\u03c7\3")
        buf.write("\2\2\2h\u03db\3\2\2\2j\u03e0\3\2\2\2l\u03e5\3\2\2\2n\u0407")
        buf.write("\3\2\2\2p\u0409\3\2\2\2r\u041d\3\2\2\2t\u0431\3\2\2\2")
        buf.write("v\u0436\3\2\2\2x\u044a\3\2\2\2z\u045e\3\2\2\2|\u0472\3")
        buf.write("\2\2\2~\u0486\3\2\2\2\u0080\u049a\3\2\2\2\u0082\u04ae")
        buf.write("\3\2\2\2\u0084\u04c2\3\2\2\2\u0086\u04d6\3\2\2\2\u0088")
        buf.write("\u04ea\3\2\2\2\u008a\u04f2\3\2\2\2\u008c\u0506\3\2\2\2")
        buf.write("\u008e\u051a\3\2\2\2\u0090\u052e\3\2\2\2\u0092\u0542\3")
        buf.write("\2\2\2\u0094\u0095\b\2\1\2\u0095\u0096\7\3\2\2\u0096\u0097")
        buf.write("\7i\2\2\u0097\u0098\b\2\1\2\u0098\u0099\b\2\1\2\u0099")
        buf.write("\u009d\7\b\2\2\u009a\u009c\5\6\4\2\u009b\u009a\3\2\2\2")
        buf.write("\u009c\u009f\3\2\2\2\u009d\u009b\3\2\2\2\u009d\u009e\3")
        buf.write("\2\2\2\u009e\u00a3\3\2\2\2\u009f\u009d\3\2\2\2\u00a0\u00a2")
        buf.write("\5\f\7\2\u00a1\u00a0\3\2\2\2\u00a2\u00a5\3\2\2\2\u00a3")
        buf.write("\u00a1\3\2\2\2\u00a3\u00a4\3\2\2\2\u00a4\u00a6\3\2\2\2")
        buf.write("\u00a5\u00a3\3\2\2\2\u00a6\u00a7\5\16\b\2\u00a7\3\3\2")
        buf.write("\2\2\u00a8\u00a9\7\25\2\2\u00a9\u00af\b\3\1\2\u00aa\u00ab")
        buf.write("\7\26\2\2\u00ab\u00af\b\3\1\2\u00ac\u00ad\7\27\2\2\u00ad")
        buf.write("\u00af\b\3\1\2\u00ae\u00a8\3\2\2\2\u00ae\u00aa\3\2\2\2")
        buf.write("\u00ae\u00ac\3\2\2\2\u00af\5\3\2\2\2\u00b0\u00b1\7\5\2")
        buf.write("\2\u00b1\u00b2\5\4\3\2\u00b2\u00b3\b\4\1\2\u00b3\u00b4")
        buf.write("\7\b\2\2\u00b4\u00b5\5\b\5\2\u00b5\u00bc\b\4\1\2\u00b6")
        buf.write("\u00b7\7\t\2\2\u00b7\u00b8\5\b\5\2\u00b8\u00b9\b\4\1\2")
        buf.write("\u00b9\u00bb\3\2\2\2\u00ba\u00b6\3\2\2\2\u00bb\u00be\3")
        buf.write("\2\2\2\u00bc\u00ba\3\2\2\2\u00bc\u00bd\3\2\2\2\u00bd\7")
        buf.write("\3\2\2\2\u00be\u00bc\3\2\2\2\u00bf\u00d9\7i\2\2\u00c0")
        buf.write("\u00c1\7\n\2\2\u00c1\u00c2\b\5\1\2\u00c2\u00c3\7e\2\2")
        buf.write("\u00c3\u00c4\b\5\1\2\u00c4\u00c5\b\5\1\2\u00c5\u00c6\7")
        buf.write("\b\2\2\u00c6\u00c7\7e\2\2\u00c7\u00c8\b\5\1\2\u00c8\u00d4")
        buf.write("\b\5\1\2\u00c9\u00ca\7\t\2\2\u00ca\u00cb\b\5\1\2\u00cb")
        buf.write("\u00cc\7e\2\2\u00cc\u00cd\b\5\1\2\u00cd\u00ce\b\5\1\2")
        buf.write("\u00ce\u00cf\7\b\2\2\u00cf\u00d0\7e\2\2\u00d0\u00d1\b")
        buf.write("\5\1\2\u00d1\u00d3\b\5\1\2\u00d2\u00c9\3\2\2\2\u00d3\u00d6")
        buf.write("\3\2\2\2\u00d4\u00d2\3\2\2\2\u00d4\u00d5\3\2\2\2\u00d5")
        buf.write("\u00d7\3\2\2\2\u00d6\u00d4\3\2\2\2\u00d7\u00d8\7\13\2")
        buf.write("\2\u00d8\u00da\b\5\1\2\u00d9\u00c0\3\2\2\2\u00d9\u00da")
        buf.write("\3\2\2\2\u00da\t\3\2\2\2\u00db\u00dc\7i\2\2\u00dc\u00ee")
        buf.write("\b\6\1\2\u00dd\u00de\7\n\2\2\u00de\u00df\b\6\1\2\u00df")
        buf.write("\u00e0\5&\24\2\u00e0\u00e8\b\6\1\2\u00e1\u00e2\7\t\2\2")
        buf.write("\u00e2\u00e3\b\6\1\2\u00e3\u00e4\5&\24\2\u00e4\u00e5\b")
        buf.write("\6\1\2\u00e5\u00e7\3\2\2\2\u00e6\u00e1\3\2\2\2\u00e7\u00ea")
        buf.write("\3\2\2\2\u00e8\u00e6\3\2\2\2\u00e8\u00e9\3\2\2\2\u00e9")
        buf.write("\u00eb\3\2\2\2\u00ea\u00e8\3\2\2\2\u00eb\u00ec\7\13\2")
        buf.write("\2\u00ec\u00ed\b\6\1\2\u00ed\u00ef\3\2\2\2\u00ee\u00dd")
        buf.write("\3\2\2\2\u00ee\u00ef\3\2\2\2\u00ef\13\3\2\2\2\u00f0\u00f1")
        buf.write("\7i\2\2\u00f1\u00f2\b\7\1\2\u00f2\u00fb\7\20\2\2\u00f3")
        buf.write("\u00f4\7\24\2\2\u00f4\u00f5\b\7\1\2\u00f5\u00fc\b\7\1")
        buf.write("\2\u00f6\u00f7\5\4\3\2\u00f7\u00f8\b\7\1\2\u00f8\u00f9")
        buf.write("\b\7\1\2\u00f9\u00fa\b\7\1\2\u00fa\u00fc\3\2\2\2\u00fb")
        buf.write("\u00f3\3\2\2\2\u00fb\u00f6\3\2\2\2\u00fc\u00fd\3\2\2\2")
        buf.write("\u00fd\u00fe\7\21\2\2\u00fe\u0110\7\f\2\2\u00ff\u0100")
        buf.write("\5\4\3\2\u0100\u0101\b\7\1\2\u0101\u0102\7i\2\2\u0102")
        buf.write("\u0103\b\7\1\2\u0103\u010d\b\7\1\2\u0104\u0105\7\t\2\2")
        buf.write("\u0105\u0106\5\4\3\2\u0106\u0107\b\7\1\2\u0107\u0108\7")
        buf.write("i\2\2\u0108\u0109\b\7\1\2\u0109\u010a\b\7\1\2\u010a\u010c")
        buf.write("\3\2\2\2\u010b\u0104\3\2\2\2\u010c\u010f\3\2\2\2\u010d")
        buf.write("\u010b\3\2\2\2\u010d\u010e\3\2\2\2\u010e\u0111\3\2\2\2")
        buf.write("\u010f\u010d\3\2\2\2\u0110\u00ff\3\2\2\2\u0110\u0111\3")
        buf.write("\2\2\2\u0111\u0112\3\2\2\2\u0112\u0116\7\r\2\2\u0113\u0115")
        buf.write("\5\6\4\2\u0114\u0113\3\2\2\2\u0115\u0118\3\2\2\2\u0116")
        buf.write("\u0114\3\2\2\2\u0116\u0117\3\2\2\2\u0117\u0119\3\2\2\2")
        buf.write("\u0118\u0116\3\2\2\2\u0119\u011a\b\7\1\2\u011a\u011b\5")
        buf.write("\20\t\2\u011b\u011c\b\7\1\2\u011c\r\3\2\2\2\u011d\u011e")
        buf.write("\7\4\2\2\u011e\u011f\b\b\1\2\u011f\u0120\b\b\1\2\u0120")
        buf.write("\u0121\7\f\2\2\u0121\u0122\7\r\2\2\u0122\u0123\5\20\t")
        buf.write("\2\u0123\u0124\b\b\1\2\u0124\17\3\2\2\2\u0125\u0129\7")
        buf.write("\16\2\2\u0126\u0128\5\22\n\2\u0127\u0126\3\2\2\2\u0128")
        buf.write("\u012b\3\2\2\2\u0129\u0127\3\2\2\2\u0129\u012a\3\2\2\2")
        buf.write("\u012a\u012c\3\2\2\2\u012b\u0129\3\2\2\2\u012c\u012d\7")
        buf.write("\17\2\2\u012d\21\3\2\2\2\u012e\u0135\5\24\13\2\u012f\u0135")
        buf.write("\5\26\f\2\u0130\u0135\5\32\16\2\u0131\u0135\5\34\17\2")
        buf.write("\u0132\u0135\5\30\r\2\u0133\u0135\5\36\20\2\u0134\u012e")
        buf.write("\3\2\2\2\u0134\u012f\3\2\2\2\u0134\u0130\3\2\2\2\u0134")
        buf.write("\u0131\3\2\2\2\u0134\u0132\3\2\2\2\u0134\u0133\3\2\2\2")
        buf.write("\u0135\23\3\2\2\2\u0136\u0137\5\n\6\2\u0137\u0138\7\35")
        buf.write("\2\2\u0138\u0139\b\13\1\2\u0139\u013a\5&\24\2\u013a\u013b")
        buf.write("\b\13\1\2\u013b\25\3\2\2\2\u013c\u013d\7\30\2\2\u013d")
        buf.write("\u013e\7\f\2\2\u013e\u013f\5\"\22\2\u013f\u0140\7\r\2")
        buf.write("\2\u0140\u0141\b\f\1\2\u0141\u0145\5\20\t\2\u0142\u0143")
        buf.write("\7\31\2\2\u0143\u0144\b\f\1\2\u0144\u0146\5\20\t\2\u0145")
        buf.write("\u0142\3\2\2\2\u0145\u0146\3\2\2\2\u0146\u0147\3\2\2\2")
        buf.write("\u0147\u0148\b\f\1\2\u0148\27\3\2\2\2\u0149\u014a\7\32")
        buf.write("\2\2\u014a\u014b\b\r\1\2\u014b\u014c\7\f\2\2\u014c\u014d")
        buf.write("\5\"\22\2\u014d\u014e\7\r\2\2\u014e\u014f\b\r\1\2\u014f")
        buf.write("\u0150\5\20\t\2\u0150\u0151\b\r\1\2\u0151\31\3\2\2\2\u0152")
        buf.write("\u0153\7\33\2\2\u0153\u015f\7\f\2\2\u0154\u0155\7h\2\2")
        buf.write("\u0155\u0156\b\16\1\2\u0156\u0160\b\16\1\2\u0157\u015c")
        buf.write("\5\"\22\2\u0158\u0159\7\t\2\2\u0159\u015b\5\"\22\2\u015a")
        buf.write("\u0158\3\2\2\2\u015b\u015e\3\2\2\2\u015c\u015a\3\2\2\2")
        buf.write("\u015c\u015d\3\2\2\2\u015d\u0160\3\2\2\2\u015e\u015c\3")
        buf.write("\2\2\2\u015f\u0154\3\2\2\2\u015f\u0157\3\2\2\2\u015f\u0160")
        buf.write("\3\2\2\2\u0160\u0161\3\2\2\2\u0161\u0162\7\r\2\2\u0162")
        buf.write("\u0163\b\16\1\2\u0163\33\3\2\2\2\u0164\u0165\7\34\2\2")
        buf.write("\u0165\u0172\7\f\2\2\u0166\u0167\7h\2\2\u0167\u0168\b")
        buf.write("\17\1\2\u0168\u0169\b\17\1\2\u0169\u0173\b\17\1\2\u016a")
        buf.write("\u016f\5\"\22\2\u016b\u016c\7\t\2\2\u016c\u016e\5\"\22")
        buf.write("\2\u016d\u016b\3\2\2\2\u016e\u0171\3\2\2\2\u016f\u016d")
        buf.write("\3\2\2\2\u016f\u0170\3\2\2\2\u0170\u0173\3\2\2\2\u0171")
        buf.write("\u016f\3\2\2\2\u0172\u0166\3\2\2\2\u0172\u016a\3\2\2\2")
        buf.write("\u0172\u0173\3\2\2\2\u0173\u0174\3\2\2\2\u0174\u0175\7")
        buf.write("\r\2\2\u0175\u0176\b\17\1\2\u0176\35\3\2\2\2\u0177\u0178")
        buf.write("\7i\2\2\u0178\u0179\b\20\1\2\u0179\u017a\b\20\1\2\u017a")
        buf.write("\u017b\b\20\1\2\u017b\u017c\b\20\1\2\u017c\u017d\b\20")
        buf.write("\1\2\u017d\u017e\7\f\2\2\u017e\u018b\b\20\1\2\u017f\u0180")
        buf.write("\5&\24\2\u0180\u0188\b\20\1\2\u0181\u0182\7\t\2\2\u0182")
        buf.write("\u0183\b\20\1\2\u0183\u0184\5&\24\2\u0184\u0185\b\20\1")
        buf.write("\2\u0185\u0187\3\2\2\2\u0186\u0181\3\2\2\2\u0187\u018a")
        buf.write("\3\2\2\2\u0188\u0186\3\2\2\2\u0188\u0189\3\2\2\2\u0189")
        buf.write("\u018c\3\2\2\2\u018a\u0188\3\2\2\2\u018b\u017f\3\2\2\2")
        buf.write("\u018b\u018c\3\2\2\2\u018c\u018d\3\2\2\2\u018d\u018e\7")
        buf.write("\r\2\2\u018e\u018f\b\20\1\2\u018f\u0192\b\20\1\2\u0190")
        buf.write("\u0192\5 \21\2\u0191\u0177\3\2\2\2\u0191\u0190\3\2\2\2")
        buf.write("\u0192\37\3\2\2\2\u0193\u01c6\5.\30\2\u0194\u01c6\5\60")
        buf.write("\31\2\u0195\u01c6\5\62\32\2\u0196\u01c6\5\64\33\2\u0197")
        buf.write("\u01c6\5\66\34\2\u0198\u01c6\58\35\2\u0199\u01c6\5:\36")
        buf.write("\2\u019a\u01c6\5<\37\2\u019b\u01c6\5@!\2\u019c\u01c6\5")
        buf.write("B\"\2\u019d\u01c6\5D#\2\u019e\u01c6\5F$\2\u019f\u01c6")
        buf.write("\5H%\2\u01a0\u01c6\5J&\2\u01a1\u01c6\5L\'\2\u01a2\u01c6")
        buf.write("\5N(\2\u01a3\u01c6\5P)\2\u01a4\u01c6\5R*\2\u01a5\u01c6")
        buf.write("\5T+\2\u01a6\u01c6\5V,\2\u01a7\u01c6\5X-\2\u01a8\u01c6")
        buf.write("\5Z.\2\u01a9\u01c6\5\\/\2\u01aa\u01c6\5^\60\2\u01ab\u01c6")
        buf.write("\5`\61\2\u01ac\u01c6\5b\62\2\u01ad\u01c6\5d\63\2\u01ae")
        buf.write("\u01c6\5f\64\2\u01af\u01c6\5h\65\2\u01b0\u01c6\5j\66\2")
        buf.write("\u01b1\u01c6\5l\67\2\u01b2\u01c6\5n8\2\u01b3\u01c6\5p")
        buf.write("9\2\u01b4\u01c6\5r:\2\u01b5\u01c6\5t;\2\u01b6\u01c6\5")
        buf.write("v<\2\u01b7\u01c6\5x=\2\u01b8\u01c6\5z>\2\u01b9\u01c6\5")
        buf.write("|?\2\u01ba\u01c6\5~@\2\u01bb\u01c6\5\u0080A\2\u01bc\u01c6")
        buf.write("\5\u0082B\2\u01bd\u01c6\5\u0084C\2\u01be\u01c6\5\u0086")
        buf.write("D\2\u01bf\u01c6\5\u0088E\2\u01c0\u01c6\5\u008aF\2\u01c1")
        buf.write("\u01c6\5\u008cG\2\u01c2\u01c6\5\u008eH\2\u01c3\u01c6\5")
        buf.write("\u0090I\2\u01c4\u01c6\5\u0092J\2\u01c5\u0193\3\2\2\2\u01c5")
        buf.write("\u0194\3\2\2\2\u01c5\u0195\3\2\2\2\u01c5\u0196\3\2\2\2")
        buf.write("\u01c5\u0197\3\2\2\2\u01c5\u0198\3\2\2\2\u01c5\u0199\3")
        buf.write("\2\2\2\u01c5\u019a\3\2\2\2\u01c5\u019b\3\2\2\2\u01c5\u019c")
        buf.write("\3\2\2\2\u01c5\u019d\3\2\2\2\u01c5\u019e\3\2\2\2\u01c5")
        buf.write("\u019f\3\2\2\2\u01c5\u01a0\3\2\2\2\u01c5\u01a1\3\2\2\2")
        buf.write("\u01c5\u01a2\3\2\2\2\u01c5\u01a3\3\2\2\2\u01c5\u01a4\3")
        buf.write("\2\2\2\u01c5\u01a5\3\2\2\2\u01c5\u01a6\3\2\2\2\u01c5\u01a7")
        buf.write("\3\2\2\2\u01c5\u01a8\3\2\2\2\u01c5\u01a9\3\2\2\2\u01c5")
        buf.write("\u01aa\3\2\2\2\u01c5\u01ab\3\2\2\2\u01c5\u01ac\3\2\2\2")
        buf.write("\u01c5\u01ad\3\2\2\2\u01c5\u01ae\3\2\2\2\u01c5\u01af\3")
        buf.write("\2\2\2\u01c5\u01b0\3\2\2\2\u01c5\u01b1\3\2\2\2\u01c5\u01b2")
        buf.write("\3\2\2\2\u01c5\u01b3\3\2\2\2\u01c5\u01b4\3\2\2\2\u01c5")
        buf.write("\u01b5\3\2\2\2\u01c5\u01b6\3\2\2\2\u01c5\u01b7\3\2\2\2")
        buf.write("\u01c5\u01b8\3\2\2\2\u01c5\u01b9\3\2\2\2\u01c5\u01ba\3")
        buf.write("\2\2\2\u01c5\u01bb\3\2\2\2\u01c5\u01bc\3\2\2\2\u01c5\u01bd")
        buf.write("\3\2\2\2\u01c5\u01be\3\2\2\2\u01c5\u01bf\3\2\2\2\u01c5")
        buf.write("\u01c0\3\2\2\2\u01c5\u01c1\3\2\2\2\u01c5\u01c2\3\2\2\2")
        buf.write("\u01c5\u01c3\3\2\2\2\u01c5\u01c4\3\2\2\2\u01c6!\3\2\2")
        buf.write("\2\u01c7\u01c8\5$\23\2\u01c8\u01da\b\22\1\2\u01c9\u01ca")
        buf.write("\7\36\2\2\u01ca\u01ce\b\22\1\2\u01cb\u01cc\7\37\2\2\u01cc")
        buf.write("\u01ce\b\22\1\2\u01cd\u01c9\3\2\2\2\u01cd\u01cb\3\2\2")
        buf.write("\2\u01ce\u01cf\3\2\2\2\u01cf\u01cd\3\2\2\2\u01cf\u01d0")
        buf.write("\3\2\2\2\u01d0\u01d2\3\2\2\2\u01d1\u01d3\5$\23\2\u01d2")
        buf.write("\u01d1\3\2\2\2\u01d3\u01d4\3\2\2\2\u01d4\u01d2\3\2\2\2")
        buf.write("\u01d4\u01d5\3\2\2\2\u01d5\u01d6\3\2\2\2\u01d6\u01d7\b")
        buf.write("\22\1\2\u01d7\u01d9\3\2\2\2\u01d8\u01cd\3\2\2\2\u01d9")
        buf.write("\u01dc\3\2\2\2\u01da\u01d8\3\2\2\2\u01da\u01db\3\2\2\2")
        buf.write("\u01db#\3\2\2\2\u01dc\u01da\3\2\2\2\u01dd\u01de\5&\24")
        buf.write("\2\u01de\u01f6\b\23\1\2\u01df\u01e0\7%\2\2\u01e0\u01ea")
        buf.write("\b\23\1\2\u01e1\u01e2\7\"\2\2\u01e2\u01ea\b\23\1\2\u01e3")
        buf.write("\u01e4\7!\2\2\u01e4\u01ea\b\23\1\2\u01e5\u01e6\7$\2\2")
        buf.write("\u01e6\u01ea\b\23\1\2\u01e7\u01e8\7#\2\2\u01e8\u01ea\b")
        buf.write("\23\1\2\u01e9\u01df\3\2\2\2\u01e9\u01e1\3\2\2\2\u01e9")
        buf.write("\u01e3\3\2\2\2\u01e9\u01e5\3\2\2\2\u01e9\u01e7\3\2\2\2")
        buf.write("\u01ea\u01eb\3\2\2\2\u01eb\u01e9\3\2\2\2\u01eb\u01ec\3")
        buf.write("\2\2\2\u01ec\u01ee\3\2\2\2\u01ed\u01ef\5&\24\2\u01ee\u01ed")
        buf.write("\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0\u01ee\3\2\2\2\u01f0")
        buf.write("\u01f1\3\2\2\2\u01f1\u01f2\3\2\2\2\u01f2\u01f3\b\23\1")
        buf.write("\2\u01f3\u01f5\3\2\2\2\u01f4\u01e9\3\2\2\2\u01f5\u01f8")
        buf.write("\3\2\2\2\u01f6\u01f4\3\2\2\2\u01f6\u01f7\3\2\2\2\u01f7")
        buf.write("%\3\2\2\2\u01f8\u01f6\3\2\2\2\u01f9\u01fa\5(\25\2\u01fa")
        buf.write("\u020c\b\24\1\2\u01fb\u01fc\7\'\2\2\u01fc\u0200\b\24\1")
        buf.write("\2\u01fd\u01fe\7&\2\2\u01fe\u0200\b\24\1\2\u01ff\u01fb")
        buf.write("\3\2\2\2\u01ff\u01fd\3\2\2\2\u0200\u0201\3\2\2\2\u0201")
        buf.write("\u01ff\3\2\2\2\u0201\u0202\3\2\2\2\u0202\u0204\3\2\2\2")
        buf.write("\u0203\u0205\5(\25\2\u0204\u0203\3\2\2\2\u0205\u0206\3")
        buf.write("\2\2\2\u0206\u0204\3\2\2\2\u0206\u0207\3\2\2\2\u0207\u0208")
        buf.write("\3\2\2\2\u0208\u0209\b\24\1\2\u0209\u020b\3\2\2\2\u020a")
        buf.write("\u01ff\3\2\2\2\u020b\u020e\3\2\2\2\u020c\u020a\3\2\2\2")
        buf.write("\u020c\u020d\3\2\2\2\u020d\'\3\2\2\2\u020e\u020c\3\2\2")
        buf.write("\2\u020f\u0210\5*\26\2\u0210\u0222\b\25\1\2\u0211\u0212")
        buf.write("\7)\2\2\u0212\u0216\b\25\1\2\u0213\u0214\7(\2\2\u0214")
        buf.write("\u0216\b\25\1\2\u0215\u0211\3\2\2\2\u0215\u0213\3\2\2")
        buf.write("\2\u0216\u0217\3\2\2\2\u0217\u0215\3\2\2\2\u0217\u0218")
        buf.write("\3\2\2\2\u0218\u021a\3\2\2\2\u0219\u021b\5*\26\2\u021a")
        buf.write("\u0219\3\2\2\2\u021b\u021c\3\2\2\2\u021c\u021a\3\2\2\2")
        buf.write("\u021c\u021d\3\2\2\2\u021d\u021e\3\2\2\2\u021e\u021f\b")
        buf.write("\25\1\2\u021f\u0221\3\2\2\2\u0220\u0215\3\2\2\2\u0221")
        buf.write("\u0224\3\2\2\2\u0222\u0220\3\2\2\2\u0222\u0223\3\2\2\2")
        buf.write("\u0223)\3\2\2\2\u0224\u0222\3\2\2\2\u0225\u0226\7\f\2")
        buf.write("\2\u0226\u0227\b\26\1\2\u0227\u0228\5\"\22\2\u0228\u0229")
        buf.write("\7\r\2\2\u0229\u022a\b\26\1\2\u022a\u0230\3\2\2\2\u022b")
        buf.write("\u022d\t\2\2\2\u022c\u022b\3\2\2\2\u022c\u022d\3\2\2\2")
        buf.write("\u022d\u022e\3\2\2\2\u022e\u0230\5,\27\2\u022f\u0225\3")
        buf.write("\2\2\2\u022f\u022c\3\2\2\2\u0230+\3\2\2\2\u0231\u0232")
        buf.write("\5\36\20\2\u0232\u0233\b\27\1\2\u0233\u0234\b\27\1\2\u0234")
        buf.write("\u024a\3\2\2\2\u0235\u0236\5\n\6\2\u0236\u0237\b\27\1")
        buf.write("\2\u0237\u0238\b\27\1\2\u0238\u0239\b\27\1\2\u0239\u024a")
        buf.write("\3\2\2\2\u023a\u023b\7e\2\2\u023b\u023c\b\27\1\2\u023c")
        buf.write("\u023d\b\27\1\2\u023d\u023e\b\27\1\2\u023e\u024a\b\27")
        buf.write("\1\2\u023f\u0240\7f\2\2\u0240\u0241\b\27\1\2\u0241\u0242")
        buf.write("\b\27\1\2\u0242\u0243\b\27\1\2\u0243\u024a\b\27\1\2\u0244")
        buf.write("\u0245\7g\2\2\u0245\u0246\b\27\1\2\u0246\u0247\b\27\1")
        buf.write("\2\u0247\u0248\b\27\1\2\u0248\u024a\b\27\1\2\u0249\u0231")
        buf.write("\3\2\2\2\u0249\u0235\3\2\2\2\u0249\u023a\3\2\2\2\u0249")
        buf.write("\u023f\3\2\2\2\u0249\u0244\3\2\2\2\u024a-\3\2\2\2\u024b")
        buf.write("\u024c\7+\2\2\u024c\u024d\5\"\22\2\u024d\u024e\b\30\1")
        buf.write("\2\u024e/\3\2\2\2\u024f\u0250\7,\2\2\u0250\u0251\b\31")
        buf.write("\1\2\u0251\u0252\7\f\2\2\u0252\u0253\b\31\1\2\u0253\u0254")
        buf.write("\5&\24\2\u0254\u025c\b\31\1\2\u0255\u0256\7\t\2\2\u0256")
        buf.write("\u0257\b\31\1\2\u0257\u0258\5&\24\2\u0258\u0259\b\31\1")
        buf.write("\2\u0259\u025b\3\2\2\2\u025a\u0255\3\2\2\2\u025b\u025e")
        buf.write("\3\2\2\2\u025c\u025a\3\2\2\2\u025c\u025d\3\2\2\2\u025d")
        buf.write("\u025f\3\2\2\2\u025e\u025c\3\2\2\2\u025f\u0260\7\r\2\2")
        buf.write("\u0260\u0261\b\31\1\2\u0261\u0262\b\31\1\2\u0262\61\3")
        buf.write("\2\2\2\u0263\u0264\7-\2\2\u0264\u0265\b\32\1\2\u0265\u0266")
        buf.write("\7\f\2\2\u0266\u0267\b\32\1\2\u0267\u0268\5&\24\2\u0268")
        buf.write("\u0270\b\32\1\2\u0269\u026a\7\t\2\2\u026a\u026b\b\32\1")
        buf.write("\2\u026b\u026c\5&\24\2\u026c\u026d\b\32\1\2\u026d\u026f")
        buf.write("\3\2\2\2\u026e\u0269\3\2\2\2\u026f\u0272\3\2\2\2\u0270")
        buf.write("\u026e\3\2\2\2\u0270\u0271\3\2\2\2\u0271\u0273\3\2\2\2")
        buf.write("\u0272\u0270\3\2\2\2\u0273\u0274\7\r\2\2\u0274\u0275\b")
        buf.write("\32\1\2\u0275\u0276\b\32\1\2\u0276\63\3\2\2\2\u0277\u0278")
        buf.write("\7.\2\2\u0278\u0279\b\33\1\2\u0279\u027a\7\f\2\2\u027a")
        buf.write("\u027b\b\33\1\2\u027b\u027c\5&\24\2\u027c\u0284\b\33\1")
        buf.write("\2\u027d\u027e\7\t\2\2\u027e\u027f\b\33\1\2\u027f\u0280")
        buf.write("\5&\24\2\u0280\u0281\b\33\1\2\u0281\u0283\3\2\2\2\u0282")
        buf.write("\u027d\3\2\2\2\u0283\u0286\3\2\2\2\u0284\u0282\3\2\2\2")
        buf.write("\u0284\u0285\3\2\2\2\u0285\u0287\3\2\2\2\u0286\u0284\3")
        buf.write("\2\2\2\u0287\u0288\7\r\2\2\u0288\u0289\b\33\1\2\u0289")
        buf.write("\u028a\b\33\1\2\u028a\65\3\2\2\2\u028b\u028c\7/\2\2\u028c")
        buf.write("\u028d\b\34\1\2\u028d\u028e\7\f\2\2\u028e\u028f\b\34\1")
        buf.write("\2\u028f\u0290\5&\24\2\u0290\u0298\b\34\1\2\u0291\u0292")
        buf.write("\7\t\2\2\u0292\u0293\b\34\1\2\u0293\u0294\5&\24\2\u0294")
        buf.write("\u0295\b\34\1\2\u0295\u0297\3\2\2\2\u0296\u0291\3\2\2")
        buf.write("\2\u0297\u029a\3\2\2\2\u0298\u0296\3\2\2\2\u0298\u0299")
        buf.write("\3\2\2\2\u0299\u029b\3\2\2\2\u029a\u0298\3\2\2\2\u029b")
        buf.write("\u029c\7\r\2\2\u029c\u029d\b\34\1\2\u029d\u029e\b\34\1")
        buf.write("\2\u029e\67\3\2\2\2\u029f\u02a0\7\60\2\2\u02a0\u02a1\b")
        buf.write("\35\1\2\u02a1\u02a2\7\f\2\2\u02a2\u02a3\b\35\1\2\u02a3")
        buf.write("\u02a4\5&\24\2\u02a4\u02ac\b\35\1\2\u02a5\u02a6\7\t\2")
        buf.write("\2\u02a6\u02a7\b\35\1\2\u02a7\u02a8\5&\24\2\u02a8\u02a9")
        buf.write("\b\35\1\2\u02a9\u02ab\3\2\2\2\u02aa\u02a5\3\2\2\2\u02ab")
        buf.write("\u02ae\3\2\2\2\u02ac\u02aa\3\2\2\2\u02ac\u02ad\3\2\2\2")
        buf.write("\u02ad\u02af\3\2\2\2\u02ae\u02ac\3\2\2\2\u02af\u02b0\7")
        buf.write("\r\2\2\u02b0\u02b1\b\35\1\2\u02b1\u02b2\b\35\1\2\u02b2")
        buf.write("9\3\2\2\2\u02b3\u02b4\7\61\2\2\u02b4\u02b5\b\36\1\2\u02b5")
        buf.write("\u02b6\7\f\2\2\u02b6\u02b7\b\36\1\2\u02b7\u02b8\7e\2\2")
        buf.write("\u02b8\u02b9\b\36\1\2\u02b9\u02ba\b\36\1\2\u02ba\u02bb")
        buf.write("\7\t\2\2\u02bb\u02bc\b\36\1\2\u02bc\u02bd\7e\2\2\u02bd")
        buf.write("\u02be\b\36\1\2\u02be\u02bf\b\36\1\2\u02bf\u02c0\7\t\2")
        buf.write("\2\u02c0\u02c1\b\36\1\2\u02c1\u02c2\5\n\6\2\u02c2\u02c3")
        buf.write("\7\r\2\2\u02c3\u02c4\b\36\1\2\u02c4\u02c5\b\36\1\2\u02c5")
        buf.write(";\3\2\2\2\u02c6\u02c7\7\62\2\2\u02c7\u02c8\b\37\1\2\u02c8")
        buf.write("\u02c9\7\f\2\2\u02c9\u02ca\b\37\1\2\u02ca\u02cb\5&\24")
        buf.write("\2\u02cb\u02d3\b\37\1\2\u02cc\u02cd\7\t\2\2\u02cd\u02ce")
        buf.write("\b\37\1\2\u02ce\u02cf\5&\24\2\u02cf\u02d0\b\37\1\2\u02d0")
        buf.write("\u02d2\3\2\2\2\u02d1\u02cc\3\2\2\2\u02d2\u02d5\3\2\2\2")
        buf.write("\u02d3\u02d1\3\2\2\2\u02d3\u02d4\3\2\2\2\u02d4\u02d6\3")
        buf.write("\2\2\2\u02d5\u02d3\3\2\2\2\u02d6\u02d7\7\r\2\2\u02d7\u02d8")
        buf.write("\b\37\1\2\u02d8\u02d9\b\37\1\2\u02d9=\3\2\2\2\u02da\u02db")
        buf.write("\7\63\2\2\u02db\u02dc\b \1\2\u02dc\u02dd\7\f\2\2\u02dd")
        buf.write("\u02de\b \1\2\u02de\u02df\5&\24\2\u02df\u02e7\b \1\2\u02e0")
        buf.write("\u02e1\7\t\2\2\u02e1\u02e2\b \1\2\u02e2\u02e3\5&\24\2")
        buf.write("\u02e3\u02e4\b \1\2\u02e4\u02e6\3\2\2\2\u02e5\u02e0\3")
        buf.write("\2\2\2\u02e6\u02e9\3\2\2\2\u02e7\u02e5\3\2\2\2\u02e7\u02e8")
        buf.write("\3\2\2\2\u02e8\u02ea\3\2\2\2\u02e9\u02e7\3\2\2\2\u02ea")
        buf.write("\u02eb\7\r\2\2\u02eb\u02ec\b \1\2\u02ec\u02ed\b \1\2\u02ed")
        buf.write("?\3\2\2\2\u02ee\u02ef\7\64\2\2\u02ef\u02f0\b!\1\2\u02f0")
        buf.write("\u02f1\7\f\2\2\u02f1\u02f2\b!\1\2\u02f2\u02f3\5&\24\2")
        buf.write("\u02f3\u02fb\b!\1\2\u02f4\u02f5\7\t\2\2\u02f5\u02f6\b")
        buf.write("!\1\2\u02f6\u02f7\5&\24\2\u02f7\u02f8\b!\1\2\u02f8\u02fa")
        buf.write("\3\2\2\2\u02f9\u02f4\3\2\2\2\u02fa\u02fd\3\2\2\2\u02fb")
        buf.write("\u02f9\3\2\2\2\u02fb\u02fc\3\2\2\2\u02fc\u02fe\3\2\2\2")
        buf.write("\u02fd\u02fb\3\2\2\2\u02fe\u02ff\7\r\2\2\u02ff\u0300\b")
        buf.write("!\1\2\u0300\u0301\b!\1\2\u0301A\3\2\2\2\u0302\u0303\7")
        buf.write("\65\2\2\u0303\u0304\b\"\1\2\u0304\u0305\7\f\2\2\u0305")
        buf.write("\u0306\b\"\1\2\u0306\u0307\5&\24\2\u0307\u030f\b\"\1\2")
        buf.write("\u0308\u0309\7\t\2\2\u0309\u030a\b\"\1\2\u030a\u030b\5")
        buf.write("&\24\2\u030b\u030c\b\"\1\2\u030c\u030e\3\2\2\2\u030d\u0308")
        buf.write("\3\2\2\2\u030e\u0311\3\2\2\2\u030f\u030d\3\2\2\2\u030f")
        buf.write("\u0310\3\2\2\2\u0310\u0312\3\2\2\2\u0311\u030f\3\2\2\2")
        buf.write("\u0312\u0313\7\r\2\2\u0313\u0314\b\"\1\2\u0314\u0315\b")
        buf.write("\"\1\2\u0315C\3\2\2\2\u0316\u0317\7\66\2\2\u0317\u0318")
        buf.write("\b#\1\2\u0318\u0319\7\f\2\2\u0319\u031a\b#\1\2\u031a\u031b")
        buf.write("\5&\24\2\u031b\u0323\b#\1\2\u031c\u031d\7\t\2\2\u031d")
        buf.write("\u031e\b#\1\2\u031e\u031f\5&\24\2\u031f\u0320\b#\1\2\u0320")
        buf.write("\u0322\3\2\2\2\u0321\u031c\3\2\2\2\u0322\u0325\3\2\2\2")
        buf.write("\u0323\u0321\3\2\2\2\u0323\u0324\3\2\2\2\u0324\u0326\3")
        buf.write("\2\2\2\u0325\u0323\3\2\2\2\u0326\u0327\7\r\2\2\u0327\u0328")
        buf.write("\b#\1\2\u0328\u0329\b#\1\2\u0329E\3\2\2\2\u032a\u032b")
        buf.write("\7\67\2\2\u032b\u032c\b$\1\2\u032c\u032d\7\f\2\2\u032d")
        buf.write("\u032e\b$\1\2\u032e\u032f\5&\24\2\u032f\u0337\b$\1\2\u0330")
        buf.write("\u0331\7\t\2\2\u0331\u0332\b$\1\2\u0332\u0333\5&\24\2")
        buf.write("\u0333\u0334\b$\1\2\u0334\u0336\3\2\2\2\u0335\u0330\3")
        buf.write("\2\2\2\u0336\u0339\3\2\2\2\u0337\u0335\3\2\2\2\u0337\u0338")
        buf.write("\3\2\2\2\u0338\u033a\3\2\2\2\u0339\u0337\3\2\2\2\u033a")
        buf.write("\u033b\7\r\2\2\u033b\u033c\b$\1\2\u033c\u033d\b$\1\2\u033d")
        buf.write("G\3\2\2\2\u033e\u033f\78\2\2\u033f\u0340\7\f\2\2\u0340")
        buf.write("\u0341\5&\24\2\u0341\u0342\7\r\2\2\u0342I\3\2\2\2\u0343")
        buf.write("\u0344\79\2\2\u0344\u0345\7\f\2\2\u0345\u0346\5&\24\2")
        buf.write("\u0346\u0347\7\r\2\2\u0347K\3\2\2\2\u0348\u0349\7:\2\2")
        buf.write("\u0349\u034a\7\f\2\2\u034a\u034b\5&\24\2\u034b\u034c\7")
        buf.write("\r\2\2\u034cM\3\2\2\2\u034d\u034e\7;\2\2\u034e\u034f\7")
        buf.write("\f\2\2\u034f\u0350\5&\24\2\u0350\u0351\7\r\2\2\u0351O")
        buf.write("\3\2\2\2\u0352\u0353\7<\2\2\u0353\u0354\7\f\2\2\u0354")
        buf.write("\u0355\5&\24\2\u0355\u0356\7\r\2\2\u0356Q\3\2\2\2\u0357")
        buf.write("\u0358\7=\2\2\u0358\u0359\7\f\2\2\u0359\u035a\5&\24\2")
        buf.write("\u035a\u035b\7\r\2\2\u035bS\3\2\2\2\u035c\u035d\7>\2\2")
        buf.write("\u035d\u035e\7\f\2\2\u035e\u035f\5&\24\2\u035f\u0360\7")
        buf.write("\r\2\2\u0360U\3\2\2\2\u0361\u0362\7?\2\2\u0362\u0363\7")
        buf.write("\f\2\2\u0363\u0364\5&\24\2\u0364\u0365\7\r\2\2\u0365W")
        buf.write("\3\2\2\2\u0366\u0367\7@\2\2\u0367\u0368\7\f\2\2\u0368")
        buf.write("\u0369\5&\24\2\u0369\u036a\7\r\2\2\u036aY\3\2\2\2\u036b")
        buf.write("\u036c\7A\2\2\u036c\u036d\7\f\2\2\u036d\u036e\5&\24\2")
        buf.write("\u036e\u036f\7\r\2\2\u036f[\3\2\2\2\u0370\u0371\7B\2\2")
        buf.write("\u0371\u0372\b/\1\2\u0372\u0373\7\f\2\2\u0373\u0374\b")
        buf.write("/\1\2\u0374\u0375\5&\24\2\u0375\u037d\b/\1\2\u0376\u0377")
        buf.write("\7\t\2\2\u0377\u0378\b/\1\2\u0378\u0379\5&\24\2\u0379")
        buf.write("\u037a\b/\1\2\u037a\u037c\3\2\2\2\u037b\u0376\3\2\2\2")
        buf.write("\u037c\u037f\3\2\2\2\u037d\u037b\3\2\2\2\u037d\u037e\3")
        buf.write("\2\2\2\u037e\u0380\3\2\2\2\u037f\u037d\3\2\2\2\u0380\u0381")
        buf.write("\7\r\2\2\u0381\u0382\b/\1\2\u0382\u0383\b/\1\2\u0383]")
        buf.write("\3\2\2\2\u0384\u0385\7C\2\2\u0385\u0386\b\60\1\2\u0386")
        buf.write("\u0387\7\f\2\2\u0387\u0388\b\60\1\2\u0388\u0389\5&\24")
        buf.write("\2\u0389\u0391\b\60\1\2\u038a\u038b\7\t\2\2\u038b\u038c")
        buf.write("\b\60\1\2\u038c\u038d\5&\24\2\u038d\u038e\b\60\1\2\u038e")
        buf.write("\u0390\3\2\2\2\u038f\u038a\3\2\2\2\u0390\u0393\3\2\2\2")
        buf.write("\u0391\u038f\3\2\2\2\u0391\u0392\3\2\2\2\u0392\u0394\3")
        buf.write("\2\2\2\u0393\u0391\3\2\2\2\u0394\u0395\7\r\2\2\u0395\u0396")
        buf.write("\b\60\1\2\u0396\u0397\b\60\1\2\u0397_\3\2\2\2\u0398\u0399")
        buf.write("\7D\2\2\u0399\u039a\b\61\1\2\u039a\u039b\7\f\2\2\u039b")
        buf.write("\u039c\b\61\1\2\u039c\u039d\5&\24\2\u039d\u03a5\b\61\1")
        buf.write("\2\u039e\u039f\7\t\2\2\u039f\u03a0\b\61\1\2\u03a0\u03a1")
        buf.write("\5&\24\2\u03a1\u03a2\b\61\1\2\u03a2\u03a4\3\2\2\2\u03a3")
        buf.write("\u039e\3\2\2\2\u03a4\u03a7\3\2\2\2\u03a5\u03a3\3\2\2\2")
        buf.write("\u03a5\u03a6\3\2\2\2\u03a6\u03a8\3\2\2\2\u03a7\u03a5\3")
        buf.write("\2\2\2\u03a8\u03a9\7\r\2\2\u03a9\u03aa\b\61\1\2\u03aa")
        buf.write("\u03ab\b\61\1\2\u03aba\3\2\2\2\u03ac\u03ad\7E\2\2\u03ad")
        buf.write("\u03ae\b\62\1\2\u03ae\u03af\7\f\2\2\u03af\u03b0\b\62\1")
        buf.write("\2\u03b0\u03b1\5&\24\2\u03b1\u03b9\b\62\1\2\u03b2\u03b3")
        buf.write("\7\t\2\2\u03b3\u03b4\b\62\1\2\u03b4\u03b5\5&\24\2\u03b5")
        buf.write("\u03b6\b\62\1\2\u03b6\u03b8\3\2\2\2\u03b7\u03b2\3\2\2")
        buf.write("\2\u03b8\u03bb\3\2\2\2\u03b9\u03b7\3\2\2\2\u03b9\u03ba")
        buf.write("\3\2\2\2\u03ba\u03bc\3\2\2\2\u03bb\u03b9\3\2\2\2\u03bc")
        buf.write("\u03bd\7\r\2\2\u03bd\u03be\b\62\1\2\u03be\u03bf\b\62\1")
        buf.write("\2\u03bfc\3\2\2\2\u03c0\u03c1\7F\2\2\u03c1\u03c2\7\f\2")
        buf.write("\2\u03c2\u03c3\5&\24\2\u03c3\u03c4\7\t\2\2\u03c4\u03c5")
        buf.write("\7e\2\2\u03c5\u03c6\7\r\2\2\u03c6e\3\2\2\2\u03c7\u03c8")
        buf.write("\7G\2\2\u03c8\u03c9\b\64\1\2\u03c9\u03ca\7\f\2\2\u03ca")
        buf.write("\u03cb\b\64\1\2\u03cb\u03cc\5&\24\2\u03cc\u03d4\b\64\1")
        buf.write("\2\u03cd\u03ce\7\t\2\2\u03ce\u03cf\b\64\1\2\u03cf\u03d0")
        buf.write("\5&\24\2\u03d0\u03d1\b\64\1\2\u03d1\u03d3\3\2\2\2\u03d2")
        buf.write("\u03cd\3\2\2\2\u03d3\u03d6\3\2\2\2\u03d4\u03d2\3\2\2\2")
        buf.write("\u03d4\u03d5\3\2\2\2\u03d5\u03d7\3\2\2\2\u03d6\u03d4\3")
        buf.write("\2\2\2\u03d7\u03d8\7\r\2\2\u03d8\u03d9\b\64\1\2\u03d9")
        buf.write("\u03da\b\64\1\2\u03dag\3\2\2\2\u03db\u03dc\7H\2\2\u03dc")
        buf.write("\u03dd\7\f\2\2\u03dd\u03de\5&\24\2\u03de\u03df\7\r\2\2")
        buf.write("\u03dfi\3\2\2\2\u03e0\u03e1\7I\2\2\u03e1\u03e2\7\f\2\2")
        buf.write("\u03e2\u03e3\5&\24\2\u03e3\u03e4\7\r\2\2\u03e4k\3\2\2")
        buf.write("\2\u03e5\u03e6\7J\2\2\u03e6\u03e7\b\67\1\2\u03e7\u03e8")
        buf.write("\7\f\2\2\u03e8\u03e9\b\67\1\2\u03e9\u03ea\5&\24\2\u03ea")
        buf.write("\u03f2\b\67\1\2\u03eb\u03ec\7\t\2\2\u03ec\u03ed\b\67\1")
        buf.write("\2\u03ed\u03ee\5&\24\2\u03ee\u03ef\b\67\1\2\u03ef\u03f1")
        buf.write("\3\2\2\2\u03f0\u03eb\3\2\2\2\u03f1\u03f4\3\2\2\2\u03f2")
        buf.write("\u03f0\3\2\2\2\u03f2\u03f3\3\2\2\2\u03f3\u03f5\3\2\2\2")
        buf.write("\u03f4\u03f2\3\2\2\2\u03f5\u03f6\7\r\2\2\u03f6\u03f7\b")
        buf.write("\67\1\2\u03f7\u03f8\b\67\1\2\u03f8m\3\2\2\2\u03f9\u03fa")
        buf.write("\7K\2\2\u03fa\u03fb\7\f\2\2\u03fb\u03fc\5&\24\2\u03fc")
        buf.write("\u03fd\7\t\2\2\u03fd\u03fe\7j\2\2\u03fe\u03ff\7\r\2\2")
        buf.write("\u03ff\u0408\3\2\2\2\u0400\u0401\7K\2\2\u0401\u0402\7")
        buf.write("\f\2\2\u0402\u0403\5&\24\2\u0403\u0404\7\t\2\2\u0404\u0405")
        buf.write("\7k\2\2\u0405\u0406\7\r\2\2\u0406\u0408\3\2\2\2\u0407")
        buf.write("\u03f9\3\2\2\2\u0407\u0400\3\2\2\2\u0408o\3\2\2\2\u0409")
        buf.write("\u040a\7L\2\2\u040a\u040b\b9\1\2\u040b\u040c\7\f\2\2\u040c")
        buf.write("\u040d\b9\1\2\u040d\u040e\5&\24\2\u040e\u0416\b9\1\2\u040f")
        buf.write("\u0410\7\t\2\2\u0410\u0411\b9\1\2\u0411\u0412\5&\24\2")
        buf.write("\u0412\u0413\b9\1\2\u0413\u0415\3\2\2\2\u0414\u040f\3")
        buf.write("\2\2\2\u0415\u0418\3\2\2\2\u0416\u0414\3\2\2\2\u0416\u0417")
        buf.write("\3\2\2\2\u0417\u0419\3\2\2\2\u0418\u0416\3\2\2\2\u0419")
        buf.write("\u041a\7\r\2\2\u041a\u041b\b9\1\2\u041b\u041c\b9\1\2\u041c")
        buf.write("q\3\2\2\2\u041d\u041e\7M\2\2\u041e\u041f\b:\1\2\u041f")
        buf.write("\u0420\7\f\2\2\u0420\u0421\b:\1\2\u0421\u0422\5&\24\2")
        buf.write("\u0422\u042a\b:\1\2\u0423\u0424\7\t\2\2\u0424\u0425\b")
        buf.write(":\1\2\u0425\u0426\5&\24\2\u0426\u0427\b:\1\2\u0427\u0429")
        buf.write("\3\2\2\2\u0428\u0423\3\2\2\2\u0429\u042c\3\2\2\2\u042a")
        buf.write("\u0428\3\2\2\2\u042a\u042b\3\2\2\2\u042b\u042d\3\2\2\2")
        buf.write("\u042c\u042a\3\2\2\2\u042d\u042e\7\r\2\2\u042e\u042f\b")
        buf.write(":\1\2\u042f\u0430\b:\1\2\u0430s\3\2\2\2\u0431\u0432\7")
        buf.write("N\2\2\u0432\u0433\7\f\2\2\u0433\u0434\t\3\2\2\u0434\u0435")
        buf.write("\7\r\2\2\u0435u\3\2\2\2\u0436\u0437\7O\2\2\u0437\u0438")
        buf.write("\b<\1\2\u0438\u0439\7\f\2\2\u0439\u043a\b<\1\2\u043a\u043b")
        buf.write("\5&\24\2\u043b\u0443\b<\1\2\u043c\u043d\7\t\2\2\u043d")
        buf.write("\u043e\b<\1\2\u043e\u043f\5&\24\2\u043f\u0440\b<\1\2\u0440")
        buf.write("\u0442\3\2\2\2\u0441\u043c\3\2\2\2\u0442\u0445\3\2\2\2")
        buf.write("\u0443\u0441\3\2\2\2\u0443\u0444\3\2\2\2\u0444\u0446\3")
        buf.write("\2\2\2\u0445\u0443\3\2\2\2\u0446\u0447\7\r\2\2\u0447\u0448")
        buf.write("\b<\1\2\u0448\u0449\b<\1\2\u0449w\3\2\2\2\u044a\u044b")
        buf.write("\7P\2\2\u044b\u044c\b=\1\2\u044c\u044d\7\f\2\2\u044d\u044e")
        buf.write("\b=\1\2\u044e\u044f\5&\24\2\u044f\u0457\b=\1\2\u0450\u0451")
        buf.write("\7\t\2\2\u0451\u0452\b=\1\2\u0452\u0453\5&\24\2\u0453")
        buf.write("\u0454\b=\1\2\u0454\u0456\3\2\2\2\u0455\u0450\3\2\2\2")
        buf.write("\u0456\u0459\3\2\2\2\u0457\u0455\3\2\2\2\u0457\u0458\3")
        buf.write("\2\2\2\u0458\u045a\3\2\2\2\u0459\u0457\3\2\2\2\u045a\u045b")
        buf.write("\7\r\2\2\u045b\u045c\b=\1\2\u045c\u045d\b=\1\2\u045dy")
        buf.write("\3\2\2\2\u045e\u045f\7Q\2\2\u045f\u0460\b>\1\2\u0460\u0461")
        buf.write("\7\f\2\2\u0461\u0462\b>\1\2\u0462\u0463\5&\24\2\u0463")
        buf.write("\u046b\b>\1\2\u0464\u0465\7\t\2\2\u0465\u0466\b>\1\2\u0466")
        buf.write("\u0467\5&\24\2\u0467\u0468\b>\1\2\u0468\u046a\3\2\2\2")
        buf.write("\u0469\u0464\3\2\2\2\u046a\u046d\3\2\2\2\u046b\u0469\3")
        buf.write("\2\2\2\u046b\u046c\3\2\2\2\u046c\u046e\3\2\2\2\u046d\u046b")
        buf.write("\3\2\2\2\u046e\u046f\7\r\2\2\u046f\u0470\b>\1\2\u0470")
        buf.write("\u0471\b>\1\2\u0471{\3\2\2\2\u0472\u0473\7R\2\2\u0473")
        buf.write("\u0474\b?\1\2\u0474\u0475\7\f\2\2\u0475\u0476\b?\1\2\u0476")
        buf.write("\u0477\5&\24\2\u0477\u047f\b?\1\2\u0478\u0479\7\t\2\2")
        buf.write("\u0479\u047a\b?\1\2\u047a\u047b\5&\24\2\u047b\u047c\b")
        buf.write("?\1\2\u047c\u047e\3\2\2\2\u047d\u0478\3\2\2\2\u047e\u0481")
        buf.write("\3\2\2\2\u047f\u047d\3\2\2\2\u047f\u0480\3\2\2\2\u0480")
        buf.write("\u0482\3\2\2\2\u0481\u047f\3\2\2\2\u0482\u0483\7\r\2\2")
        buf.write("\u0483\u0484\b?\1\2\u0484\u0485\b?\1\2\u0485}\3\2\2\2")
        buf.write("\u0486\u0487\7S\2\2\u0487\u0488\b@\1\2\u0488\u0489\7\f")
        buf.write("\2\2\u0489\u048a\b@\1\2\u048a\u048b\5&\24\2\u048b\u0493")
        buf.write("\b@\1\2\u048c\u048d\7\t\2\2\u048d\u048e\b@\1\2\u048e\u048f")
        buf.write("\5&\24\2\u048f\u0490\b@\1\2\u0490\u0492\3\2\2\2\u0491")
        buf.write("\u048c\3\2\2\2\u0492\u0495\3\2\2\2\u0493\u0491\3\2\2\2")
        buf.write("\u0493\u0494\3\2\2\2\u0494\u0496\3\2\2\2\u0495\u0493\3")
        buf.write("\2\2\2\u0496\u0497\7\r\2\2\u0497\u0498\b@\1\2\u0498\u0499")
        buf.write("\b@\1\2\u0499\177\3\2\2\2\u049a\u049b\7T\2\2\u049b\u049c")
        buf.write("\bA\1\2\u049c\u049d\7\f\2\2\u049d\u049e\bA\1\2\u049e\u049f")
        buf.write("\5&\24\2\u049f\u04a7\bA\1\2\u04a0\u04a1\7\t\2\2\u04a1")
        buf.write("\u04a2\bA\1\2\u04a2\u04a3\5&\24\2\u04a3\u04a4\bA\1\2\u04a4")
        buf.write("\u04a6\3\2\2\2\u04a5\u04a0\3\2\2\2\u04a6\u04a9\3\2\2\2")
        buf.write("\u04a7\u04a5\3\2\2\2\u04a7\u04a8\3\2\2\2\u04a8\u04aa\3")
        buf.write("\2\2\2\u04a9\u04a7\3\2\2\2\u04aa\u04ab\7\r\2\2\u04ab\u04ac")
        buf.write("\bA\1\2\u04ac\u04ad\bA\1\2\u04ad\u0081\3\2\2\2\u04ae\u04af")
        buf.write("\7U\2\2\u04af\u04b0\bB\1\2\u04b0\u04b1\7\f\2\2\u04b1\u04b2")
        buf.write("\bB\1\2\u04b2\u04b3\5&\24\2\u04b3\u04bb\bB\1\2\u04b4\u04b5")
        buf.write("\7\t\2\2\u04b5\u04b6\bB\1\2\u04b6\u04b7\5&\24\2\u04b7")
        buf.write("\u04b8\bB\1\2\u04b8\u04ba\3\2\2\2\u04b9\u04b4\3\2\2\2")
        buf.write("\u04ba\u04bd\3\2\2\2\u04bb\u04b9\3\2\2\2\u04bb\u04bc\3")
        buf.write("\2\2\2\u04bc\u04be\3\2\2\2\u04bd\u04bb\3\2\2\2\u04be\u04bf")
        buf.write("\7\r\2\2\u04bf\u04c0\bB\1\2\u04c0\u04c1\bB\1\2\u04c1\u0083")
        buf.write("\3\2\2\2\u04c2\u04c3\7V\2\2\u04c3\u04c4\bC\1\2\u04c4\u04c5")
        buf.write("\7\f\2\2\u04c5\u04c6\bC\1\2\u04c6\u04c7\5&\24\2\u04c7")
        buf.write("\u04cf\bC\1\2\u04c8\u04c9\7\t\2\2\u04c9\u04ca\bC\1\2\u04ca")
        buf.write("\u04cb\5&\24\2\u04cb\u04cc\bC\1\2\u04cc\u04ce\3\2\2\2")
        buf.write("\u04cd\u04c8\3\2\2\2\u04ce\u04d1\3\2\2\2\u04cf\u04cd\3")
        buf.write("\2\2\2\u04cf\u04d0\3\2\2\2\u04d0\u04d2\3\2\2\2\u04d1\u04cf")
        buf.write("\3\2\2\2\u04d2\u04d3\7\r\2\2\u04d3\u04d4\bC\1\2\u04d4")
        buf.write("\u04d5\bC\1\2\u04d5\u0085\3\2\2\2\u04d6\u04d7\7W\2\2\u04d7")
        buf.write("\u04d8\bD\1\2\u04d8\u04d9\7\f\2\2\u04d9\u04da\bD\1\2\u04da")
        buf.write("\u04db\5&\24\2\u04db\u04e3\bD\1\2\u04dc\u04dd\7\t\2\2")
        buf.write("\u04dd\u04de\bD\1\2\u04de\u04df\5&\24\2\u04df\u04e0\b")
        buf.write("D\1\2\u04e0\u04e2\3\2\2\2\u04e1\u04dc\3\2\2\2\u04e2\u04e5")
        buf.write("\3\2\2\2\u04e3\u04e1\3\2\2\2\u04e3\u04e4\3\2\2\2\u04e4")
        buf.write("\u04e6\3\2\2\2\u04e5\u04e3\3\2\2\2\u04e6\u04e7\7\r\2\2")
        buf.write("\u04e7\u04e8\bD\1\2\u04e8\u04e9\bD\1\2\u04e9\u0087\3\2")
        buf.write("\2\2\u04ea\u04eb\7X\2\2\u04eb\u04ee\7\f\2\2\u04ec\u04ef")
        buf.write("\7h\2\2\u04ed\u04ef\5\n\6\2\u04ee\u04ec\3\2\2\2\u04ee")
        buf.write("\u04ed\3\2\2\2\u04ef\u04f0\3\2\2\2\u04f0\u04f1\7\r\2\2")
        buf.write("\u04f1\u0089\3\2\2\2\u04f2\u04f3\7Y\2\2\u04f3\u04f4\b")
        buf.write("F\1\2\u04f4\u04f5\7\f\2\2\u04f5\u04f6\bF\1\2\u04f6\u04f7")
        buf.write("\5&\24\2\u04f7\u04ff\bF\1\2\u04f8\u04f9\7\t\2\2\u04f9")
        buf.write("\u04fa\bF\1\2\u04fa\u04fb\5&\24\2\u04fb\u04fc\bF\1\2\u04fc")
        buf.write("\u04fe\3\2\2\2\u04fd\u04f8\3\2\2\2\u04fe\u0501\3\2\2\2")
        buf.write("\u04ff\u04fd\3\2\2\2\u04ff\u0500\3\2\2\2\u0500\u0502\3")
        buf.write("\2\2\2\u0501\u04ff\3\2\2\2\u0502\u0503\7\r\2\2\u0503\u0504")
        buf.write("\bF\1\2\u0504\u0505\bF\1\2\u0505\u008b\3\2\2\2\u0506\u0507")
        buf.write("\7Z\2\2\u0507\u0508\bG\1\2\u0508\u0509\7\f\2\2\u0509\u050a")
        buf.write("\bG\1\2\u050a\u050b\5&\24\2\u050b\u0513\bG\1\2\u050c\u050d")
        buf.write("\7\t\2\2\u050d\u050e\bG\1\2\u050e\u050f\5&\24\2\u050f")
        buf.write("\u0510\bG\1\2\u0510\u0512\3\2\2\2\u0511\u050c\3\2\2\2")
        buf.write("\u0512\u0515\3\2\2\2\u0513\u0511\3\2\2\2\u0513\u0514\3")
        buf.write("\2\2\2\u0514\u0516\3\2\2\2\u0515\u0513\3\2\2\2\u0516\u0517")
        buf.write("\7\r\2\2\u0517\u0518\bG\1\2\u0518\u0519\bG\1\2\u0519\u008d")
        buf.write("\3\2\2\2\u051a\u051b\7[\2\2\u051b\u051c\bH\1\2\u051c\u051d")
        buf.write("\7\f\2\2\u051d\u051e\bH\1\2\u051e\u051f\5&\24\2\u051f")
        buf.write("\u0527\bH\1\2\u0520\u0521\7\t\2\2\u0521\u0522\bH\1\2\u0522")
        buf.write("\u0523\5&\24\2\u0523\u0524\bH\1\2\u0524\u0526\3\2\2\2")
        buf.write("\u0525\u0520\3\2\2\2\u0526\u0529\3\2\2\2\u0527\u0525\3")
        buf.write("\2\2\2\u0527\u0528\3\2\2\2\u0528\u052a\3\2\2\2\u0529\u0527")
        buf.write("\3\2\2\2\u052a\u052b\7\r\2\2\u052b\u052c\bH\1\2\u052c")
        buf.write("\u052d\bH\1\2\u052d\u008f\3\2\2\2\u052e\u052f\7\\\2\2")
        buf.write("\u052f\u0530\bI\1\2\u0530\u0531\7\f\2\2\u0531\u0532\b")
        buf.write("I\1\2\u0532\u0533\5&\24\2\u0533\u053b\bI\1\2\u0534\u0535")
        buf.write("\7\t\2\2\u0535\u0536\bI\1\2\u0536\u0537\5&\24\2\u0537")
        buf.write("\u0538\bI\1\2\u0538\u053a\3\2\2\2\u0539\u0534\3\2\2\2")
        buf.write("\u053a\u053d\3\2\2\2\u053b\u0539\3\2\2\2\u053b\u053c\3")
        buf.write("\2\2\2\u053c\u053e\3\2\2\2\u053d\u053b\3\2\2\2\u053e\u053f")
        buf.write("\7\r\2\2\u053f\u0540\bI\1\2\u0540\u0541\bI\1\2\u0541\u0091")
        buf.write("\3\2\2\2\u0542\u0543\7]\2\2\u0543\u0544\bJ\1\2\u0544\u0545")
        buf.write("\7\f\2\2\u0545\u0546\bJ\1\2\u0546\u0547\5&\24\2\u0547")
        buf.write("\u054f\bJ\1\2\u0548\u0549\7\t\2\2\u0549\u054a\bJ\1\2\u054a")
        buf.write("\u054b\5&\24\2\u054b\u054c\bJ\1\2\u054c\u054e\3\2\2\2")
        buf.write("\u054d\u0548\3\2\2\2\u054e\u0551\3\2\2\2\u054f\u054d\3")
        buf.write("\2\2\2\u054f\u0550\3\2\2\2\u0550\u0552\3\2\2\2\u0551\u054f")
        buf.write("\3\2\2\2\u0552\u0553\7\r\2\2\u0553\u0554\bJ\1\2\u0554")
        buf.write("\u0555\bJ\1\2\u0555\u0093\3\2\2\2O\u009d\u00a3\u00ae\u00bc")
        buf.write("\u00d4\u00d9\u00e8\u00ee\u00fb\u010d\u0110\u0116\u0129")
        buf.write("\u0134\u0145\u015c\u015f\u016f\u0172\u0188\u018b\u0191")
        buf.write("\u01c5\u01cd\u01cf\u01d4\u01da\u01e9\u01eb\u01f0\u01f6")
        buf.write("\u01ff\u0201\u0206\u020c\u0215\u0217\u021c\u0222\u022c")
        buf.write("\u022f\u0249\u025c\u0270\u0284\u0298\u02ac\u02d3\u02e7")
        buf.write("\u02fb\u030f\u0323\u0337\u037d\u0391\u03a5\u03b9\u03d4")
        buf.write("\u03f2\u0407\u0416\u042a\u0443\u0457\u046b\u047f\u0493")
        buf.write("\u04a7\u04bb\u04cf\u04e3\u04ee\u04ff\u0513\u0527\u053b")
        buf.write("\u054f")
        return buf.getvalue()


class NmodParser ( Parser ):

    grammarFileName = "Nmod.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'nmod'", "'main'", "'var'", "'.'", "';'", 
                     "':'", "','", "'['", "']'", "'('", "')'", "'{'", "'}'", 
                     "'<-'", "'func'", "'error'", "'null'", "'void'", "'int'", 
                     "'float'", "'char'", "'if'", "'else'", "'while'", "'read'", 
                     "'print'", "'='", "'and'", "'or'", "'not'", "'>'", 
                     "'>='", "'<'", "'<='", "'equal'", "'+'", "'-'", "'*'", 
                     "'/'", "'%'", "'return'", "'rnom'", "'rexp'", "'rgamma'", 
                     "'points'", "'lines'", "'text'", "'barplot'", "'dotchart'", 
                     "'piechart'", "'xyplot'", "'densityplot'", "'histogram'", 
                     "'sin'", "'cos'", "'tan'", "'asin'", "'acos'", "'atan'", 
                     "'atan2'", "'log'", "'log10'", "'exp'", "'f_max'", 
                     "'f_min'", "'f_range'", "'f_sum'", "'diff'", "'prod'", 
                     "'mean'", "'median'", "'quantile'", "'rank'", "'variance'", 
                     "'sd'", "'cor'", "'cov'", "'f_round'", "'transpose'", 
                     "'diagonal'", "'ginv'", "'rowsum'", "'colsum'", "'load'", 
                     "'data'", "'library'", "'rpois'", "'rweibull'", "'rbinom'", 
                     "'rgeom'", "'runif'", "'pearson'", "'kendall'", "'spearman'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'0'", "'1'" ]

    symbolicNames = [ "<INVALID>", "PROGRAM", "MAIN", "VARIABLES", "PERIOD", 
                      "SEMICOLON", "COLON", "COMMA", "LBRACKET", "RBRACKET", 
                      "LPRACKET", "RPRACKET", "LCRACKET", "RCRACKET", "ISFUNCTION", 
                      "FUNC", "ERROR", "NULL", "VOID", "INT", "FLOAT", "CHAR", 
                      "IF", "ELSE", "WHILE", "READ", "PRINT", "EQUALS", 
                      "AND", "OR", "NOT", "GREATERTHAN", "GREATEROR", "LESSERTHAN", 
                      "LESSEROR", "EQUAL", "PLUS", "MINUS", "TIMES", "DIVISION", 
                      "MODULE", "RETURN", "RNOM", "REXP", "RGAMMA", "POINTS", 
                      "LINES", "TEXT", "BARPLOT", "DOTCHART", "PIECHART", 
                      "XYPLOT", "DENSITYPLOT", "HISTOGRAM", "SIN", "COS", 
                      "TAN", "ASIN", "ACOS", "ATAN", "ATAN2", "LOG", "LOG10", 
                      "EXPONENT", "MAX", "MIN", "RANGE", "SUM", "DIFF", 
                      "PROD", "MEAN", "MEDIAN", "QUANTILE", "RANK", "VARIANCE", 
                      "SD", "COR", "COV", "ROUND", "TRANSPOSE", "DIAGONAL", 
                      "GINV", "ROWSUM", "COLSUM", "LOAD", "DATA", "LIBRARY", 
                      "RPOIS", "RWEIBULL", "RBINOM", "RGEOM", "RUNIF", "PEARSON", 
                      "KENDALL", "SPEARMAN", "WHITESPACE", "NEWLINE", "LINECOMMENT", 
                      "MULTICOMMENT", "CTEI", "CTEF", "CTEC", "STRING", 
                      "ID", "ZERO", "ONE" ]

    RULE_program = 0
    RULE_f_type = 1
    RULE_variables = 2
    RULE_id_decl = 3
    RULE_id_access = 4
    RULE_modules = 5
    RULE_main = 6
    RULE_block = 7
    RULE_statute = 8
    RULE_assignment = 9
    RULE_condition = 10
    RULE_cicle = 11
    RULE_reading = 12
    RULE_writing = 13
    RULE_call_module = 14
    RULE_special_function = 15
    RULE_expression = 16
    RULE_sub_exp = 17
    RULE_exp = 18
    RULE_term = 19
    RULE_factor = 20
    RULE_var_cte = 21
    RULE_r_return = 22
    RULE_rnom = 23
    RULE_rexp = 24
    RULE_rgamma = 25
    RULE_points = 26
    RULE_lines = 27
    RULE_text = 28
    RULE_barplot = 29
    RULE_dotchart = 30
    RULE_piechart = 31
    RULE_xyplot = 32
    RULE_densityplot = 33
    RULE_histogram = 34
    RULE_sin = 35
    RULE_cos = 36
    RULE_tan = 37
    RULE_asin = 38
    RULE_acos = 39
    RULE_atan = 40
    RULE_atan2 = 41
    RULE_log = 42
    RULE_log10 = 43
    RULE_exponent = 44
    RULE_f_max = 45
    RULE_f_min = 46
    RULE_f_range = 47
    RULE_f_sum = 48
    RULE_diff = 49
    RULE_prod = 50
    RULE_mean = 51
    RULE_median = 52
    RULE_quantile = 53
    RULE_rank = 54
    RULE_var = 55
    RULE_sd = 56
    RULE_cor = 57
    RULE_cov = 58
    RULE_f_round = 59
    RULE_transpose = 60
    RULE_diagonal = 61
    RULE_ginv = 62
    RULE_rowsum = 63
    RULE_colsum = 64
    RULE_load = 65
    RULE_data = 66
    RULE_library = 67
    RULE_rpois = 68
    RULE_rweibull = 69
    RULE_rbinom = 70
    RULE_rgeom = 71
    RULE_runif = 72

    ruleNames =  [ "program", "f_type", "variables", "id_decl", "id_access", 
                   "modules", "main", "block", "statute", "assignment", 
                   "condition", "cicle", "reading", "writing", "call_module", 
                   "special_function", "expression", "sub_exp", "exp", "term", 
                   "factor", "var_cte", "r_return", "rnom", "rexp", "rgamma", 
                   "points", "lines", "text", "barplot", "dotchart", "piechart", 
                   "xyplot", "densityplot", "histogram", "sin", "cos", "tan", 
                   "asin", "acos", "atan", "atan2", "log", "log10", "exponent", 
                   "f_max", "f_min", "f_range", "f_sum", "diff", "prod", 
                   "mean", "median", "quantile", "rank", "var", "sd", "cor", 
                   "cov", "f_round", "transpose", "diagonal", "ginv", "rowsum", 
                   "colsum", "load", "data", "library", "rpois", "rweibull", 
                   "rbinom", "rgeom", "runif" ]

    EOF = Token.EOF
    PROGRAM=1
    MAIN=2
    VARIABLES=3
    PERIOD=4
    SEMICOLON=5
    COLON=6
    COMMA=7
    LBRACKET=8
    RBRACKET=9
    LPRACKET=10
    RPRACKET=11
    LCRACKET=12
    RCRACKET=13
    ISFUNCTION=14
    FUNC=15
    ERROR=16
    NULL=17
    VOID=18
    INT=19
    FLOAT=20
    CHAR=21
    IF=22
    ELSE=23
    WHILE=24
    READ=25
    PRINT=26
    EQUALS=27
    AND=28
    OR=29
    NOT=30
    GREATERTHAN=31
    GREATEROR=32
    LESSERTHAN=33
    LESSEROR=34
    EQUAL=35
    PLUS=36
    MINUS=37
    TIMES=38
    DIVISION=39
    MODULE=40
    RETURN=41
    RNOM=42
    REXP=43
    RGAMMA=44
    POINTS=45
    LINES=46
    TEXT=47
    BARPLOT=48
    DOTCHART=49
    PIECHART=50
    XYPLOT=51
    DENSITYPLOT=52
    HISTOGRAM=53
    SIN=54
    COS=55
    TAN=56
    ASIN=57
    ACOS=58
    ATAN=59
    ATAN2=60
    LOG=61
    LOG10=62
    EXPONENT=63
    MAX=64
    MIN=65
    RANGE=66
    SUM=67
    DIFF=68
    PROD=69
    MEAN=70
    MEDIAN=71
    QUANTILE=72
    RANK=73
    VARIANCE=74
    SD=75
    COR=76
    COV=77
    ROUND=78
    TRANSPOSE=79
    DIAGONAL=80
    GINV=81
    ROWSUM=82
    COLSUM=83
    LOAD=84
    DATA=85
    LIBRARY=86
    RPOIS=87
    RWEIBULL=88
    RBINOM=89
    RGEOM=90
    RUNIF=91
    PEARSON=92
    KENDALL=93
    SPEARMAN=94
    WHITESPACE=95
    NEWLINE=96
    LINECOMMENT=97
    MULTICOMMENT=98
    CTEI=99
    CTEF=100
    CTEC=101
    STRING=102
    ID=103
    ZERO=104
    ONE=105

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class ProgramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROGRAM(self):
            return self.getToken(NmodParser.PROGRAM, 0)

        def ID(self):
            return self.getToken(NmodParser.ID, 0)

        def COLON(self):
            return self.getToken(NmodParser.COLON, 0)

        def main(self):
            return self.getTypedRuleContext(NmodParser.MainContext,0)


        def variables(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.VariablesContext)
            else:
                return self.getTypedRuleContext(NmodParser.VariablesContext,i)


        def modules(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ModulesContext)
            else:
                return self.getTypedRuleContext(NmodParser.ModulesContext,i)


        def getRuleIndex(self):
            return NmodParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = NmodParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            c.initialGoto()
            self.state = 147
            self.match(NmodParser.PROGRAM)
            self.state = 148
            self.match(NmodParser.ID)
            c.localFunc = 'global'
            c.insertFunctionDirectory(c.localFunc, 'void')
            self.state = 151
            self.match(NmodParser.COLON)
            self.state = 155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.VARIABLES:
                self.state = 152
                self.variables()
                self.state = 157
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.ID:
                self.state = 158
                self.modules()
                self.state = 163
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 164
            self.main()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class F_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self._INT = None # Token
            self._FLOAT = None # Token
            self._CHAR = None # Token

        def INT(self):
            return self.getToken(NmodParser.INT, 0)

        def FLOAT(self):
            return self.getToken(NmodParser.FLOAT, 0)

        def CHAR(self):
            return self.getToken(NmodParser.CHAR, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_f_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterF_type" ):
                listener.enterF_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitF_type" ):
                listener.exitF_type(self)




    def f_type(self):

        localctx = NmodParser.F_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_f_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 172
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NmodParser.INT]:
                self.state = 166
                localctx._INT = self.match(NmodParser.INT)
                localctx.type = (None if localctx._INT is None else localctx._INT.text)
                pass
            elif token in [NmodParser.FLOAT]:
                self.state = 168
                localctx._FLOAT = self.match(NmodParser.FLOAT)
                localctx.type = (None if localctx._FLOAT is None else localctx._FLOAT.text)
                pass
            elif token in [NmodParser.CHAR]:
                self.state = 170
                localctx._CHAR = self.match(NmodParser.CHAR)
                localctx.type = (None if localctx._CHAR is None else localctx._CHAR.text)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._f_type = None # F_typeContext
            self._id_decl = None # Id_declContext

        def VARIABLES(self):
            return self.getToken(NmodParser.VARIABLES, 0)

        def f_type(self):
            return self.getTypedRuleContext(NmodParser.F_typeContext,0)


        def COLON(self):
            return self.getToken(NmodParser.COLON, 0)

        def id_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Id_declContext)
            else:
                return self.getTypedRuleContext(NmodParser.Id_declContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_variables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariables" ):
                listener.enterVariables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariables" ):
                listener.exitVariables(self)




    def variables(self):

        localctx = NmodParser.VariablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_variables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 174
            self.match(NmodParser.VARIABLES)
            self.state = 175
            localctx._f_type = self.f_type()
            c.localType = (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop)))
            self.state = 177
            self.match(NmodParser.COLON)
            self.state = 178
            localctx._id_decl = self.id_decl()
            c.insertVarTable(c.localFunc, (None if localctx._id_decl is None else self._input.getText((localctx._id_decl.start,localctx._id_decl.stop))), c.localType)
            self.state = 186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 180
                self.match(NmodParser.COMMA)
                self.state = 181
                localctx._id_decl = self.id_decl()
                c.insertVarTable(c.localFunc, (None if localctx._id_decl is None else self._input.getText((localctx._id_decl.start,localctx._id_decl.stop))), c.localType)
                self.state = 188
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Id_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._CTEI = None # Token

        def ID(self):
            return self.getToken(NmodParser.ID, 0)

        def LBRACKET(self):
            return self.getToken(NmodParser.LBRACKET, 0)

        def CTEI(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.CTEI)
            else:
                return self.getToken(NmodParser.CTEI, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COLON)
            else:
                return self.getToken(NmodParser.COLON, i)

        def RBRACKET(self):
            return self.getToken(NmodParser.RBRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_id_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_decl" ):
                listener.enterId_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_decl" ):
                listener.exitId_decl(self)




    def id_decl(self):

        localctx = NmodParser.Id_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_id_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 189
            self.match(NmodParser.ID)
            self.state = 215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NmodParser.LBRACKET:
                self.state = 190
                self.match(NmodParser.LBRACKET)
                c.initDimVar()
                self.state = 192
                localctx._CTEI = self.match(NmodParser.CTEI)
                c.insertConstant('int', (None if localctx._CTEI is None else localctx._CTEI.text))
                c.setDimLowBound((None if localctx._CTEI is None else localctx._CTEI.text))
                self.state = 195
                self.match(NmodParser.COLON)
                self.state = 196
                localctx._CTEI = self.match(NmodParser.CTEI)
                c.insertConstant('int', (None if localctx._CTEI is None else localctx._CTEI.text))
                c.setDimHighBound((None if localctx._CTEI is None else localctx._CTEI.text))
                self.state = 210
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NmodParser.COMMA:
                    self.state = 199
                    self.match(NmodParser.COMMA)
                    c.addDimension()
                    self.state = 201
                    localctx._CTEI = self.match(NmodParser.CTEI)
                    c.insertConstant('int', (None if localctx._CTEI is None else localctx._CTEI.text))
                    c.setDimLowBound((None if localctx._CTEI is None else localctx._CTEI.text))
                    self.state = 204
                    self.match(NmodParser.COLON)
                    self.state = 205
                    localctx._CTEI = self.match(NmodParser.CTEI)
                    c.insertConstant('int', (None if localctx._CTEI is None else localctx._CTEI.text))
                    c.setDimHighBound((None if localctx._CTEI is None else localctx._CTEI.text))
                    self.state = 212
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 213
                self.match(NmodParser.RBRACKET)
                c.calculateK()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Id_accessContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._ID = None # Token

        def ID(self):
            return self.getToken(NmodParser.ID, 0)

        def LBRACKET(self):
            return self.getToken(NmodParser.LBRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RBRACKET(self):
            return self.getToken(NmodParser.RBRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_id_access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_access" ):
                listener.enterId_access(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_access" ):
                listener.exitId_access(self)




    def id_access(self):

        localctx = NmodParser.Id_accessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_id_access)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 217
            localctx._ID = self.match(NmodParser.ID)
            c.insertStackOperand((None if localctx._ID is None else localctx._ID.text))
            self.state = 236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NmodParser.LBRACKET:
                self.state = 219
                self.match(NmodParser.LBRACKET)
                c.dimVarBegin()
                self.state = 221
                self.exp()
                c.generateDimVarQuad()
                self.state = 230
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NmodParser.COMMA:
                    self.state = 223
                    self.match(NmodParser.COMMA)
                    c.nextDimension((None if localctx._ID is None else localctx._ID.text))
                    self.state = 225
                    self.exp()
                    c.generateDimVarQuad()
                    self.state = 232
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 233
                self.match(NmodParser.RBRACKET)
                c.dimVarEnd((None if localctx._ID is None else localctx._ID.text))


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModulesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._ID = None # Token
            self._f_type = None # F_typeContext

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.ID)
            else:
                return self.getToken(NmodParser.ID, i)

        def ISFUNCTION(self):
            return self.getToken(NmodParser.ISFUNCTION, 0)

        def FUNC(self):
            return self.getToken(NmodParser.FUNC, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def block(self):
            return self.getTypedRuleContext(NmodParser.BlockContext,0)


        def VOID(self):
            return self.getToken(NmodParser.VOID, 0)

        def f_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.F_typeContext)
            else:
                return self.getTypedRuleContext(NmodParser.F_typeContext,i)


        def variables(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.VariablesContext)
            else:
                return self.getTypedRuleContext(NmodParser.VariablesContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_modules

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModules" ):
                listener.enterModules(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModules" ):
                listener.exitModules(self)




    def modules(self):

        localctx = NmodParser.ModulesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_modules)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            localctx._ID = self.match(NmodParser.ID)
            c.localFunc = (None if localctx._ID is None else localctx._ID.text)
            self.state = 240
            self.match(NmodParser.ISFUNCTION)
            self.state = 249
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NmodParser.VOID]:
                self.state = 241
                self.match(NmodParser.VOID)
                c.localType = 'void'
                c.insertFunctionDirectory((None if localctx._ID is None else localctx._ID.text), 'void')
                pass
            elif token in [NmodParser.INT, NmodParser.FLOAT, NmodParser.CHAR]:
                self.state = 244
                localctx._f_type = self.f_type()
                c.localType = (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop)))
                c.insertFunctionDirectory((None if localctx._ID is None else localctx._ID.text), (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop))))
                c.insertVarTable('global', (None if localctx._ID is None else localctx._ID.text), (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop))))
                pass
            else:
                raise NoViableAltException(self)

            self.state = 251
            self.match(NmodParser.FUNC)
            self.state = 252
            self.match(NmodParser.LPRACKET)
            self.state = 270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NmodParser.INT) | (1 << NmodParser.FLOAT) | (1 << NmodParser.CHAR))) != 0):
                self.state = 253
                localctx._f_type = self.f_type()
                c.localType = (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop)))
                self.state = 255
                localctx._ID = self.match(NmodParser.ID)
                c.insertVarTable(c.localFunc, (None if localctx._ID is None else localctx._ID.text), (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop))))
                c.insertParam(c.localFunc, (None if localctx._ID is None else localctx._ID.text), (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop))))
                self.state = 267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NmodParser.COMMA:
                    self.state = 258
                    self.match(NmodParser.COMMA)
                    self.state = 259
                    localctx._f_type = self.f_type()
                    c.localType = (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop)))
                    self.state = 261
                    localctx._ID = self.match(NmodParser.ID)
                    c.insertVarTable(c.localFunc, (None if localctx._ID is None else localctx._ID.text), (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop))))
                    c.insertParam(c.localFunc, (None if localctx._ID is None else localctx._ID.text), (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop))))
                    self.state = 269
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 272
            self.match(NmodParser.RPRACKET)
            self.state = 276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.VARIABLES:
                self.state = 273
                self.variables()
                self.state = 278
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            c.moduleBegin()
            self.state = 280
            self.block()
            c.moduleEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MainContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAIN(self):
            return self.getToken(NmodParser.MAIN, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def block(self):
            return self.getTypedRuleContext(NmodParser.BlockContext,0)


        def getRuleIndex(self):
            return NmodParser.RULE_main

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMain" ):
                listener.enterMain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMain" ):
                listener.exitMain(self)




    def main(self):

        localctx = NmodParser.MainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_main)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self.match(NmodParser.MAIN)
            c.localFunc = 'global'
            c.mainBegin()
            self.state = 286
            self.match(NmodParser.LPRACKET)
            self.state = 287
            self.match(NmodParser.RPRACKET)
            self.state = 288
            self.block()
            c.mainEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCRACKET(self):
            return self.getToken(NmodParser.LCRACKET, 0)

        def RCRACKET(self):
            return self.getToken(NmodParser.RCRACKET, 0)

        def statute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.StatuteContext)
            else:
                return self.getTypedRuleContext(NmodParser.StatuteContext,i)


        def getRuleIndex(self):
            return NmodParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = NmodParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self.match(NmodParser.LCRACKET)
            self.state = 295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NmodParser.IF) | (1 << NmodParser.WHILE) | (1 << NmodParser.READ) | (1 << NmodParser.PRINT) | (1 << NmodParser.RETURN) | (1 << NmodParser.RNOM) | (1 << NmodParser.REXP) | (1 << NmodParser.RGAMMA) | (1 << NmodParser.POINTS) | (1 << NmodParser.LINES) | (1 << NmodParser.TEXT) | (1 << NmodParser.BARPLOT) | (1 << NmodParser.PIECHART) | (1 << NmodParser.XYPLOT) | (1 << NmodParser.DENSITYPLOT) | (1 << NmodParser.HISTOGRAM) | (1 << NmodParser.SIN) | (1 << NmodParser.COS) | (1 << NmodParser.TAN) | (1 << NmodParser.ASIN) | (1 << NmodParser.ACOS) | (1 << NmodParser.ATAN) | (1 << NmodParser.ATAN2) | (1 << NmodParser.LOG) | (1 << NmodParser.LOG10) | (1 << NmodParser.EXPONENT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NmodParser.MAX - 64)) | (1 << (NmodParser.MIN - 64)) | (1 << (NmodParser.RANGE - 64)) | (1 << (NmodParser.SUM - 64)) | (1 << (NmodParser.DIFF - 64)) | (1 << (NmodParser.PROD - 64)) | (1 << (NmodParser.MEAN - 64)) | (1 << (NmodParser.MEDIAN - 64)) | (1 << (NmodParser.QUANTILE - 64)) | (1 << (NmodParser.RANK - 64)) | (1 << (NmodParser.VARIANCE - 64)) | (1 << (NmodParser.SD - 64)) | (1 << (NmodParser.COR - 64)) | (1 << (NmodParser.COV - 64)) | (1 << (NmodParser.ROUND - 64)) | (1 << (NmodParser.TRANSPOSE - 64)) | (1 << (NmodParser.DIAGONAL - 64)) | (1 << (NmodParser.GINV - 64)) | (1 << (NmodParser.ROWSUM - 64)) | (1 << (NmodParser.COLSUM - 64)) | (1 << (NmodParser.LOAD - 64)) | (1 << (NmodParser.DATA - 64)) | (1 << (NmodParser.LIBRARY - 64)) | (1 << (NmodParser.RPOIS - 64)) | (1 << (NmodParser.RWEIBULL - 64)) | (1 << (NmodParser.RBINOM - 64)) | (1 << (NmodParser.RGEOM - 64)) | (1 << (NmodParser.RUNIF - 64)) | (1 << (NmodParser.ID - 64)))) != 0):
                self.state = 292
                self.statute()
                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 298
            self.match(NmodParser.RCRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatuteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self):
            return self.getTypedRuleContext(NmodParser.AssignmentContext,0)


        def condition(self):
            return self.getTypedRuleContext(NmodParser.ConditionContext,0)


        def reading(self):
            return self.getTypedRuleContext(NmodParser.ReadingContext,0)


        def writing(self):
            return self.getTypedRuleContext(NmodParser.WritingContext,0)


        def cicle(self):
            return self.getTypedRuleContext(NmodParser.CicleContext,0)


        def call_module(self):
            return self.getTypedRuleContext(NmodParser.Call_moduleContext,0)


        def getRuleIndex(self):
            return NmodParser.RULE_statute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatute" ):
                listener.enterStatute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatute" ):
                listener.exitStatute(self)




    def statute(self):

        localctx = NmodParser.StatuteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_statute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 300
                self.assignment()
                pass

            elif la_ == 2:
                self.state = 301
                self.condition()
                pass

            elif la_ == 3:
                self.state = 302
                self.reading()
                pass

            elif la_ == 4:
                self.state = 303
                self.writing()
                pass

            elif la_ == 5:
                self.state = 304
                self.cicle()
                pass

            elif la_ == 6:
                self.state = 305
                self.call_module()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._EQUALS = None # Token

        def id_access(self):
            return self.getTypedRuleContext(NmodParser.Id_accessContext,0)


        def EQUALS(self):
            return self.getToken(NmodParser.EQUALS, 0)

        def exp(self):
            return self.getTypedRuleContext(NmodParser.ExpContext,0)


        def getRuleIndex(self):
            return NmodParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = NmodParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self.id_access()
            self.state = 309
            localctx._EQUALS = self.match(NmodParser.EQUALS)
            c.insertStackOperator((None if localctx._EQUALS is None else localctx._EQUALS.text))
            self.state = 311
            self.exp()
            c.generateAssignmentQuad()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(NmodParser.IF, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.BlockContext)
            else:
                return self.getTypedRuleContext(NmodParser.BlockContext,i)


        def ELSE(self):
            return self.getToken(NmodParser.ELSE, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)




    def condition(self):

        localctx = NmodParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_condition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.match(NmodParser.IF)
            self.state = 315
            self.match(NmodParser.LPRACKET)
            self.state = 316
            self.expression()
            self.state = 317
            self.match(NmodParser.RPRACKET)
            c.conditionStart('condition')
            self.state = 319
            self.block()
            self.state = 323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NmodParser.ELSE:
                self.state = 320
                self.match(NmodParser.ELSE)
                c.conditionElse()
                self.state = 322
                self.block()


            c.conditionEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CicleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(NmodParser.WHILE, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def block(self):
            return self.getTypedRuleContext(NmodParser.BlockContext,0)


        def getRuleIndex(self):
            return NmodParser.RULE_cicle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCicle" ):
                listener.enterCicle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCicle" ):
                listener.exitCicle(self)




    def cicle(self):

        localctx = NmodParser.CicleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_cicle)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self.match(NmodParser.WHILE)
            c.insertStackJump(c.quadCount)
            self.state = 329
            self.match(NmodParser.LPRACKET)
            self.state = 330
            self.expression()
            self.state = 331
            self.match(NmodParser.RPRACKET)
            c.conditionStart('cicle')
            self.state = 333
            self.block()
            c.cicleEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReadingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._STRING = None # Token

        def READ(self):
            return self.getToken(NmodParser.READ, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def STRING(self):
            return self.getToken(NmodParser.STRING, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_reading

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReading" ):
                listener.enterReading(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReading" ):
                listener.exitReading(self)




    def reading(self):

        localctx = NmodParser.ReadingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_reading)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.match(NmodParser.READ)
            self.state = 337
            self.match(NmodParser.LPRACKET)
            self.state = 349
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NmodParser.STRING]:
                self.state = 338
                localctx._STRING = self.match(NmodParser.STRING)
                c.insertStackOperand((None if localctx._STRING is None else localctx._STRING.text))
                c.insertStackType('char[]')
                pass
            elif token in [NmodParser.LPRACKET, NmodParser.PLUS, NmodParser.MINUS, NmodParser.RETURN, NmodParser.RNOM, NmodParser.REXP, NmodParser.RGAMMA, NmodParser.POINTS, NmodParser.LINES, NmodParser.TEXT, NmodParser.BARPLOT, NmodParser.PIECHART, NmodParser.XYPLOT, NmodParser.DENSITYPLOT, NmodParser.HISTOGRAM, NmodParser.SIN, NmodParser.COS, NmodParser.TAN, NmodParser.ASIN, NmodParser.ACOS, NmodParser.ATAN, NmodParser.ATAN2, NmodParser.LOG, NmodParser.LOG10, NmodParser.EXPONENT, NmodParser.MAX, NmodParser.MIN, NmodParser.RANGE, NmodParser.SUM, NmodParser.DIFF, NmodParser.PROD, NmodParser.MEAN, NmodParser.MEDIAN, NmodParser.QUANTILE, NmodParser.RANK, NmodParser.VARIANCE, NmodParser.SD, NmodParser.COR, NmodParser.COV, NmodParser.ROUND, NmodParser.TRANSPOSE, NmodParser.DIAGONAL, NmodParser.GINV, NmodParser.ROWSUM, NmodParser.COLSUM, NmodParser.LOAD, NmodParser.DATA, NmodParser.LIBRARY, NmodParser.RPOIS, NmodParser.RWEIBULL, NmodParser.RBINOM, NmodParser.RGEOM, NmodParser.RUNIF, NmodParser.CTEI, NmodParser.CTEF, NmodParser.CTEC, NmodParser.ID]:
                self.state = 341
                self.expression()
                self.state = 346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NmodParser.COMMA:
                    self.state = 342
                    self.match(NmodParser.COMMA)
                    self.state = 343
                    self.expression()
                    self.state = 348
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [NmodParser.RPRACKET]:
                pass
            else:
                pass
            self.state = 351
            self.match(NmodParser.RPRACKET)
            c.generateCommonQuad('read')
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WritingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None
            self._STRING = None # Token

        def PRINT(self):
            return self.getToken(NmodParser.PRINT, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def STRING(self):
            return self.getToken(NmodParser.STRING, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_writing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWriting" ):
                listener.enterWriting(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWriting" ):
                listener.exitWriting(self)




    def writing(self):

        localctx = NmodParser.WritingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_writing)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.match(NmodParser.PRINT)
            self.state = 355
            self.match(NmodParser.LPRACKET)
            self.state = 368
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NmodParser.STRING]:
                self.state = 356
                localctx._STRING = self.match(NmodParser.STRING)
                localctx.val = c.insertConstant('char', (None if localctx._STRING is None else localctx._STRING.text))
                c.insertStackOperand(localctx.val)
                c.insertStackType('char')
                pass
            elif token in [NmodParser.LPRACKET, NmodParser.PLUS, NmodParser.MINUS, NmodParser.RETURN, NmodParser.RNOM, NmodParser.REXP, NmodParser.RGAMMA, NmodParser.POINTS, NmodParser.LINES, NmodParser.TEXT, NmodParser.BARPLOT, NmodParser.PIECHART, NmodParser.XYPLOT, NmodParser.DENSITYPLOT, NmodParser.HISTOGRAM, NmodParser.SIN, NmodParser.COS, NmodParser.TAN, NmodParser.ASIN, NmodParser.ACOS, NmodParser.ATAN, NmodParser.ATAN2, NmodParser.LOG, NmodParser.LOG10, NmodParser.EXPONENT, NmodParser.MAX, NmodParser.MIN, NmodParser.RANGE, NmodParser.SUM, NmodParser.DIFF, NmodParser.PROD, NmodParser.MEAN, NmodParser.MEDIAN, NmodParser.QUANTILE, NmodParser.RANK, NmodParser.VARIANCE, NmodParser.SD, NmodParser.COR, NmodParser.COV, NmodParser.ROUND, NmodParser.TRANSPOSE, NmodParser.DIAGONAL, NmodParser.GINV, NmodParser.ROWSUM, NmodParser.COLSUM, NmodParser.LOAD, NmodParser.DATA, NmodParser.LIBRARY, NmodParser.RPOIS, NmodParser.RWEIBULL, NmodParser.RBINOM, NmodParser.RGEOM, NmodParser.RUNIF, NmodParser.CTEI, NmodParser.CTEF, NmodParser.CTEC, NmodParser.ID]:
                self.state = 360
                self.expression()
                self.state = 365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NmodParser.COMMA:
                    self.state = 361
                    self.match(NmodParser.COMMA)
                    self.state = 362
                    self.expression()
                    self.state = 367
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [NmodParser.RPRACKET]:
                pass
            else:
                pass
            self.state = 370
            self.match(NmodParser.RPRACKET)
            c.generateCommonQuad('print')
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Call_moduleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self.val = None
            self._ID = None # Token

        def ID(self):
            return self.getToken(NmodParser.ID, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def special_function(self):
            return self.getTypedRuleContext(NmodParser.Special_functionContext,0)


        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_call_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCall_module" ):
                listener.enterCall_module(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCall_module" ):
                listener.exitCall_module(self)




    def call_module(self):

        localctx = NmodParser.Call_moduleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_call_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NmodParser.ID]:
                self.state = 373
                localctx._ID = self.match(NmodParser.ID)
                c.generateERA((None if localctx._ID is None else localctx._ID.text))
                c.functionDirectory.functionExists((None if localctx._ID is None else localctx._ID.text))
                c.localFunc = (None if localctx._ID is None else localctx._ID.text)
                localctx.val = c.getModuleReturnAddr((None if localctx._ID is None else localctx._ID.text))
                localctx.type = c.getModuleReturnType((None if localctx._ID is None else localctx._ID.text))
                self.state = 379
                self.match(NmodParser.LPRACKET)
                c.insertFalseBottom()
                self.state = 393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NmodParser.LPRACKET) | (1 << NmodParser.PLUS) | (1 << NmodParser.MINUS) | (1 << NmodParser.RETURN) | (1 << NmodParser.RNOM) | (1 << NmodParser.REXP) | (1 << NmodParser.RGAMMA) | (1 << NmodParser.POINTS) | (1 << NmodParser.LINES) | (1 << NmodParser.TEXT) | (1 << NmodParser.BARPLOT) | (1 << NmodParser.PIECHART) | (1 << NmodParser.XYPLOT) | (1 << NmodParser.DENSITYPLOT) | (1 << NmodParser.HISTOGRAM) | (1 << NmodParser.SIN) | (1 << NmodParser.COS) | (1 << NmodParser.TAN) | (1 << NmodParser.ASIN) | (1 << NmodParser.ACOS) | (1 << NmodParser.ATAN) | (1 << NmodParser.ATAN2) | (1 << NmodParser.LOG) | (1 << NmodParser.LOG10) | (1 << NmodParser.EXPONENT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NmodParser.MAX - 64)) | (1 << (NmodParser.MIN - 64)) | (1 << (NmodParser.RANGE - 64)) | (1 << (NmodParser.SUM - 64)) | (1 << (NmodParser.DIFF - 64)) | (1 << (NmodParser.PROD - 64)) | (1 << (NmodParser.MEAN - 64)) | (1 << (NmodParser.MEDIAN - 64)) | (1 << (NmodParser.QUANTILE - 64)) | (1 << (NmodParser.RANK - 64)) | (1 << (NmodParser.VARIANCE - 64)) | (1 << (NmodParser.SD - 64)) | (1 << (NmodParser.COR - 64)) | (1 << (NmodParser.COV - 64)) | (1 << (NmodParser.ROUND - 64)) | (1 << (NmodParser.TRANSPOSE - 64)) | (1 << (NmodParser.DIAGONAL - 64)) | (1 << (NmodParser.GINV - 64)) | (1 << (NmodParser.ROWSUM - 64)) | (1 << (NmodParser.COLSUM - 64)) | (1 << (NmodParser.LOAD - 64)) | (1 << (NmodParser.DATA - 64)) | (1 << (NmodParser.LIBRARY - 64)) | (1 << (NmodParser.RPOIS - 64)) | (1 << (NmodParser.RWEIBULL - 64)) | (1 << (NmodParser.RBINOM - 64)) | (1 << (NmodParser.RGEOM - 64)) | (1 << (NmodParser.RUNIF - 64)) | (1 << (NmodParser.CTEI - 64)) | (1 << (NmodParser.CTEF - 64)) | (1 << (NmodParser.CTEC - 64)) | (1 << (NmodParser.ID - 64)))) != 0):
                    self.state = 381
                    self.exp()
                    c.generateActionParameter()
                    self.state = 390
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==NmodParser.COMMA:
                        self.state = 383
                        self.match(NmodParser.COMMA)
                        c.moveParameterPointer()
                        self.state = 385
                        self.exp()
                        c.generateActionParameter()
                        self.state = 392
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 395
                self.match(NmodParser.RPRACKET)
                c.removeFalseBottom()
                c.resetParameterPointer()
                pass
            elif token in [NmodParser.RETURN, NmodParser.RNOM, NmodParser.REXP, NmodParser.RGAMMA, NmodParser.POINTS, NmodParser.LINES, NmodParser.TEXT, NmodParser.BARPLOT, NmodParser.PIECHART, NmodParser.XYPLOT, NmodParser.DENSITYPLOT, NmodParser.HISTOGRAM, NmodParser.SIN, NmodParser.COS, NmodParser.TAN, NmodParser.ASIN, NmodParser.ACOS, NmodParser.ATAN, NmodParser.ATAN2, NmodParser.LOG, NmodParser.LOG10, NmodParser.EXPONENT, NmodParser.MAX, NmodParser.MIN, NmodParser.RANGE, NmodParser.SUM, NmodParser.DIFF, NmodParser.PROD, NmodParser.MEAN, NmodParser.MEDIAN, NmodParser.QUANTILE, NmodParser.RANK, NmodParser.VARIANCE, NmodParser.SD, NmodParser.COR, NmodParser.COV, NmodParser.ROUND, NmodParser.TRANSPOSE, NmodParser.DIAGONAL, NmodParser.GINV, NmodParser.ROWSUM, NmodParser.COLSUM, NmodParser.LOAD, NmodParser.DATA, NmodParser.LIBRARY, NmodParser.RPOIS, NmodParser.RWEIBULL, NmodParser.RBINOM, NmodParser.RGEOM, NmodParser.RUNIF]:
                self.state = 398
                self.special_function()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Special_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_return(self):
            return self.getTypedRuleContext(NmodParser.R_returnContext,0)


        def rnom(self):
            return self.getTypedRuleContext(NmodParser.RnomContext,0)


        def rexp(self):
            return self.getTypedRuleContext(NmodParser.RexpContext,0)


        def rgamma(self):
            return self.getTypedRuleContext(NmodParser.RgammaContext,0)


        def points(self):
            return self.getTypedRuleContext(NmodParser.PointsContext,0)


        def lines(self):
            return self.getTypedRuleContext(NmodParser.LinesContext,0)


        def text(self):
            return self.getTypedRuleContext(NmodParser.TextContext,0)


        def barplot(self):
            return self.getTypedRuleContext(NmodParser.BarplotContext,0)


        def piechart(self):
            return self.getTypedRuleContext(NmodParser.PiechartContext,0)


        def xyplot(self):
            return self.getTypedRuleContext(NmodParser.XyplotContext,0)


        def densityplot(self):
            return self.getTypedRuleContext(NmodParser.DensityplotContext,0)


        def histogram(self):
            return self.getTypedRuleContext(NmodParser.HistogramContext,0)


        def sin(self):
            return self.getTypedRuleContext(NmodParser.SinContext,0)


        def cos(self):
            return self.getTypedRuleContext(NmodParser.CosContext,0)


        def tan(self):
            return self.getTypedRuleContext(NmodParser.TanContext,0)


        def asin(self):
            return self.getTypedRuleContext(NmodParser.AsinContext,0)


        def acos(self):
            return self.getTypedRuleContext(NmodParser.AcosContext,0)


        def atan(self):
            return self.getTypedRuleContext(NmodParser.AtanContext,0)


        def atan2(self):
            return self.getTypedRuleContext(NmodParser.Atan2Context,0)


        def log(self):
            return self.getTypedRuleContext(NmodParser.LogContext,0)


        def log10(self):
            return self.getTypedRuleContext(NmodParser.Log10Context,0)


        def exponent(self):
            return self.getTypedRuleContext(NmodParser.ExponentContext,0)


        def f_max(self):
            return self.getTypedRuleContext(NmodParser.F_maxContext,0)


        def f_min(self):
            return self.getTypedRuleContext(NmodParser.F_minContext,0)


        def f_range(self):
            return self.getTypedRuleContext(NmodParser.F_rangeContext,0)


        def f_sum(self):
            return self.getTypedRuleContext(NmodParser.F_sumContext,0)


        def diff(self):
            return self.getTypedRuleContext(NmodParser.DiffContext,0)


        def prod(self):
            return self.getTypedRuleContext(NmodParser.ProdContext,0)


        def mean(self):
            return self.getTypedRuleContext(NmodParser.MeanContext,0)


        def median(self):
            return self.getTypedRuleContext(NmodParser.MedianContext,0)


        def quantile(self):
            return self.getTypedRuleContext(NmodParser.QuantileContext,0)


        def rank(self):
            return self.getTypedRuleContext(NmodParser.RankContext,0)


        def var(self):
            return self.getTypedRuleContext(NmodParser.VarContext,0)


        def sd(self):
            return self.getTypedRuleContext(NmodParser.SdContext,0)


        def cor(self):
            return self.getTypedRuleContext(NmodParser.CorContext,0)


        def cov(self):
            return self.getTypedRuleContext(NmodParser.CovContext,0)


        def f_round(self):
            return self.getTypedRuleContext(NmodParser.F_roundContext,0)


        def transpose(self):
            return self.getTypedRuleContext(NmodParser.TransposeContext,0)


        def diagonal(self):
            return self.getTypedRuleContext(NmodParser.DiagonalContext,0)


        def ginv(self):
            return self.getTypedRuleContext(NmodParser.GinvContext,0)


        def rowsum(self):
            return self.getTypedRuleContext(NmodParser.RowsumContext,0)


        def colsum(self):
            return self.getTypedRuleContext(NmodParser.ColsumContext,0)


        def load(self):
            return self.getTypedRuleContext(NmodParser.LoadContext,0)


        def data(self):
            return self.getTypedRuleContext(NmodParser.DataContext,0)


        def library(self):
            return self.getTypedRuleContext(NmodParser.LibraryContext,0)


        def rpois(self):
            return self.getTypedRuleContext(NmodParser.RpoisContext,0)


        def rweibull(self):
            return self.getTypedRuleContext(NmodParser.RweibullContext,0)


        def rbinom(self):
            return self.getTypedRuleContext(NmodParser.RbinomContext,0)


        def rgeom(self):
            return self.getTypedRuleContext(NmodParser.RgeomContext,0)


        def runif(self):
            return self.getTypedRuleContext(NmodParser.RunifContext,0)


        def getRuleIndex(self):
            return NmodParser.RULE_special_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecial_function" ):
                listener.enterSpecial_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecial_function" ):
                listener.exitSpecial_function(self)




    def special_function(self):

        localctx = NmodParser.Special_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_special_function)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NmodParser.RETURN]:
                self.state = 401
                self.r_return()
                pass
            elif token in [NmodParser.RNOM]:
                self.state = 402
                self.rnom()
                pass
            elif token in [NmodParser.REXP]:
                self.state = 403
                self.rexp()
                pass
            elif token in [NmodParser.RGAMMA]:
                self.state = 404
                self.rgamma()
                pass
            elif token in [NmodParser.POINTS]:
                self.state = 405
                self.points()
                pass
            elif token in [NmodParser.LINES]:
                self.state = 406
                self.lines()
                pass
            elif token in [NmodParser.TEXT]:
                self.state = 407
                self.text()
                pass
            elif token in [NmodParser.BARPLOT]:
                self.state = 408
                self.barplot()
                pass
            elif token in [NmodParser.PIECHART]:
                self.state = 409
                self.piechart()
                pass
            elif token in [NmodParser.XYPLOT]:
                self.state = 410
                self.xyplot()
                pass
            elif token in [NmodParser.DENSITYPLOT]:
                self.state = 411
                self.densityplot()
                pass
            elif token in [NmodParser.HISTOGRAM]:
                self.state = 412
                self.histogram()
                pass
            elif token in [NmodParser.SIN]:
                self.state = 413
                self.sin()
                pass
            elif token in [NmodParser.COS]:
                self.state = 414
                self.cos()
                pass
            elif token in [NmodParser.TAN]:
                self.state = 415
                self.tan()
                pass
            elif token in [NmodParser.ASIN]:
                self.state = 416
                self.asin()
                pass
            elif token in [NmodParser.ACOS]:
                self.state = 417
                self.acos()
                pass
            elif token in [NmodParser.ATAN]:
                self.state = 418
                self.atan()
                pass
            elif token in [NmodParser.ATAN2]:
                self.state = 419
                self.atan2()
                pass
            elif token in [NmodParser.LOG]:
                self.state = 420
                self.log()
                pass
            elif token in [NmodParser.LOG10]:
                self.state = 421
                self.log10()
                pass
            elif token in [NmodParser.EXPONENT]:
                self.state = 422
                self.exponent()
                pass
            elif token in [NmodParser.MAX]:
                self.state = 423
                self.f_max()
                pass
            elif token in [NmodParser.MIN]:
                self.state = 424
                self.f_min()
                pass
            elif token in [NmodParser.RANGE]:
                self.state = 425
                self.f_range()
                pass
            elif token in [NmodParser.SUM]:
                self.state = 426
                self.f_sum()
                pass
            elif token in [NmodParser.DIFF]:
                self.state = 427
                self.diff()
                pass
            elif token in [NmodParser.PROD]:
                self.state = 428
                self.prod()
                pass
            elif token in [NmodParser.MEAN]:
                self.state = 429
                self.mean()
                pass
            elif token in [NmodParser.MEDIAN]:
                self.state = 430
                self.median()
                pass
            elif token in [NmodParser.QUANTILE]:
                self.state = 431
                self.quantile()
                pass
            elif token in [NmodParser.RANK]:
                self.state = 432
                self.rank()
                pass
            elif token in [NmodParser.VARIANCE]:
                self.state = 433
                self.var()
                pass
            elif token in [NmodParser.SD]:
                self.state = 434
                self.sd()
                pass
            elif token in [NmodParser.COR]:
                self.state = 435
                self.cor()
                pass
            elif token in [NmodParser.COV]:
                self.state = 436
                self.cov()
                pass
            elif token in [NmodParser.ROUND]:
                self.state = 437
                self.f_round()
                pass
            elif token in [NmodParser.TRANSPOSE]:
                self.state = 438
                self.transpose()
                pass
            elif token in [NmodParser.DIAGONAL]:
                self.state = 439
                self.diagonal()
                pass
            elif token in [NmodParser.GINV]:
                self.state = 440
                self.ginv()
                pass
            elif token in [NmodParser.ROWSUM]:
                self.state = 441
                self.rowsum()
                pass
            elif token in [NmodParser.COLSUM]:
                self.state = 442
                self.colsum()
                pass
            elif token in [NmodParser.LOAD]:
                self.state = 443
                self.load()
                pass
            elif token in [NmodParser.DATA]:
                self.state = 444
                self.data()
                pass
            elif token in [NmodParser.LIBRARY]:
                self.state = 445
                self.library()
                pass
            elif token in [NmodParser.RPOIS]:
                self.state = 446
                self.rpois()
                pass
            elif token in [NmodParser.RWEIBULL]:
                self.state = 447
                self.rweibull()
                pass
            elif token in [NmodParser.RBINOM]:
                self.state = 448
                self.rbinom()
                pass
            elif token in [NmodParser.RGEOM]:
                self.state = 449
                self.rgeom()
                pass
            elif token in [NmodParser.RUNIF]:
                self.state = 450
                self.runif()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._AND = None # Token
            self._OR = None # Token

        def sub_exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Sub_expContext)
            else:
                return self.getTypedRuleContext(NmodParser.Sub_expContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.AND)
            else:
                return self.getToken(NmodParser.AND, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.OR)
            else:
                return self.getToken(NmodParser.OR, i)

        def getRuleIndex(self):
            return NmodParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = NmodParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 453
            self.sub_exp()
            c.generateQuad(c.localFunc, 'sub_exp')
            self.state = 472
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 459 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 459
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [NmodParser.AND]:
                            self.state = 455
                            localctx._AND = self.match(NmodParser.AND)
                            c.insertStackOperator((None if localctx._AND is None else localctx._AND.text))
                            pass
                        elif token in [NmodParser.OR]:
                            self.state = 457
                            localctx._OR = self.match(NmodParser.OR)
                            c.insertStackOperator((None if localctx._OR is None else localctx._OR.text))
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 461 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==NmodParser.AND or _la==NmodParser.OR):
                            break

                    self.state = 464 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 463
                            self.sub_exp()

                        else:
                            raise NoViableAltException(self)
                        self.state = 466 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

                    c.generateQuad(c.localFunc, 'sub_exp') 
                self.state = 474
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sub_expContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._EQUAL = None # Token
            self._GREATEROR = None # Token
            self._GREATERTHAN = None # Token
            self._LESSEROR = None # Token
            self._LESSERTHAN = None # Token

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.EQUAL)
            else:
                return self.getToken(NmodParser.EQUAL, i)

        def GREATEROR(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.GREATEROR)
            else:
                return self.getToken(NmodParser.GREATEROR, i)

        def GREATERTHAN(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.GREATERTHAN)
            else:
                return self.getToken(NmodParser.GREATERTHAN, i)

        def LESSEROR(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.LESSEROR)
            else:
                return self.getToken(NmodParser.LESSEROR, i)

        def LESSERTHAN(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.LESSERTHAN)
            else:
                return self.getToken(NmodParser.LESSERTHAN, i)

        def getRuleIndex(self):
            return NmodParser.RULE_sub_exp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSub_exp" ):
                listener.enterSub_exp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSub_exp" ):
                listener.exitSub_exp(self)




    def sub_exp(self):

        localctx = NmodParser.Sub_expContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_sub_exp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self.exp()
            c.generateQuad(c.localFunc, 'exp')
            self.state = 500
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 487 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 487
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [NmodParser.EQUAL]:
                            self.state = 477
                            localctx._EQUAL = self.match(NmodParser.EQUAL)
                            c.insertStackOperator((None if localctx._EQUAL is None else localctx._EQUAL.text))
                            pass
                        elif token in [NmodParser.GREATEROR]:
                            self.state = 479
                            localctx._GREATEROR = self.match(NmodParser.GREATEROR)
                            c.insertStackOperator((None if localctx._GREATEROR is None else localctx._GREATEROR.text))
                            pass
                        elif token in [NmodParser.GREATERTHAN]:
                            self.state = 481
                            localctx._GREATERTHAN = self.match(NmodParser.GREATERTHAN)
                            c.insertStackOperator((None if localctx._GREATERTHAN is None else localctx._GREATERTHAN.text))
                            pass
                        elif token in [NmodParser.LESSEROR]:
                            self.state = 483
                            localctx._LESSEROR = self.match(NmodParser.LESSEROR)
                            c.insertStackOperator((None if localctx._LESSEROR is None else localctx._LESSEROR.text))
                            pass
                        elif token in [NmodParser.LESSERTHAN]:
                            self.state = 485
                            localctx._LESSERTHAN = self.match(NmodParser.LESSERTHAN)
                            c.insertStackOperator((None if localctx._LESSERTHAN is None else localctx._LESSERTHAN.text))
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 489 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NmodParser.GREATERTHAN) | (1 << NmodParser.GREATEROR) | (1 << NmodParser.LESSERTHAN) | (1 << NmodParser.LESSEROR) | (1 << NmodParser.EQUAL))) != 0)):
                            break

                    self.state = 492 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 491
                            self.exp()

                        else:
                            raise NoViableAltException(self)
                        self.state = 494 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

                    c.generateQuad(c.localFunc, 'exp') 
                self.state = 502
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._MINUS = None # Token
            self._PLUS = None # Token

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.TermContext)
            else:
                return self.getTypedRuleContext(NmodParser.TermContext,i)


        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.MINUS)
            else:
                return self.getToken(NmodParser.MINUS, i)

        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.PLUS)
            else:
                return self.getToken(NmodParser.PLUS, i)

        def getRuleIndex(self):
            return NmodParser.RULE_exp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp" ):
                listener.enterExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp" ):
                listener.exitExp(self)




    def exp(self):

        localctx = NmodParser.ExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_exp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            self.term()
            c.generateQuad(c.localFunc, 'term')
            self.state = 522
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 509 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 509
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [NmodParser.MINUS]:
                                self.state = 505
                                localctx._MINUS = self.match(NmodParser.MINUS)
                                c.insertStackOperator((None if localctx._MINUS is None else localctx._MINUS.text))
                                pass
                            elif token in [NmodParser.PLUS]:
                                self.state = 507
                                localctx._PLUS = self.match(NmodParser.PLUS)
                                c.insertStackOperator((None if localctx._PLUS is None else localctx._PLUS.text))
                                pass
                            else:
                                raise NoViableAltException(self)


                        else:
                            raise NoViableAltException(self)
                        self.state = 511 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

                    self.state = 514 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 513
                            self.term()

                        else:
                            raise NoViableAltException(self)
                        self.state = 516 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

                    c.generateQuad(c.localFunc, 'term') 
                self.state = 524
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._DIVISION = None # Token
            self._TIMES = None # Token

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.FactorContext)
            else:
                return self.getTypedRuleContext(NmodParser.FactorContext,i)


        def DIVISION(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.DIVISION)
            else:
                return self.getToken(NmodParser.DIVISION, i)

        def TIMES(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.TIMES)
            else:
                return self.getToken(NmodParser.TIMES, i)

        def getRuleIndex(self):
            return NmodParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = NmodParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self.factor()
            c.generateQuad(c.localFunc, 'factor')
            self.state = 544
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 531 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 531
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [NmodParser.DIVISION]:
                            self.state = 527
                            localctx._DIVISION = self.match(NmodParser.DIVISION)
                            c.insertStackOperator((None if localctx._DIVISION is None else localctx._DIVISION.text))
                            pass
                        elif token in [NmodParser.TIMES]:
                            self.state = 529
                            localctx._TIMES = self.match(NmodParser.TIMES)
                            c.insertStackOperator((None if localctx._TIMES is None else localctx._TIMES.text))
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 533 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==NmodParser.TIMES or _la==NmodParser.DIVISION):
                            break

                    self.state = 536 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 535
                            self.factor()

                        else:
                            raise NoViableAltException(self)
                        self.state = 538 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

                    c.generateQuad(c.localFunc, 'factor') 
                self.state = 546
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def var_cte(self):
            return self.getTypedRuleContext(NmodParser.Var_cteContext,0)


        def PLUS(self):
            return self.getToken(NmodParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(NmodParser.MINUS, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)




    def factor(self):

        localctx = NmodParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_factor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NmodParser.LPRACKET]:
                self.state = 547
                self.match(NmodParser.LPRACKET)
                c.insertFalseBottom()
                self.state = 549
                self.expression()
                self.state = 550
                self.match(NmodParser.RPRACKET)
                c.removeFalseBottom()
                pass
            elif token in [NmodParser.PLUS, NmodParser.MINUS, NmodParser.RETURN, NmodParser.RNOM, NmodParser.REXP, NmodParser.RGAMMA, NmodParser.POINTS, NmodParser.LINES, NmodParser.TEXT, NmodParser.BARPLOT, NmodParser.PIECHART, NmodParser.XYPLOT, NmodParser.DENSITYPLOT, NmodParser.HISTOGRAM, NmodParser.SIN, NmodParser.COS, NmodParser.TAN, NmodParser.ASIN, NmodParser.ACOS, NmodParser.ATAN, NmodParser.ATAN2, NmodParser.LOG, NmodParser.LOG10, NmodParser.EXPONENT, NmodParser.MAX, NmodParser.MIN, NmodParser.RANGE, NmodParser.SUM, NmodParser.DIFF, NmodParser.PROD, NmodParser.MEAN, NmodParser.MEDIAN, NmodParser.QUANTILE, NmodParser.RANK, NmodParser.VARIANCE, NmodParser.SD, NmodParser.COR, NmodParser.COV, NmodParser.ROUND, NmodParser.TRANSPOSE, NmodParser.DIAGONAL, NmodParser.GINV, NmodParser.ROWSUM, NmodParser.COLSUM, NmodParser.LOAD, NmodParser.DATA, NmodParser.LIBRARY, NmodParser.RPOIS, NmodParser.RWEIBULL, NmodParser.RBINOM, NmodParser.RGEOM, NmodParser.RUNIF, NmodParser.CTEI, NmodParser.CTEF, NmodParser.CTEC, NmodParser.ID]:
                self.state = 554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NmodParser.PLUS or _la==NmodParser.MINUS:
                    self.state = 553
                    _la = self._input.LA(1)
                    if not(_la==NmodParser.PLUS or _la==NmodParser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 556
                self.var_cte()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Var_cteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self.val = None
            self._call_module = None # Call_moduleContext
            self._id_access = None # Id_accessContext
            self._CTEI = None # Token
            self._CTEF = None # Token
            self._CTEC = None # Token

        def call_module(self):
            return self.getTypedRuleContext(NmodParser.Call_moduleContext,0)


        def id_access(self):
            return self.getTypedRuleContext(NmodParser.Id_accessContext,0)


        def CTEI(self):
            return self.getToken(NmodParser.CTEI, 0)

        def CTEF(self):
            return self.getToken(NmodParser.CTEF, 0)

        def CTEC(self):
            return self.getToken(NmodParser.CTEC, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_var_cte

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_cte" ):
                listener.enterVar_cte(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_cte" ):
                listener.exitVar_cte(self)




    def var_cte(self):

        localctx = NmodParser.Var_cteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_var_cte)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 559
                localctx._call_module = self.call_module()
                localctx.type = localctx._call_module.type
                localctx.val = localctx._call_module.val
                pass

            elif la_ == 2:
                self.state = 563
                localctx._id_access = self.id_access()
                localctx.type = c.getVarType(c.localFunc, (None if localctx._id_access is None else self._input.getText((localctx._id_access.start,localctx._id_access.stop))))
                localctx.val = c.getVarVal(c.localFunc, (None if localctx._id_access is None else self._input.getText((localctx._id_access.start,localctx._id_access.stop))))
                c.insertStackType(localctx.type)
                pass

            elif la_ == 3:
                self.state = 568
                localctx._CTEI = self.match(NmodParser.CTEI)
                localctx.type = 'int'
                localctx.val = c.insertConstant(localctx.type, (None if localctx._CTEI is None else localctx._CTEI.text))
                c.insertStackOperand((None if localctx._CTEI is None else localctx._CTEI.text))
                c.insertStackType(localctx.type)
                pass

            elif la_ == 4:
                self.state = 573
                localctx._CTEF = self.match(NmodParser.CTEF)
                localctx.type = 'float'
                localctx.val = c.insertConstant(localctx.type, (None if localctx._CTEF is None else localctx._CTEF.text))
                c.insertStackOperand((None if localctx._CTEF is None else localctx._CTEF.text))
                c.insertStackType(localctx.type)
                pass

            elif la_ == 5:
                self.state = 578
                localctx._CTEC = self.match(NmodParser.CTEC)
                localctx.type = 'char'
                localctx.val = c.insertConstant(localctx.type, (None if localctx._CTEC is None else localctx._CTEC.text))
                c.insertStackOperand((None if localctx._CTEC is None else localctx._CTEC.text))
                c.insertStackType(localctx.type)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class R_returnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(NmodParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def getRuleIndex(self):
            return NmodParser.RULE_r_return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterR_return" ):
                listener.enterR_return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitR_return" ):
                listener.exitR_return(self)




    def r_return(self):

        localctx = NmodParser.R_returnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_r_return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self.match(NmodParser.RETURN)
            self.state = 586
            self.expression()
            c.generateCommonQuad('return')
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RnomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self.val = None
            self._RNOM = None # Token

        def RNOM(self):
            return self.getToken(NmodParser.RNOM, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_rnom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRnom" ):
                listener.enterRnom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRnom" ):
                listener.exitRnom(self)




    def rnom(self):

        localctx = NmodParser.RnomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_rnom)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            localctx._RNOM = self.match(NmodParser.RNOM)
            c.generateSpecialERA((None if localctx._RNOM is None else localctx._RNOM.text))
            self.state = 591
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 593
            self.exp()
            c.generateSpecialActionParam((None if localctx._RNOM is None else localctx._RNOM.text))
            self.state = 602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 595
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 597
                self.exp()
                c.generateSpecialActionParam((None if localctx._RNOM is None else localctx._RNOM.text))
                self.state = 604
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 605
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._RNOM is None else localctx._RNOM.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RexpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._REXP = None # Token

        def REXP(self):
            return self.getToken(NmodParser.REXP, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_rexp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRexp" ):
                listener.enterRexp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRexp" ):
                listener.exitRexp(self)




    def rexp(self):

        localctx = NmodParser.RexpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_rexp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 609
            localctx._REXP = self.match(NmodParser.REXP)
            c.generateSpecialERA((None if localctx._REXP is None else localctx._REXP.text))
            self.state = 611
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 613
            self.exp()
            c.generateSpecialActionParam((None if localctx._REXP is None else localctx._REXP.text))
            self.state = 622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 615
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 617
                self.exp()
                c.generateSpecialActionParam((None if localctx._REXP is None else localctx._REXP.text))
                self.state = 624
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 625
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._REXP is None else localctx._REXP.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RgammaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._RGAMMA = None # Token

        def RGAMMA(self):
            return self.getToken(NmodParser.RGAMMA, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_rgamma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRgamma" ):
                listener.enterRgamma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRgamma" ):
                listener.exitRgamma(self)




    def rgamma(self):

        localctx = NmodParser.RgammaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_rgamma)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            localctx._RGAMMA = self.match(NmodParser.RGAMMA)
            c.generateSpecialERA((None if localctx._RGAMMA is None else localctx._RGAMMA.text))
            self.state = 631
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 633
            self.exp()
            c.generateSpecialActionParam((None if localctx._RGAMMA is None else localctx._RGAMMA.text))
            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 635
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 637
                self.exp()
                c.generateSpecialActionParam((None if localctx._RGAMMA is None else localctx._RGAMMA.text))
                self.state = 644
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 645
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._RGAMMA is None else localctx._RGAMMA.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PointsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._POINTS = None # Token

        def POINTS(self):
            return self.getToken(NmodParser.POINTS, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_points

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPoints" ):
                listener.enterPoints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPoints" ):
                listener.exitPoints(self)




    def points(self):

        localctx = NmodParser.PointsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_points)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            localctx._POINTS = self.match(NmodParser.POINTS)
            c.generateSpecialERA((None if localctx._POINTS is None else localctx._POINTS.text))
            self.state = 651
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 653
            self.exp()
            c.generateSpecialActionParam((None if localctx._POINTS is None else localctx._POINTS.text))
            self.state = 662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 655
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 657
                self.exp()
                c.generateSpecialActionParam((None if localctx._POINTS is None else localctx._POINTS.text))
                self.state = 664
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 665
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._POINTS is None else localctx._POINTS.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LinesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._LINES = None # Token

        def LINES(self):
            return self.getToken(NmodParser.LINES, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_lines

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLines" ):
                listener.enterLines(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLines" ):
                listener.exitLines(self)




    def lines(self):

        localctx = NmodParser.LinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_lines)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            localctx._LINES = self.match(NmodParser.LINES)
            c.generateSpecialERA((None if localctx._LINES is None else localctx._LINES.text))
            self.state = 671
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 673
            self.exp()
            c.generateSpecialActionParam((None if localctx._LINES is None else localctx._LINES.text))
            self.state = 682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 675
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 677
                self.exp()
                c.generateSpecialActionParam((None if localctx._LINES is None else localctx._LINES.text))
                self.state = 684
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 685
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._LINES is None else localctx._LINES.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TextContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._TEXT = None # Token
            self._CTEI = None # Token

        def TEXT(self):
            return self.getToken(NmodParser.TEXT, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def CTEI(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.CTEI)
            else:
                return self.getToken(NmodParser.CTEI, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def id_access(self):
            return self.getTypedRuleContext(NmodParser.Id_accessContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_text

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterText" ):
                listener.enterText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitText" ):
                listener.exitText(self)




    def text(self):

        localctx = NmodParser.TextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_text)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            localctx._TEXT = self.match(NmodParser.TEXT)
            c.generateSpecialERA((None if localctx._TEXT is None else localctx._TEXT.text))
            self.state = 691
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 693
            localctx._CTEI = self.match(NmodParser.CTEI)
            c.insertConstant('int', (None if localctx._CTEI is None else localctx._CTEI.text))
            c.generateSpecialActionParam((None if localctx._TEXT is None else localctx._TEXT.text))
            self.state = 696
            self.match(NmodParser.COMMA)
            c.moveParameterPointer()
            self.state = 698
            localctx._CTEI = self.match(NmodParser.CTEI)
            c.insertConstant('int', (None if localctx._CTEI is None else localctx._CTEI.text))
            c.generateSpecialActionParam((None if localctx._TEXT is None else localctx._TEXT.text))
            self.state = 701
            self.match(NmodParser.COMMA)
            c.moveParameterPointer()
            self.state = 703
            self.id_access()
            self.state = 704
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._TEXT is None else localctx._TEXT.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BarplotContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._BARPLOT = None # Token

        def BARPLOT(self):
            return self.getToken(NmodParser.BARPLOT, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_barplot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBarplot" ):
                listener.enterBarplot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBarplot" ):
                listener.exitBarplot(self)




    def barplot(self):

        localctx = NmodParser.BarplotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_barplot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            localctx._BARPLOT = self.match(NmodParser.BARPLOT)
            c.generateSpecialERA((None if localctx._BARPLOT is None else localctx._BARPLOT.text))
            self.state = 710
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 712
            self.exp()
            c.generateSpecialActionParam((None if localctx._BARPLOT is None else localctx._BARPLOT.text))
            self.state = 721
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 714
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 716
                self.exp()
                c.generateSpecialActionParam((None if localctx._BARPLOT is None else localctx._BARPLOT.text))
                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 724
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._BARPLOT is None else localctx._BARPLOT.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DotchartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._DOTCHART = None # Token

        def DOTCHART(self):
            return self.getToken(NmodParser.DOTCHART, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_dotchart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotchart" ):
                listener.enterDotchart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotchart" ):
                listener.exitDotchart(self)




    def dotchart(self):

        localctx = NmodParser.DotchartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_dotchart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            localctx._DOTCHART = self.match(NmodParser.DOTCHART)
            c.generateSpecialERA((None if localctx._DOTCHART is None else localctx._DOTCHART.text))
            self.state = 730
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 732
            self.exp()
            c.generateSpecialActionParam((None if localctx._DOTCHART is None else localctx._DOTCHART.text))
            self.state = 741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 734
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 736
                self.exp()
                c.generateSpecialActionParam((None if localctx._DOTCHART is None else localctx._DOTCHART.text))
                self.state = 743
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 744
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._DOTCHART is None else localctx._DOTCHART.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PiechartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._PIECHART = None # Token

        def PIECHART(self):
            return self.getToken(NmodParser.PIECHART, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_piechart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPiechart" ):
                listener.enterPiechart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPiechart" ):
                listener.exitPiechart(self)




    def piechart(self):

        localctx = NmodParser.PiechartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_piechart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            localctx._PIECHART = self.match(NmodParser.PIECHART)
            c.generateSpecialERA((None if localctx._PIECHART is None else localctx._PIECHART.text))
            self.state = 750
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 752
            self.exp()
            c.generateSpecialActionParam((None if localctx._PIECHART is None else localctx._PIECHART.text))
            self.state = 761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 754
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 756
                self.exp()
                c.generateSpecialActionParam((None if localctx._PIECHART is None else localctx._PIECHART.text))
                self.state = 763
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 764
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._PIECHART is None else localctx._PIECHART.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class XyplotContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._XYPLOT = None # Token

        def XYPLOT(self):
            return self.getToken(NmodParser.XYPLOT, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_xyplot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXyplot" ):
                listener.enterXyplot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXyplot" ):
                listener.exitXyplot(self)




    def xyplot(self):

        localctx = NmodParser.XyplotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_xyplot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            localctx._XYPLOT = self.match(NmodParser.XYPLOT)
            c.generateSpecialERA((None if localctx._XYPLOT is None else localctx._XYPLOT.text))
            self.state = 770
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 772
            self.exp()
            c.generateSpecialActionParam((None if localctx._XYPLOT is None else localctx._XYPLOT.text))
            self.state = 781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 774
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 776
                self.exp()
                c.generateSpecialActionParam((None if localctx._XYPLOT is None else localctx._XYPLOT.text))
                self.state = 783
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 784
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._XYPLOT is None else localctx._XYPLOT.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DensityplotContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._DENSITYPLOT = None # Token

        def DENSITYPLOT(self):
            return self.getToken(NmodParser.DENSITYPLOT, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_densityplot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDensityplot" ):
                listener.enterDensityplot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDensityplot" ):
                listener.exitDensityplot(self)




    def densityplot(self):

        localctx = NmodParser.DensityplotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_densityplot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            localctx._DENSITYPLOT = self.match(NmodParser.DENSITYPLOT)
            c.generateSpecialERA((None if localctx._DENSITYPLOT is None else localctx._DENSITYPLOT.text))
            self.state = 790
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 792
            self.exp()
            c.generateSpecialActionParam((None if localctx._DENSITYPLOT is None else localctx._DENSITYPLOT.text))
            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 794
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 796
                self.exp()
                c.generateSpecialActionParam((None if localctx._DENSITYPLOT is None else localctx._DENSITYPLOT.text))
                self.state = 803
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 804
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._DENSITYPLOT is None else localctx._DENSITYPLOT.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HistogramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._HISTOGRAM = None # Token

        def HISTOGRAM(self):
            return self.getToken(NmodParser.HISTOGRAM, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_histogram

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHistogram" ):
                listener.enterHistogram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHistogram" ):
                listener.exitHistogram(self)




    def histogram(self):

        localctx = NmodParser.HistogramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_histogram)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            localctx._HISTOGRAM = self.match(NmodParser.HISTOGRAM)
            c.generateSpecialERA((None if localctx._HISTOGRAM is None else localctx._HISTOGRAM.text))
            self.state = 810
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 812
            self.exp()
            c.generateSpecialActionParam((None if localctx._HISTOGRAM is None else localctx._HISTOGRAM.text))
            self.state = 821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 814
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 816
                self.exp()
                c.generateSpecialActionParam((None if localctx._HISTOGRAM is None else localctx._HISTOGRAM.text))
                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 824
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._HISTOGRAM is None else localctx._HISTOGRAM.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SinContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIN(self):
            return self.getToken(NmodParser.SIN, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self):
            return self.getTypedRuleContext(NmodParser.ExpContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_sin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSin" ):
                listener.enterSin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSin" ):
                listener.exitSin(self)




    def sin(self):

        localctx = NmodParser.SinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_sin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self.match(NmodParser.SIN)
            self.state = 829
            self.match(NmodParser.LPRACKET)
            self.state = 830
            self.exp()
            self.state = 831
            self.match(NmodParser.RPRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CosContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COS(self):
            return self.getToken(NmodParser.COS, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self):
            return self.getTypedRuleContext(NmodParser.ExpContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_cos

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCos" ):
                listener.enterCos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCos" ):
                listener.exitCos(self)




    def cos(self):

        localctx = NmodParser.CosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_cos)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 833
            self.match(NmodParser.COS)
            self.state = 834
            self.match(NmodParser.LPRACKET)
            self.state = 835
            self.exp()
            self.state = 836
            self.match(NmodParser.RPRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TanContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAN(self):
            return self.getToken(NmodParser.TAN, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self):
            return self.getTypedRuleContext(NmodParser.ExpContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_tan

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTan" ):
                listener.enterTan(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTan" ):
                listener.exitTan(self)




    def tan(self):

        localctx = NmodParser.TanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_tan)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.match(NmodParser.TAN)
            self.state = 839
            self.match(NmodParser.LPRACKET)
            self.state = 840
            self.exp()
            self.state = 841
            self.match(NmodParser.RPRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AsinContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASIN(self):
            return self.getToken(NmodParser.ASIN, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self):
            return self.getTypedRuleContext(NmodParser.ExpContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_asin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsin" ):
                listener.enterAsin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsin" ):
                listener.exitAsin(self)




    def asin(self):

        localctx = NmodParser.AsinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_asin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 843
            self.match(NmodParser.ASIN)
            self.state = 844
            self.match(NmodParser.LPRACKET)
            self.state = 845
            self.exp()
            self.state = 846
            self.match(NmodParser.RPRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AcosContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACOS(self):
            return self.getToken(NmodParser.ACOS, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self):
            return self.getTypedRuleContext(NmodParser.ExpContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_acos

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAcos" ):
                listener.enterAcos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAcos" ):
                listener.exitAcos(self)




    def acos(self):

        localctx = NmodParser.AcosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_acos)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.match(NmodParser.ACOS)
            self.state = 849
            self.match(NmodParser.LPRACKET)
            self.state = 850
            self.exp()
            self.state = 851
            self.match(NmodParser.RPRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtanContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATAN(self):
            return self.getToken(NmodParser.ATAN, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self):
            return self.getTypedRuleContext(NmodParser.ExpContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_atan

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtan" ):
                listener.enterAtan(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtan" ):
                listener.exitAtan(self)




    def atan(self):

        localctx = NmodParser.AtanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_atan)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self.match(NmodParser.ATAN)
            self.state = 854
            self.match(NmodParser.LPRACKET)
            self.state = 855
            self.exp()
            self.state = 856
            self.match(NmodParser.RPRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Atan2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATAN2(self):
            return self.getToken(NmodParser.ATAN2, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self):
            return self.getTypedRuleContext(NmodParser.ExpContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_atan2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtan2" ):
                listener.enterAtan2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtan2" ):
                listener.exitAtan2(self)




    def atan2(self):

        localctx = NmodParser.Atan2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_atan2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self.match(NmodParser.ATAN2)
            self.state = 859
            self.match(NmodParser.LPRACKET)
            self.state = 860
            self.exp()
            self.state = 861
            self.match(NmodParser.RPRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LogContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG(self):
            return self.getToken(NmodParser.LOG, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self):
            return self.getTypedRuleContext(NmodParser.ExpContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_log

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLog" ):
                listener.enterLog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLog" ):
                listener.exitLog(self)




    def log(self):

        localctx = NmodParser.LogContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_log)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.match(NmodParser.LOG)
            self.state = 864
            self.match(NmodParser.LPRACKET)
            self.state = 865
            self.exp()
            self.state = 866
            self.match(NmodParser.RPRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Log10Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG10(self):
            return self.getToken(NmodParser.LOG10, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self):
            return self.getTypedRuleContext(NmodParser.ExpContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_log10

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLog10" ):
                listener.enterLog10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLog10" ):
                listener.exitLog10(self)




    def log10(self):

        localctx = NmodParser.Log10Context(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_log10)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.match(NmodParser.LOG10)
            self.state = 869
            self.match(NmodParser.LPRACKET)
            self.state = 870
            self.exp()
            self.state = 871
            self.match(NmodParser.RPRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExponentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPONENT(self):
            return self.getToken(NmodParser.EXPONENT, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self):
            return self.getTypedRuleContext(NmodParser.ExpContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_exponent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExponent" ):
                listener.enterExponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExponent" ):
                listener.exitExponent(self)




    def exponent(self):

        localctx = NmodParser.ExponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_exponent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.match(NmodParser.EXPONENT)
            self.state = 874
            self.match(NmodParser.LPRACKET)
            self.state = 875
            self.exp()
            self.state = 876
            self.match(NmodParser.RPRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class F_maxContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._MAX = None # Token

        def MAX(self):
            return self.getToken(NmodParser.MAX, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_f_max

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterF_max" ):
                listener.enterF_max(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitF_max" ):
                listener.exitF_max(self)




    def f_max(self):

        localctx = NmodParser.F_maxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_f_max)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            localctx._MAX = self.match(NmodParser.MAX)
            c.generateSpecialERA((None if localctx._MAX is None else localctx._MAX.text))
            self.state = 880
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 882
            self.exp()
            c.generateSpecialActionParam((None if localctx._MAX is None else localctx._MAX.text))
            self.state = 891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 884
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 886
                self.exp()
                c.generateSpecialActionParam((None if localctx._MAX is None else localctx._MAX.text))
                self.state = 893
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 894
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._MAX is None else localctx._MAX.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class F_minContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._MIN = None # Token

        def MIN(self):
            return self.getToken(NmodParser.MIN, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_f_min

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterF_min" ):
                listener.enterF_min(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitF_min" ):
                listener.exitF_min(self)




    def f_min(self):

        localctx = NmodParser.F_minContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_f_min)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 898
            localctx._MIN = self.match(NmodParser.MIN)
            c.generateSpecialERA((None if localctx._MIN is None else localctx._MIN.text))
            self.state = 900
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 902
            self.exp()
            c.generateSpecialActionParam((None if localctx._MIN is None else localctx._MIN.text))
            self.state = 911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 904
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 906
                self.exp()
                c.generateSpecialActionParam((None if localctx._MIN is None else localctx._MIN.text))
                self.state = 913
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 914
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._MIN is None else localctx._MIN.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class F_rangeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._RANGE = None # Token

        def RANGE(self):
            return self.getToken(NmodParser.RANGE, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_f_range

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterF_range" ):
                listener.enterF_range(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitF_range" ):
                listener.exitF_range(self)




    def f_range(self):

        localctx = NmodParser.F_rangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_f_range)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 918
            localctx._RANGE = self.match(NmodParser.RANGE)
            c.generateSpecialERA((None if localctx._RANGE is None else localctx._RANGE.text))
            self.state = 920
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 922
            self.exp()
            c.generateSpecialActionParam((None if localctx._RANGE is None else localctx._RANGE.text))
            self.state = 931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 924
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 926
                self.exp()
                c.generateSpecialActionParam((None if localctx._RANGE is None else localctx._RANGE.text))
                self.state = 933
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 934
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._RANGE is None else localctx._RANGE.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class F_sumContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._SUM = None # Token

        def SUM(self):
            return self.getToken(NmodParser.SUM, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_f_sum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterF_sum" ):
                listener.enterF_sum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitF_sum" ):
                listener.exitF_sum(self)




    def f_sum(self):

        localctx = NmodParser.F_sumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_f_sum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            localctx._SUM = self.match(NmodParser.SUM)
            c.generateSpecialERA((None if localctx._SUM is None else localctx._SUM.text))
            self.state = 940
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 942
            self.exp()
            c.generateSpecialActionParam((None if localctx._SUM is None else localctx._SUM.text))
            self.state = 951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 944
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 946
                self.exp()
                c.generateSpecialActionParam((None if localctx._SUM is None else localctx._SUM.text))
                self.state = 953
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 954
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._SUM is None else localctx._SUM.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DiffContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIFF(self):
            return self.getToken(NmodParser.DIFF, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self):
            return self.getTypedRuleContext(NmodParser.ExpContext,0)


        def COMMA(self):
            return self.getToken(NmodParser.COMMA, 0)

        def CTEI(self):
            return self.getToken(NmodParser.CTEI, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_diff

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiff" ):
                listener.enterDiff(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiff" ):
                listener.exitDiff(self)




    def diff(self):

        localctx = NmodParser.DiffContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_diff)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self.match(NmodParser.DIFF)
            self.state = 959
            self.match(NmodParser.LPRACKET)
            self.state = 960
            self.exp()
            self.state = 961
            self.match(NmodParser.COMMA)
            self.state = 962
            self.match(NmodParser.CTEI)
            self.state = 963
            self.match(NmodParser.RPRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._PROD = None # Token

        def PROD(self):
            return self.getToken(NmodParser.PROD, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_prod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProd" ):
                listener.enterProd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProd" ):
                listener.exitProd(self)




    def prod(self):

        localctx = NmodParser.ProdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_prod)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            localctx._PROD = self.match(NmodParser.PROD)
            c.generateSpecialERA((None if localctx._PROD is None else localctx._PROD.text))
            self.state = 967
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 969
            self.exp()
            c.generateSpecialActionParam((None if localctx._PROD is None else localctx._PROD.text))
            self.state = 978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 971
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 973
                self.exp()
                c.generateSpecialActionParam((None if localctx._PROD is None else localctx._PROD.text))
                self.state = 980
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 981
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._PROD is None else localctx._PROD.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MeanContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEAN(self):
            return self.getToken(NmodParser.MEAN, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self):
            return self.getTypedRuleContext(NmodParser.ExpContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_mean

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMean" ):
                listener.enterMean(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMean" ):
                listener.exitMean(self)




    def mean(self):

        localctx = NmodParser.MeanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_mean)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.match(NmodParser.MEAN)
            self.state = 986
            self.match(NmodParser.LPRACKET)
            self.state = 987
            self.exp()
            self.state = 988
            self.match(NmodParser.RPRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MedianContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEDIAN(self):
            return self.getToken(NmodParser.MEDIAN, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self):
            return self.getTypedRuleContext(NmodParser.ExpContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_median

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMedian" ):
                listener.enterMedian(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMedian" ):
                listener.exitMedian(self)




    def median(self):

        localctx = NmodParser.MedianContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_median)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.match(NmodParser.MEDIAN)
            self.state = 991
            self.match(NmodParser.LPRACKET)
            self.state = 992
            self.exp()
            self.state = 993
            self.match(NmodParser.RPRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantileContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._QUANTILE = None # Token

        def QUANTILE(self):
            return self.getToken(NmodParser.QUANTILE, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_quantile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantile" ):
                listener.enterQuantile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantile" ):
                listener.exitQuantile(self)




    def quantile(self):

        localctx = NmodParser.QuantileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_quantile)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            localctx._QUANTILE = self.match(NmodParser.QUANTILE)
            c.generateSpecialERA((None if localctx._QUANTILE is None else localctx._QUANTILE.text))
            self.state = 997
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 999
            self.exp()
            c.generateSpecialActionParam((None if localctx._QUANTILE is None else localctx._QUANTILE.text))
            self.state = 1008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 1001
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 1003
                self.exp()
                c.generateSpecialActionParam((None if localctx._QUANTILE is None else localctx._QUANTILE.text))
                self.state = 1010
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1011
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._QUANTILE is None else localctx._QUANTILE.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RankContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANK(self):
            return self.getToken(NmodParser.RANK, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self):
            return self.getTypedRuleContext(NmodParser.ExpContext,0)


        def COMMA(self):
            return self.getToken(NmodParser.COMMA, 0)

        def ZERO(self):
            return self.getToken(NmodParser.ZERO, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def ONE(self):
            return self.getToken(NmodParser.ONE, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_rank

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRank" ):
                listener.enterRank(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRank" ):
                listener.exitRank(self)




    def rank(self):

        localctx = NmodParser.RankContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_rank)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1029
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 1015
                self.match(NmodParser.RANK)
                self.state = 1016
                self.match(NmodParser.LPRACKET)
                self.state = 1017
                self.exp()
                self.state = 1018
                self.match(NmodParser.COMMA)
                self.state = 1019
                self.match(NmodParser.ZERO)
                self.state = 1020
                self.match(NmodParser.RPRACKET)
                pass

            elif la_ == 2:
                self.state = 1022
                self.match(NmodParser.RANK)
                self.state = 1023
                self.match(NmodParser.LPRACKET)
                self.state = 1024
                self.exp()
                self.state = 1025
                self.match(NmodParser.COMMA)
                self.state = 1026
                self.match(NmodParser.ONE)
                self.state = 1027
                self.match(NmodParser.RPRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._VARIANCE = None # Token

        def VARIANCE(self):
            return self.getToken(NmodParser.VARIANCE, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_var

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar" ):
                listener.enterVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar" ):
                listener.exitVar(self)




    def var(self):

        localctx = NmodParser.VarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_var)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            localctx._VARIANCE = self.match(NmodParser.VARIANCE)
            c.generateSpecialERA((None if localctx._VARIANCE is None else localctx._VARIANCE.text))
            self.state = 1033
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 1035
            self.exp()
            c.generateSpecialActionParam((None if localctx._VARIANCE is None else localctx._VARIANCE.text))
            self.state = 1044
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 1037
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 1039
                self.exp()
                c.generateSpecialActionParam((None if localctx._VARIANCE is None else localctx._VARIANCE.text))
                self.state = 1046
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1047
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._VARIANCE is None else localctx._VARIANCE.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._SD = None # Token

        def SD(self):
            return self.getToken(NmodParser.SD, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_sd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSd" ):
                listener.enterSd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSd" ):
                listener.exitSd(self)




    def sd(self):

        localctx = NmodParser.SdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_sd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            localctx._SD = self.match(NmodParser.SD)
            c.generateSpecialERA((None if localctx._SD is None else localctx._SD.text))
            self.state = 1053
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 1055
            self.exp()
            c.generateSpecialActionParam((None if localctx._SD is None else localctx._SD.text))
            self.state = 1064
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 1057
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 1059
                self.exp()
                c.generateSpecialActionParam((None if localctx._SD is None else localctx._SD.text))
                self.state = 1066
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1067
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._SD is None else localctx._SD.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COR(self):
            return self.getToken(NmodParser.COR, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def PEARSON(self):
            return self.getToken(NmodParser.PEARSON, 0)

        def KENDALL(self):
            return self.getToken(NmodParser.KENDALL, 0)

        def SPEARMAN(self):
            return self.getToken(NmodParser.SPEARMAN, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_cor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCor" ):
                listener.enterCor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCor" ):
                listener.exitCor(self)




    def cor(self):

        localctx = NmodParser.CorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_cor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1071
            self.match(NmodParser.COR)
            self.state = 1072
            self.match(NmodParser.LPRACKET)
            self.state = 1073
            _la = self._input.LA(1)
            if not(((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & ((1 << (NmodParser.PEARSON - 92)) | (1 << (NmodParser.KENDALL - 92)) | (1 << (NmodParser.SPEARMAN - 92)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1074
            self.match(NmodParser.RPRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CovContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._COV = None # Token

        def COV(self):
            return self.getToken(NmodParser.COV, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_cov

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCov" ):
                listener.enterCov(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCov" ):
                listener.exitCov(self)




    def cov(self):

        localctx = NmodParser.CovContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_cov)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1076
            localctx._COV = self.match(NmodParser.COV)
            c.generateSpecialERA((None if localctx._COV is None else localctx._COV.text))
            self.state = 1078
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 1080
            self.exp()
            c.generateSpecialActionParam((None if localctx._COV is None else localctx._COV.text))
            self.state = 1089
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 1082
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 1084
                self.exp()
                c.generateSpecialActionParam((None if localctx._COV is None else localctx._COV.text))
                self.state = 1091
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1092
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._COV is None else localctx._COV.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class F_roundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._ROUND = None # Token

        def ROUND(self):
            return self.getToken(NmodParser.ROUND, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_f_round

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterF_round" ):
                listener.enterF_round(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitF_round" ):
                listener.exitF_round(self)




    def f_round(self):

        localctx = NmodParser.F_roundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_f_round)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1096
            localctx._ROUND = self.match(NmodParser.ROUND)
            c.generateSpecialERA((None if localctx._ROUND is None else localctx._ROUND.text))
            self.state = 1098
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 1100
            self.exp()
            c.generateSpecialActionParam((None if localctx._ROUND is None else localctx._ROUND.text))
            self.state = 1109
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 1102
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 1104
                self.exp()
                c.generateSpecialActionParam((None if localctx._ROUND is None else localctx._ROUND.text))
                self.state = 1111
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1112
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._ROUND is None else localctx._ROUND.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TransposeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._TRANSPOSE = None # Token

        def TRANSPOSE(self):
            return self.getToken(NmodParser.TRANSPOSE, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_transpose

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranspose" ):
                listener.enterTranspose(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranspose" ):
                listener.exitTranspose(self)




    def transpose(self):

        localctx = NmodParser.TransposeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_transpose)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1116
            localctx._TRANSPOSE = self.match(NmodParser.TRANSPOSE)
            c.generateSpecialERA((None if localctx._TRANSPOSE is None else localctx._TRANSPOSE.text))
            self.state = 1118
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 1120
            self.exp()
            c.generateSpecialActionParam((None if localctx._TRANSPOSE is None else localctx._TRANSPOSE.text))
            self.state = 1129
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 1122
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 1124
                self.exp()
                c.generateSpecialActionParam((None if localctx._TRANSPOSE is None else localctx._TRANSPOSE.text))
                self.state = 1131
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1132
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._TRANSPOSE is None else localctx._TRANSPOSE.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DiagonalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._DIAGONAL = None # Token

        def DIAGONAL(self):
            return self.getToken(NmodParser.DIAGONAL, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_diagonal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiagonal" ):
                listener.enterDiagonal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiagonal" ):
                listener.exitDiagonal(self)




    def diagonal(self):

        localctx = NmodParser.DiagonalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_diagonal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1136
            localctx._DIAGONAL = self.match(NmodParser.DIAGONAL)
            c.generateSpecialERA((None if localctx._DIAGONAL is None else localctx._DIAGONAL.text))
            self.state = 1138
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 1140
            self.exp()
            c.generateSpecialActionParam((None if localctx._DIAGONAL is None else localctx._DIAGONAL.text))
            self.state = 1149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 1142
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 1144
                self.exp()
                c.generateSpecialActionParam((None if localctx._DIAGONAL is None else localctx._DIAGONAL.text))
                self.state = 1151
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1152
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._DIAGONAL is None else localctx._DIAGONAL.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GinvContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._GINV = None # Token

        def GINV(self):
            return self.getToken(NmodParser.GINV, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_ginv

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGinv" ):
                listener.enterGinv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGinv" ):
                listener.exitGinv(self)




    def ginv(self):

        localctx = NmodParser.GinvContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_ginv)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1156
            localctx._GINV = self.match(NmodParser.GINV)
            c.generateSpecialERA((None if localctx._GINV is None else localctx._GINV.text))
            self.state = 1158
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 1160
            self.exp()
            c.generateSpecialActionParam((None if localctx._GINV is None else localctx._GINV.text))
            self.state = 1169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 1162
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 1164
                self.exp()
                c.generateSpecialActionParam((None if localctx._GINV is None else localctx._GINV.text))
                self.state = 1171
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1172
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._GINV is None else localctx._GINV.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RowsumContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._ROWSUM = None # Token

        def ROWSUM(self):
            return self.getToken(NmodParser.ROWSUM, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_rowsum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowsum" ):
                listener.enterRowsum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowsum" ):
                listener.exitRowsum(self)




    def rowsum(self):

        localctx = NmodParser.RowsumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_rowsum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1176
            localctx._ROWSUM = self.match(NmodParser.ROWSUM)
            c.generateSpecialERA((None if localctx._ROWSUM is None else localctx._ROWSUM.text))
            self.state = 1178
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 1180
            self.exp()
            c.generateSpecialActionParam((None if localctx._ROWSUM is None else localctx._ROWSUM.text))
            self.state = 1189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 1182
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 1184
                self.exp()
                c.generateSpecialActionParam((None if localctx._ROWSUM is None else localctx._ROWSUM.text))
                self.state = 1191
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1192
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._ROWSUM is None else localctx._ROWSUM.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColsumContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._COLSUM = None # Token

        def COLSUM(self):
            return self.getToken(NmodParser.COLSUM, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_colsum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColsum" ):
                listener.enterColsum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColsum" ):
                listener.exitColsum(self)




    def colsum(self):

        localctx = NmodParser.ColsumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_colsum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1196
            localctx._COLSUM = self.match(NmodParser.COLSUM)
            c.generateSpecialERA((None if localctx._COLSUM is None else localctx._COLSUM.text))
            self.state = 1198
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 1200
            self.exp()
            c.generateSpecialActionParam((None if localctx._COLSUM is None else localctx._COLSUM.text))
            self.state = 1209
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 1202
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 1204
                self.exp()
                c.generateSpecialActionParam((None if localctx._COLSUM is None else localctx._COLSUM.text))
                self.state = 1211
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1212
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._COLSUM is None else localctx._COLSUM.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LoadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._LOAD = None # Token

        def LOAD(self):
            return self.getToken(NmodParser.LOAD, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_load

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoad" ):
                listener.enterLoad(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoad" ):
                listener.exitLoad(self)




    def load(self):

        localctx = NmodParser.LoadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_load)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1216
            localctx._LOAD = self.match(NmodParser.LOAD)
            c.generateSpecialERA((None if localctx._LOAD is None else localctx._LOAD.text))
            self.state = 1218
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 1220
            self.exp()
            c.generateSpecialActionParam((None if localctx._LOAD is None else localctx._LOAD.text))
            self.state = 1229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 1222
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 1224
                self.exp()
                c.generateSpecialActionParam((None if localctx._LOAD is None else localctx._LOAD.text))
                self.state = 1231
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1232
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._LOAD is None else localctx._LOAD.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._DATA = None # Token

        def DATA(self):
            return self.getToken(NmodParser.DATA, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_data

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData" ):
                listener.enterData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData" ):
                listener.exitData(self)




    def data(self):

        localctx = NmodParser.DataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_data)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1236
            localctx._DATA = self.match(NmodParser.DATA)
            c.generateSpecialERA((None if localctx._DATA is None else localctx._DATA.text))
            self.state = 1238
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 1240
            self.exp()
            c.generateSpecialActionParam((None if localctx._DATA is None else localctx._DATA.text))
            self.state = 1249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 1242
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 1244
                self.exp()
                c.generateSpecialActionParam((None if localctx._DATA is None else localctx._DATA.text))
                self.state = 1251
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1252
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._DATA is None else localctx._DATA.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LibraryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIBRARY(self):
            return self.getToken(NmodParser.LIBRARY, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def STRING(self):
            return self.getToken(NmodParser.STRING, 0)

        def id_access(self):
            return self.getTypedRuleContext(NmodParser.Id_accessContext,0)


        def getRuleIndex(self):
            return NmodParser.RULE_library

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibrary" ):
                listener.enterLibrary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibrary" ):
                listener.exitLibrary(self)




    def library(self):

        localctx = NmodParser.LibraryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_library)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1256
            self.match(NmodParser.LIBRARY)
            self.state = 1257
            self.match(NmodParser.LPRACKET)
            self.state = 1260
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NmodParser.STRING]:
                self.state = 1258
                self.match(NmodParser.STRING)
                pass
            elif token in [NmodParser.ID]:
                self.state = 1259
                self.id_access()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1262
            self.match(NmodParser.RPRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RpoisContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._RPOIS = None # Token

        def RPOIS(self):
            return self.getToken(NmodParser.RPOIS, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_rpois

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRpois" ):
                listener.enterRpois(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRpois" ):
                listener.exitRpois(self)




    def rpois(self):

        localctx = NmodParser.RpoisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_rpois)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1264
            localctx._RPOIS = self.match(NmodParser.RPOIS)
            c.generateSpecialERA((None if localctx._RPOIS is None else localctx._RPOIS.text))
            self.state = 1266
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 1268
            self.exp()
            c.generateSpecialActionParam((None if localctx._RPOIS is None else localctx._RPOIS.text))
            self.state = 1277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 1270
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 1272
                self.exp()
                c.generateSpecialActionParam((None if localctx._RPOIS is None else localctx._RPOIS.text))
                self.state = 1279
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1280
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._RPOIS is None else localctx._RPOIS.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RweibullContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._RWEIBULL = None # Token

        def RWEIBULL(self):
            return self.getToken(NmodParser.RWEIBULL, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_rweibull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRweibull" ):
                listener.enterRweibull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRweibull" ):
                listener.exitRweibull(self)




    def rweibull(self):

        localctx = NmodParser.RweibullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_rweibull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1284
            localctx._RWEIBULL = self.match(NmodParser.RWEIBULL)
            c.generateSpecialERA((None if localctx._RWEIBULL is None else localctx._RWEIBULL.text))
            self.state = 1286
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 1288
            self.exp()
            c.generateSpecialActionParam((None if localctx._RWEIBULL is None else localctx._RWEIBULL.text))
            self.state = 1297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 1290
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 1292
                self.exp()
                c.generateSpecialActionParam((None if localctx._RWEIBULL is None else localctx._RWEIBULL.text))
                self.state = 1299
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1300
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._RWEIBULL is None else localctx._RWEIBULL.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RbinomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._RBINOM = None # Token

        def RBINOM(self):
            return self.getToken(NmodParser.RBINOM, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_rbinom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRbinom" ):
                listener.enterRbinom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRbinom" ):
                listener.exitRbinom(self)




    def rbinom(self):

        localctx = NmodParser.RbinomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_rbinom)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1304
            localctx._RBINOM = self.match(NmodParser.RBINOM)
            c.generateSpecialERA((None if localctx._RBINOM is None else localctx._RBINOM.text))
            self.state = 1306
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 1308
            self.exp()
            c.generateSpecialActionParam((None if localctx._RBINOM is None else localctx._RBINOM.text))
            self.state = 1317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 1310
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 1312
                self.exp()
                c.generateSpecialActionParam((None if localctx._RBINOM is None else localctx._RBINOM.text))
                self.state = 1319
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1320
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._RBINOM is None else localctx._RBINOM.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RgeomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._RGEOM = None # Token

        def RGEOM(self):
            return self.getToken(NmodParser.RGEOM, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_rgeom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRgeom" ):
                listener.enterRgeom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRgeom" ):
                listener.exitRgeom(self)




    def rgeom(self):

        localctx = NmodParser.RgeomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_rgeom)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1324
            localctx._RGEOM = self.match(NmodParser.RGEOM)
            c.generateSpecialERA((None if localctx._RGEOM is None else localctx._RGEOM.text))
            self.state = 1326
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 1328
            self.exp()
            c.generateSpecialActionParam((None if localctx._RGEOM is None else localctx._RGEOM.text))
            self.state = 1337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 1330
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 1332
                self.exp()
                c.generateSpecialActionParam((None if localctx._RGEOM is None else localctx._RGEOM.text))
                self.state = 1339
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1340
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._RGEOM is None else localctx._RGEOM.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RunifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._RUNIF = None # Token

        def RUNIF(self):
            return self.getToken(NmodParser.RUNIF, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_runif

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRunif" ):
                listener.enterRunif(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRunif" ):
                listener.exitRunif(self)




    def runif(self):

        localctx = NmodParser.RunifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_runif)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1344
            localctx._RUNIF = self.match(NmodParser.RUNIF)
            c.generateSpecialERA((None if localctx._RUNIF is None else localctx._RUNIF.text))
            self.state = 1346
            self.match(NmodParser.LPRACKET)
            c.insertFalseBottom()
            self.state = 1348
            self.exp()
            c.generateSpecialActionParam((None if localctx._RUNIF is None else localctx._RUNIF.text))
            self.state = 1357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 1350
                self.match(NmodParser.COMMA)
                c.moveParameterPointer()
                self.state = 1352
                self.exp()
                c.generateSpecialActionParam((None if localctx._RUNIF is None else localctx._RUNIF.text))
                self.state = 1359
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1360
            self.match(NmodParser.RPRACKET)
            c.removeFalseBottom()
            c.resetParameterPointerSpecialFunction((None if localctx._RUNIF is None else localctx._RUNIF.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





