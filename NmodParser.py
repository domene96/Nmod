# Generated from Nmod.g4 by ANTLR 4.7
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


from Compiler import *
# from VirtualMachine import *
c = Compiler()
# vm = VirtualMachine()

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3l")
        buf.write("\u0427\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\3\2\7\2\u009c\n\2\f\2\16\2\u009f\13\2\3\2\7\2")
        buf.write("\u00a2\n\2\f\2\16\2\u00a5\13\2\3\2\3\2\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\5\3\u00af\n\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write("\3\4\3\4\7\4\u00bb\n\4\f\4\16\4\u00be\13\4\3\4\3\4\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\7\5\u00d5\n\5\f\5\16\5\u00d8\13\5\3")
        buf.write("\5\3\5\5\5\u00dc\n\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write("\6\3\6\3\6\7\6\u00e9\n\6\f\6\16\6\u00ec\13\6\3\6\3\6\3")
        buf.write("\6\5\6\u00f1\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\5\7\u00fe\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\7\7\u010e\n\7\f\7\16\7\u0111\13")
        buf.write("\7\5\7\u0113\n\7\3\7\3\7\7\7\u0117\n\7\f\7\16\7\u011a")
        buf.write("\13\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\3\t\3\t\7\t\u012a\n\t\f\t\16\t\u012d\13\t\3\t\3\t\3\n")
        buf.write("\3\n\3\n\3\n\3\n\3\n\5\n\u0137\n\n\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3")
        buf.write("\f\5\f\u014a\n\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\6\16\u015d\n\16\r")
        buf.write("\16\16\16\u015e\3\16\3\16\7\16\u0163\n\16\f\16\16\16\u0166")
        buf.write("\13\16\5\16\u0168\n\16\3\16\3\16\3\16\3\16\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\6\17\u0175\n\17\r\17\16\17\u0176")
        buf.write("\3\17\3\17\7\17\u017b\n\17\f\17\16\17\u017e\13\17\5\17")
        buf.write("\u0180\n\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3")
        buf.write("\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\7\20\u01c8\n\20\f")
        buf.write("\20\16\20\u01cb\13\20\5\20\u01cd\n\20\3\20\3\20\3\20\5")
        buf.write("\20\u01d2\n\20\3\21\3\21\3\21\3\21\3\21\3\21\6\21\u01da")
        buf.write("\n\21\r\21\16\21\u01db\3\21\6\21\u01df\n\21\r\21\16\21")
        buf.write("\u01e0\3\21\3\21\7\21\u01e5\n\21\f\21\16\21\u01e8\13\21")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\6\22\u01f6\n\22\r\22\16\22\u01f7\3\22\6\22\u01fb")
        buf.write("\n\22\r\22\16\22\u01fc\3\22\3\22\7\22\u0201\n\22\f\22")
        buf.write("\16\22\u0204\13\22\3\23\3\23\3\23\3\23\3\23\3\23\6\23")
        buf.write("\u020c\n\23\r\23\16\23\u020d\3\23\6\23\u0211\n\23\r\23")
        buf.write("\16\23\u0212\3\23\3\23\7\23\u0217\n\23\f\23\16\23\u021a")
        buf.write("\13\23\3\24\3\24\3\24\3\24\3\24\3\24\6\24\u0222\n\24\r")
        buf.write("\24\16\24\u0223\3\24\6\24\u0227\n\24\r\24\16\24\u0228")
        buf.write("\3\24\3\24\7\24\u022d\n\24\f\24\16\24\u0230\13\24\3\25")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u0239\n\25\3\25\5")
        buf.write("\25\u023c\n\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u0257\n\26\3\27\3")
        buf.write("\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37")
        buf.write("\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3 ")
        buf.write("\3 \3 \3 \3 \3 \3 \3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3")
        buf.write("!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3#\3")
        buf.write("#\3#\3#\3#\3#\3$\3$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3&\3")
        buf.write("&\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3")
        buf.write("(\3)\3)\3)\3)\3)\3)\3*\3*\3*\3*\3*\3*\3+\3+\3+\3+\3+\3")
        buf.write("+\3,\3,\3,\3,\3,\3,\3-\3-\3-\3-\3-\7-\u0313\n-\f-\16-")
        buf.write("\u0316\13-\3-\3-\3-\3.\3.\3.\3.\3.\7.\u0320\n.\f.\16.")
        buf.write("\u0323\13.\3.\3.\3.\3/\3/\3/\3/\3/\7/\u032d\n/\f/\16/")
        buf.write("\u0330\13/\3/\3/\3/\3\60\3\60\3\60\3\60\3\60\7\60\u033a")
        buf.write("\n\60\f\60\16\60\u033d\13\60\3\60\3\60\3\60\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\3\62\3\62\3\62\3\62\3\62")
        buf.write("\7\62\u034f\n\62\f\62\16\62\u0352\13\62\3\62\3\62\3\62")
        buf.write("\3\63\3\63\3\63\3\63\3\63\3\63\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\65\3\65\3\65\3\65\3\65\7\65\u0368\n\65\f\65\16")
        buf.write("\65\u036b\13\65\3\65\3\65\3\65\3\66\3\66\3\66\3\66\3\66")
        buf.write("\7\66\u0375\n\66\f\66\16\66\u0378\13\66\3\66\3\66\3\66")
        buf.write("\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67")
        buf.write("\3\67\3\67\3\67\3\67\3\67\5\67\u038d\n\67\38\38\38\38")
        buf.write("\38\38\38\38\39\39\39\39\39\39\3:\3:\3:\3:\3:\3:\3:\3")
        buf.write(":\3:\3:\3;\3;\3;\3;\3;\3;\3<\3<\3<\3<\3<\7<\u03b2\n<\f")
        buf.write("<\16<\u03b5\13<\3<\3<\3<\3=\3=\3=\3=\3=\3=\3>\3>\3>\3")
        buf.write(">\3>\3>\3?\3?\3?\3?\3?\3?\3@\3@\3@\3@\3@\3@\3A\3A\3A\3")
        buf.write("A\3A\3A\3B\3B\3B\3B\3B\7B\u03dd\nB\fB\16B\u03e0\13B\3")
        buf.write("B\3B\3B\3C\3C\3C\3C\3C\7C\u03ea\nC\fC\16C\u03ed\13C\3")
        buf.write("C\3C\3C\3D\3D\3D\3D\5D\u03f6\nD\3D\3D\3D\3E\3E\3E\3E\3")
        buf.write("E\3E\3E\3E\3E\3E\3F\3F\3F\3F\3F\3F\3G\3G\3G\3G\3G\3G\3")
        buf.write("G\3G\3G\3G\3H\3H\3H\3H\3H\3H\3H\3H\3I\3I\3I\3I\3I\3I\3")
        buf.write("I\3I\3J\3J\3J\2\2K\2\4\6\b\n\f\16\20\22\24\26\30\32\34")
        buf.write("\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjln")
        buf.write("prtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e")
        buf.write("\u0090\u0092\2\4\3\2\'(\3\2_a\2\u0453\2\u0094\3\2\2\2")
        buf.write("\4\u00ae\3\2\2\2\6\u00b0\3\2\2\2\b\u00c1\3\2\2\2\n\u00dd")
        buf.write("\3\2\2\2\f\u00f2\3\2\2\2\16\u011f\3\2\2\2\20\u0127\3\2")
        buf.write("\2\2\22\u0136\3\2\2\2\24\u0138\3\2\2\2\26\u0140\3\2\2")
        buf.write("\2\30\u014d\3\2\2\2\32\u0156\3\2\2\2\34\u016d\3\2\2\2")
        buf.write("\36\u01d1\3\2\2\2 \u01d3\3\2\2\2\"\u01e9\3\2\2\2$\u0205")
        buf.write("\3\2\2\2&\u021b\3\2\2\2(\u023b\3\2\2\2*\u0256\3\2\2\2")
        buf.write(",\u0258\3\2\2\2.\u025d\3\2\2\2\60\u0269\3\2\2\2\62\u0271")
        buf.write("\3\2\2\2\64\u027b\3\2\2\2\66\u0283\3\2\2\28\u028b\3\2")
        buf.write("\2\2:\u0295\3\2\2\2<\u02a1\3\2\2\2>\u02ad\3\2\2\2@\u02b9")
        buf.write("\3\2\2\2B\u02c5\3\2\2\2D\u02d1\3\2\2\2F\u02d7\3\2\2\2")
        buf.write("H\u02dd\3\2\2\2J\u02e3\3\2\2\2L\u02e9\3\2\2\2N\u02ef\3")
        buf.write("\2\2\2P\u02f5\3\2\2\2R\u02fb\3\2\2\2T\u0301\3\2\2\2V\u0307")
        buf.write("\3\2\2\2X\u030d\3\2\2\2Z\u031a\3\2\2\2\\\u0327\3\2\2\2")
        buf.write("^\u0334\3\2\2\2`\u0341\3\2\2\2b\u0349\3\2\2\2d\u0356\3")
        buf.write("\2\2\2f\u035c\3\2\2\2h\u0362\3\2\2\2j\u036f\3\2\2\2l\u038c")
        buf.write("\3\2\2\2n\u038e\3\2\2\2p\u0396\3\2\2\2r\u039c\3\2\2\2")
        buf.write("t\u03a6\3\2\2\2v\u03ac\3\2\2\2x\u03b9\3\2\2\2z\u03bf\3")
        buf.write("\2\2\2|\u03c5\3\2\2\2~\u03cb\3\2\2\2\u0080\u03d1\3\2\2")
        buf.write("\2\u0082\u03d7\3\2\2\2\u0084\u03e4\3\2\2\2\u0086\u03f1")
        buf.write("\3\2\2\2\u0088\u03fa\3\2\2\2\u008a\u0404\3\2\2\2\u008c")
        buf.write("\u040a\3\2\2\2\u008e\u0414\3\2\2\2\u0090\u041c\3\2\2\2")
        buf.write("\u0092\u0424\3\2\2\2\u0094\u0095\b\2\1\2\u0095\u0096\7")
        buf.write("\4\2\2\u0096\u0097\7j\2\2\u0097\u0098\b\2\1\2\u0098\u0099")
        buf.write("\b\2\1\2\u0099\u009d\7\t\2\2\u009a\u009c\5\6\4\2\u009b")
        buf.write("\u009a\3\2\2\2\u009c\u009f\3\2\2\2\u009d\u009b\3\2\2\2")
        buf.write("\u009d\u009e\3\2\2\2\u009e\u00a3\3\2\2\2\u009f\u009d\3")
        buf.write("\2\2\2\u00a0\u00a2\5\f\7\2\u00a1\u00a0\3\2\2\2\u00a2\u00a5")
        buf.write("\3\2\2\2\u00a3\u00a1\3\2\2\2\u00a3\u00a4\3\2\2\2\u00a4")
        buf.write("\u00a6\3\2\2\2\u00a5\u00a3\3\2\2\2\u00a6\u00a7\5\16\b")
        buf.write("\2\u00a7\3\3\2\2\2\u00a8\u00a9\7\26\2\2\u00a9\u00af\b")
        buf.write("\3\1\2\u00aa\u00ab\7\27\2\2\u00ab\u00af\b\3\1\2\u00ac")
        buf.write("\u00ad\7\30\2\2\u00ad\u00af\b\3\1\2\u00ae\u00a8\3\2\2")
        buf.write("\2\u00ae\u00aa\3\2\2\2\u00ae\u00ac\3\2\2\2\u00af\5\3\2")
        buf.write("\2\2\u00b0\u00b1\7\6\2\2\u00b1\u00b2\5\4\3\2\u00b2\u00b3")
        buf.write("\b\4\1\2\u00b3\u00b4\7\t\2\2\u00b4\u00b5\5\b\5\2\u00b5")
        buf.write("\u00bc\b\4\1\2\u00b6\u00b7\7\n\2\2\u00b7\u00b8\5\b\5\2")
        buf.write("\u00b8\u00b9\b\4\1\2\u00b9\u00bb\3\2\2\2\u00ba\u00b6\3")
        buf.write("\2\2\2\u00bb\u00be\3\2\2\2\u00bc\u00ba\3\2\2\2\u00bc\u00bd")
        buf.write("\3\2\2\2\u00bd\u00bf\3\2\2\2\u00be\u00bc\3\2\2\2\u00bf")
        buf.write("\u00c0\7\b\2\2\u00c0\7\3\2\2\2\u00c1\u00db\7j\2\2\u00c2")
        buf.write("\u00c3\7\13\2\2\u00c3\u00c4\b\5\1\2\u00c4\u00c5\7f\2\2")
        buf.write("\u00c5\u00c6\b\5\1\2\u00c6\u00c7\b\5\1\2\u00c7\u00c8\7")
        buf.write("\t\2\2\u00c8\u00c9\7f\2\2\u00c9\u00ca\b\5\1\2\u00ca\u00d6")
        buf.write("\b\5\1\2\u00cb\u00cc\7\n\2\2\u00cc\u00cd\b\5\1\2\u00cd")
        buf.write("\u00ce\7f\2\2\u00ce\u00cf\b\5\1\2\u00cf\u00d0\b\5\1\2")
        buf.write("\u00d0\u00d1\7\t\2\2\u00d1\u00d2\7f\2\2\u00d2\u00d3\b")
        buf.write("\5\1\2\u00d3\u00d5\b\5\1\2\u00d4\u00cb\3\2\2\2\u00d5\u00d8")
        buf.write("\3\2\2\2\u00d6\u00d4\3\2\2\2\u00d6\u00d7\3\2\2\2\u00d7")
        buf.write("\u00d9\3\2\2\2\u00d8\u00d6\3\2\2\2\u00d9\u00da\7\f\2\2")
        buf.write("\u00da\u00dc\b\5\1\2\u00db\u00c2\3\2\2\2\u00db\u00dc\3")
        buf.write("\2\2\2\u00dc\t\3\2\2\2\u00dd\u00de\7j\2\2\u00de\u00f0")
        buf.write("\b\6\1\2\u00df\u00e0\7\13\2\2\u00e0\u00e1\b\6\1\2\u00e1")
        buf.write("\u00e2\5$\23\2\u00e2\u00ea\b\6\1\2\u00e3\u00e4\7\n\2\2")
        buf.write("\u00e4\u00e5\b\6\1\2\u00e5\u00e6\5$\23\2\u00e6\u00e7\b")
        buf.write("\6\1\2\u00e7\u00e9\3\2\2\2\u00e8\u00e3\3\2\2\2\u00e9\u00ec")
        buf.write("\3\2\2\2\u00ea\u00e8\3\2\2\2\u00ea\u00eb\3\2\2\2\u00eb")
        buf.write("\u00ed\3\2\2\2\u00ec\u00ea\3\2\2\2\u00ed\u00ee\7\f\2\2")
        buf.write("\u00ee\u00ef\b\6\1\2\u00ef\u00f1\3\2\2\2\u00f0\u00df\3")
        buf.write("\2\2\2\u00f0\u00f1\3\2\2\2\u00f1\13\3\2\2\2\u00f2\u00f3")
        buf.write("\7j\2\2\u00f3\u00f4\b\7\1\2\u00f4\u00fd\7\21\2\2\u00f5")
        buf.write("\u00f6\7\25\2\2\u00f6\u00f7\b\7\1\2\u00f7\u00fe\b\7\1")
        buf.write("\2\u00f8\u00f9\5\4\3\2\u00f9\u00fa\b\7\1\2\u00fa\u00fb")
        buf.write("\b\7\1\2\u00fb\u00fc\b\7\1\2\u00fc\u00fe\3\2\2\2\u00fd")
        buf.write("\u00f5\3\2\2\2\u00fd\u00f8\3\2\2\2\u00fe\u00ff\3\2\2\2")
        buf.write("\u00ff\u0100\7\22\2\2\u0100\u0112\7\r\2\2\u0101\u0102")
        buf.write("\5\4\3\2\u0102\u0103\b\7\1\2\u0103\u0104\7j\2\2\u0104")
        buf.write("\u0105\b\7\1\2\u0105\u010f\b\7\1\2\u0106\u0107\7\n\2\2")
        buf.write("\u0107\u0108\5\4\3\2\u0108\u0109\b\7\1\2\u0109\u010a\7")
        buf.write("j\2\2\u010a\u010b\b\7\1\2\u010b\u010c\b\7\1\2\u010c\u010e")
        buf.write("\3\2\2\2\u010d\u0106\3\2\2\2\u010e\u0111\3\2\2\2\u010f")
        buf.write("\u010d\3\2\2\2\u010f\u0110\3\2\2\2\u0110\u0113\3\2\2\2")
        buf.write("\u0111\u010f\3\2\2\2\u0112\u0101\3\2\2\2\u0112\u0113\3")
        buf.write("\2\2\2\u0113\u0114\3\2\2\2\u0114\u0118\7\16\2\2\u0115")
        buf.write("\u0117\5\6\4\2\u0116\u0115\3\2\2\2\u0117\u011a\3\2\2\2")
        buf.write("\u0118\u0116\3\2\2\2\u0118\u0119\3\2\2\2\u0119\u011b\3")
        buf.write("\2\2\2\u011a\u0118\3\2\2\2\u011b\u011c\b\7\1\2\u011c\u011d")
        buf.write("\5\20\t\2\u011d\u011e\b\7\1\2\u011e\r\3\2\2\2\u011f\u0120")
        buf.write("\7\5\2\2\u0120\u0121\b\b\1\2\u0121\u0122\b\b\1\2\u0122")
        buf.write("\u0123\7\r\2\2\u0123\u0124\7\16\2\2\u0124\u0125\5\20\t")
        buf.write("\2\u0125\u0126\b\b\1\2\u0126\17\3\2\2\2\u0127\u012b\7")
        buf.write("\17\2\2\u0128\u012a\5\22\n\2\u0129\u0128\3\2\2\2\u012a")
        buf.write("\u012d\3\2\2\2\u012b\u0129\3\2\2\2\u012b\u012c\3\2\2\2")
        buf.write("\u012c\u012e\3\2\2\2\u012d\u012b\3\2\2\2\u012e\u012f\7")
        buf.write("\20\2\2\u012f\21\3\2\2\2\u0130\u0137\5\24\13\2\u0131\u0137")
        buf.write("\5\26\f\2\u0132\u0137\5\32\16\2\u0133\u0137\5\34\17\2")
        buf.write("\u0134\u0137\5\30\r\2\u0135\u0137\5\36\20\2\u0136\u0130")
        buf.write("\3\2\2\2\u0136\u0131\3\2\2\2\u0136\u0132\3\2\2\2\u0136")
        buf.write("\u0133\3\2\2\2\u0136\u0134\3\2\2\2\u0136\u0135\3\2\2\2")
        buf.write("\u0137\23\3\2\2\2\u0138\u0139\5\n\6\2\u0139\u013a\b\13")
        buf.write("\1\2\u013a\u013b\7\36\2\2\u013b\u013c\b\13\1\2\u013c\u013d")
        buf.write("\5$\23\2\u013d\u013e\b\13\1\2\u013e\u013f\7\b\2\2\u013f")
        buf.write("\25\3\2\2\2\u0140\u0141\7\31\2\2\u0141\u0142\7\r\2\2\u0142")
        buf.write("\u0143\5 \21\2\u0143\u0144\7\16\2\2\u0144\u0145\b\f\1")
        buf.write("\2\u0145\u0149\5\20\t\2\u0146\u0147\7\32\2\2\u0147\u0148")
        buf.write("\b\f\1\2\u0148\u014a\5\20\t\2\u0149\u0146\3\2\2\2\u0149")
        buf.write("\u014a\3\2\2\2\u014a\u014b\3\2\2\2\u014b\u014c\b\f\1\2")
        buf.write("\u014c\27\3\2\2\2\u014d\u014e\7\33\2\2\u014e\u014f\b\r")
        buf.write("\1\2\u014f\u0150\7\r\2\2\u0150\u0151\5 \21\2\u0151\u0152")
        buf.write("\7\16\2\2\u0152\u0153\b\r\1\2\u0153\u0154\5\20\t\2\u0154")
        buf.write("\u0155\b\r\1\2\u0155\31\3\2\2\2\u0156\u0157\7\34\2\2\u0157")
        buf.write("\u0167\7\r\2\2\u0158\u0159\7i\2\2\u0159\u015a\b\16\1\2")
        buf.write("\u015a\u0168\b\16\1\2\u015b\u015d\5 \21\2\u015c\u015b")
        buf.write("\3\2\2\2\u015d\u015e\3\2\2\2\u015e\u015c\3\2\2\2\u015e")
        buf.write("\u015f\3\2\2\2\u015f\u0164\3\2\2\2\u0160\u0161\7\n\2\2")
        buf.write("\u0161\u0163\5 \21\2\u0162\u0160\3\2\2\2\u0163\u0166\3")
        buf.write("\2\2\2\u0164\u0162\3\2\2\2\u0164\u0165\3\2\2\2\u0165\u0168")
        buf.write("\3\2\2\2\u0166\u0164\3\2\2\2\u0167\u0158\3\2\2\2\u0167")
        buf.write("\u015c\3\2\2\2\u0167\u0168\3\2\2\2\u0168\u0169\3\2\2\2")
        buf.write("\u0169\u016a\7\16\2\2\u016a\u016b\7\b\2\2\u016b\u016c")
        buf.write("\b\16\1\2\u016c\33\3\2\2\2\u016d\u016e\7\35\2\2\u016e")
        buf.write("\u017f\7\r\2\2\u016f\u0170\7i\2\2\u0170\u0171\b\17\1\2")
        buf.write("\u0171\u0172\b\17\1\2\u0172\u0180\b\17\1\2\u0173\u0175")
        buf.write("\5 \21\2\u0174\u0173\3\2\2\2\u0175\u0176\3\2\2\2\u0176")
        buf.write("\u0174\3\2\2\2\u0176\u0177\3\2\2\2\u0177\u017c\3\2\2\2")
        buf.write("\u0178\u0179\7\n\2\2\u0179\u017b\5 \21\2\u017a\u0178\3")
        buf.write("\2\2\2\u017b\u017e\3\2\2\2\u017c\u017a\3\2\2\2\u017c\u017d")
        buf.write("\3\2\2\2\u017d\u0180\3\2\2\2\u017e\u017c\3\2\2\2\u017f")
        buf.write("\u016f\3\2\2\2\u017f\u0174\3\2\2\2\u017f\u0180\3\2\2\2")
        buf.write("\u0180\u0181\3\2\2\2\u0181\u0182\7\16\2\2\u0182\u0183")
        buf.write("\7\b\2\2\u0183\u0184\b\17\1\2\u0184\35\3\2\2\2\u0185\u01d2")
        buf.write("\5,\27\2\u0186\u01d2\5.\30\2\u0187\u01d2\5\60\31\2\u0188")
        buf.write("\u01d2\5\62\32\2\u0189\u01d2\5\64\33\2\u018a\u01d2\5\66")
        buf.write("\34\2\u018b\u01d2\58\35\2\u018c\u01d2\5:\36\2\u018d\u01d2")
        buf.write("\5<\37\2\u018e\u01d2\5> \2\u018f\u01d2\5@!\2\u0190\u01d2")
        buf.write("\5B\"\2\u0191\u01d2\5D#\2\u0192\u01d2\5F$\2\u0193\u01d2")
        buf.write("\5H%\2\u0194\u01d2\5J&\2\u0195\u01d2\5L\'\2\u0196\u01d2")
        buf.write("\5N(\2\u0197\u01d2\5P)\2\u0198\u01d2\5R*\2\u0199\u01d2")
        buf.write("\5T+\2\u019a\u01d2\5V,\2\u019b\u01d2\5X-\2\u019c\u01d2")
        buf.write("\5Z.\2\u019d\u01d2\5\\/\2\u019e\u01d2\5^\60\2\u019f\u01d2")
        buf.write("\5`\61\2\u01a0\u01d2\5b\62\2\u01a1\u01d2\5d\63\2\u01a2")
        buf.write("\u01d2\5f\64\2\u01a3\u01d2\5h\65\2\u01a4\u01d2\5j\66\2")
        buf.write("\u01a5\u01d2\5l\67\2\u01a6\u01d2\5n8\2\u01a7\u01d2\5p")
        buf.write("9\2\u01a8\u01d2\5r:\2\u01a9\u01d2\5t;\2\u01aa\u01d2\5")
        buf.write("v<\2\u01ab\u01d2\5x=\2\u01ac\u01d2\5z>\2\u01ad\u01d2\5")
        buf.write("|?\2\u01ae\u01d2\5~@\2\u01af\u01d2\5\u0080A\2\u01b0\u01d2")
        buf.write("\5\u0082B\2\u01b1\u01d2\5\u0084C\2\u01b2\u01d2\5\u0086")
        buf.write("D\2\u01b3\u01d2\5\u0088E\2\u01b4\u01d2\5\u008aF\2\u01b5")
        buf.write("\u01d2\5\u008cG\2\u01b6\u01d2\5\u008eH\2\u01b7\u01d2\5")
        buf.write("\u0090I\2\u01b8\u01b9\7j\2\2\u01b9\u01ba\b\20\1\2\u01ba")
        buf.write("\u01bb\b\20\1\2\u01bb\u01bc\b\20\1\2\u01bc\u01bd\b\20")
        buf.write("\1\2\u01bd\u01be\b\20\1\2\u01be\u01bf\7\r\2\2\u01bf\u01cc")
        buf.write("\b\20\1\2\u01c0\u01c1\5$\23\2\u01c1\u01c9\b\20\1\2\u01c2")
        buf.write("\u01c3\7\n\2\2\u01c3\u01c4\b\20\1\2\u01c4\u01c5\5$\23")
        buf.write("\2\u01c5\u01c6\b\20\1\2\u01c6\u01c8\3\2\2\2\u01c7\u01c2")
        buf.write("\3\2\2\2\u01c8\u01cb\3\2\2\2\u01c9\u01c7\3\2\2\2\u01c9")
        buf.write("\u01ca\3\2\2\2\u01ca\u01cd\3\2\2\2\u01cb\u01c9\3\2\2\2")
        buf.write("\u01cc\u01c0\3\2\2\2\u01cc\u01cd\3\2\2\2\u01cd\u01ce\3")
        buf.write("\2\2\2\u01ce\u01cf\7\16\2\2\u01cf\u01d0\b\20\1\2\u01d0")
        buf.write("\u01d2\b\20\1\2\u01d1\u0185\3\2\2\2\u01d1\u0186\3\2\2")
        buf.write("\2\u01d1\u0187\3\2\2\2\u01d1\u0188\3\2\2\2\u01d1\u0189")
        buf.write("\3\2\2\2\u01d1\u018a\3\2\2\2\u01d1\u018b\3\2\2\2\u01d1")
        buf.write("\u018c\3\2\2\2\u01d1\u018d\3\2\2\2\u01d1\u018e\3\2\2\2")
        buf.write("\u01d1\u018f\3\2\2\2\u01d1\u0190\3\2\2\2\u01d1\u0191\3")
        buf.write("\2\2\2\u01d1\u0192\3\2\2\2\u01d1\u0193\3\2\2\2\u01d1\u0194")
        buf.write("\3\2\2\2\u01d1\u0195\3\2\2\2\u01d1\u0196\3\2\2\2\u01d1")
        buf.write("\u0197\3\2\2\2\u01d1\u0198\3\2\2\2\u01d1\u0199\3\2\2\2")
        buf.write("\u01d1\u019a\3\2\2\2\u01d1\u019b\3\2\2\2\u01d1\u019c\3")
        buf.write("\2\2\2\u01d1\u019d\3\2\2\2\u01d1\u019e\3\2\2\2\u01d1\u019f")
        buf.write("\3\2\2\2\u01d1\u01a0\3\2\2\2\u01d1\u01a1\3\2\2\2\u01d1")
        buf.write("\u01a2\3\2\2\2\u01d1\u01a3\3\2\2\2\u01d1\u01a4\3\2\2\2")
        buf.write("\u01d1\u01a5\3\2\2\2\u01d1\u01a6\3\2\2\2\u01d1\u01a7\3")
        buf.write("\2\2\2\u01d1\u01a8\3\2\2\2\u01d1\u01a9\3\2\2\2\u01d1\u01aa")
        buf.write("\3\2\2\2\u01d1\u01ab\3\2\2\2\u01d1\u01ac\3\2\2\2\u01d1")
        buf.write("\u01ad\3\2\2\2\u01d1\u01ae\3\2\2\2\u01d1\u01af\3\2\2\2")
        buf.write("\u01d1\u01b0\3\2\2\2\u01d1\u01b1\3\2\2\2\u01d1\u01b2\3")
        buf.write("\2\2\2\u01d1\u01b3\3\2\2\2\u01d1\u01b4\3\2\2\2\u01d1\u01b5")
        buf.write("\3\2\2\2\u01d1\u01b6\3\2\2\2\u01d1\u01b7\3\2\2\2\u01d1")
        buf.write("\u01b8\3\2\2\2\u01d2\37\3\2\2\2\u01d3\u01d4\5\"\22\2\u01d4")
        buf.write("\u01e6\b\21\1\2\u01d5\u01d6\7\37\2\2\u01d6\u01da\b\21")
        buf.write("\1\2\u01d7\u01d8\7 \2\2\u01d8\u01da\b\21\1\2\u01d9\u01d5")
        buf.write("\3\2\2\2\u01d9\u01d7\3\2\2\2\u01da\u01db\3\2\2\2\u01db")
        buf.write("\u01d9\3\2\2\2\u01db\u01dc\3\2\2\2\u01dc\u01de\3\2\2\2")
        buf.write("\u01dd\u01df\5\"\22\2\u01de\u01dd\3\2\2\2\u01df\u01e0")
        buf.write("\3\2\2\2\u01e0\u01de\3\2\2\2\u01e0\u01e1\3\2\2\2\u01e1")
        buf.write("\u01e2\3\2\2\2\u01e2\u01e3\b\21\1\2\u01e3\u01e5\3\2\2")
        buf.write("\2\u01e4\u01d9\3\2\2\2\u01e5\u01e8\3\2\2\2\u01e6\u01e4")
        buf.write("\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7!\3\2\2\2\u01e8\u01e6")
        buf.write("\3\2\2\2\u01e9\u01ea\5$\23\2\u01ea\u0202\b\22\1\2\u01eb")
        buf.write("\u01ec\7&\2\2\u01ec\u01f6\b\22\1\2\u01ed\u01ee\7#\2\2")
        buf.write("\u01ee\u01f6\b\22\1\2\u01ef\u01f0\7\"\2\2\u01f0\u01f6")
        buf.write("\b\22\1\2\u01f1\u01f2\7%\2\2\u01f2\u01f6\b\22\1\2\u01f3")
        buf.write("\u01f4\7$\2\2\u01f4\u01f6\b\22\1\2\u01f5\u01eb\3\2\2\2")
        buf.write("\u01f5\u01ed\3\2\2\2\u01f5\u01ef\3\2\2\2\u01f5\u01f1\3")
        buf.write("\2\2\2\u01f5\u01f3\3\2\2\2\u01f6\u01f7\3\2\2\2\u01f7\u01f5")
        buf.write("\3\2\2\2\u01f7\u01f8\3\2\2\2\u01f8\u01fa\3\2\2\2\u01f9")
        buf.write("\u01fb\5$\23\2\u01fa\u01f9\3\2\2\2\u01fb\u01fc\3\2\2\2")
        buf.write("\u01fc\u01fa\3\2\2\2\u01fc\u01fd\3\2\2\2\u01fd\u01fe\3")
        buf.write("\2\2\2\u01fe\u01ff\b\22\1\2\u01ff\u0201\3\2\2\2\u0200")
        buf.write("\u01f5\3\2\2\2\u0201\u0204\3\2\2\2\u0202\u0200\3\2\2\2")
        buf.write("\u0202\u0203\3\2\2\2\u0203#\3\2\2\2\u0204\u0202\3\2\2")
        buf.write("\2\u0205\u0206\5&\24\2\u0206\u0218\b\23\1\2\u0207\u0208")
        buf.write("\7(\2\2\u0208\u020c\b\23\1\2\u0209\u020a\7\'\2\2\u020a")
        buf.write("\u020c\b\23\1\2\u020b\u0207\3\2\2\2\u020b\u0209\3\2\2")
        buf.write("\2\u020c\u020d\3\2\2\2\u020d\u020b\3\2\2\2\u020d\u020e")
        buf.write("\3\2\2\2\u020e\u0210\3\2\2\2\u020f\u0211\5&\24\2\u0210")
        buf.write("\u020f\3\2\2\2\u0211\u0212\3\2\2\2\u0212\u0210\3\2\2\2")
        buf.write("\u0212\u0213\3\2\2\2\u0213\u0214\3\2\2\2\u0214\u0215\b")
        buf.write("\23\1\2\u0215\u0217\3\2\2\2\u0216\u020b\3\2\2\2\u0217")
        buf.write("\u021a\3\2\2\2\u0218\u0216\3\2\2\2\u0218\u0219\3\2\2\2")
        buf.write("\u0219%\3\2\2\2\u021a\u0218\3\2\2\2\u021b\u021c\5(\25")
        buf.write("\2\u021c\u022e\b\24\1\2\u021d\u021e\7*\2\2\u021e\u0222")
        buf.write("\b\24\1\2\u021f\u0220\7)\2\2\u0220\u0222\b\24\1\2\u0221")
        buf.write("\u021d\3\2\2\2\u0221\u021f\3\2\2\2\u0222\u0223\3\2\2\2")
        buf.write("\u0223\u0221\3\2\2\2\u0223\u0224\3\2\2\2\u0224\u0226\3")
        buf.write("\2\2\2\u0225\u0227\5(\25\2\u0226\u0225\3\2\2\2\u0227\u0228")
        buf.write("\3\2\2\2\u0228\u0226\3\2\2\2\u0228\u0229\3\2\2\2\u0229")
        buf.write("\u022a\3\2\2\2\u022a\u022b\b\24\1\2\u022b\u022d\3\2\2")
        buf.write("\2\u022c\u0221\3\2\2\2\u022d\u0230\3\2\2\2\u022e\u022c")
        buf.write("\3\2\2\2\u022e\u022f\3\2\2\2\u022f\'\3\2\2\2\u0230\u022e")
        buf.write("\3\2\2\2\u0231\u0232\7\r\2\2\u0232\u0233\b\25\1\2\u0233")
        buf.write("\u0234\5 \21\2\u0234\u0235\7\16\2\2\u0235\u0236\b\25\1")
        buf.write("\2\u0236\u023c\3\2\2\2\u0237\u0239\t\2\2\2\u0238\u0237")
        buf.write("\3\2\2\2\u0238\u0239\3\2\2\2\u0239\u023a\3\2\2\2\u023a")
        buf.write("\u023c\5*\26\2\u023b\u0231\3\2\2\2\u023b\u0238\3\2\2\2")
        buf.write("\u023c)\3\2\2\2\u023d\u023e\5\36\20\2\u023e\u023f\b\26")
        buf.write("\1\2\u023f\u0240\b\26\1\2\u0240\u0257\3\2\2\2\u0241\u0242")
        buf.write("\5\n\6\2\u0242\u0243\b\26\1\2\u0243\u0244\b\26\1\2\u0244")
        buf.write("\u0245\b\26\1\2\u0245\u0246\b\26\1\2\u0246\u0257\3\2\2")
        buf.write("\2\u0247\u0248\7f\2\2\u0248\u0249\b\26\1\2\u0249\u024a")
        buf.write("\b\26\1\2\u024a\u024b\b\26\1\2\u024b\u0257\b\26\1\2\u024c")
        buf.write("\u024d\7g\2\2\u024d\u024e\b\26\1\2\u024e\u024f\b\26\1")
        buf.write("\2\u024f\u0250\b\26\1\2\u0250\u0257\b\26\1\2\u0251\u0252")
        buf.write("\7h\2\2\u0252\u0253\b\26\1\2\u0253\u0254\b\26\1\2\u0254")
        buf.write("\u0255\b\26\1\2\u0255\u0257\b\26\1\2\u0256\u023d\3\2\2")
        buf.write("\2\u0256\u0241\3\2\2\2\u0256\u0247\3\2\2\2\u0256\u024c")
        buf.write("\3\2\2\2\u0256\u0251\3\2\2\2\u0257+\3\2\2\2\u0258\u0259")
        buf.write("\7,\2\2\u0259\u025a\5 \21\2\u025a\u025b\7\b\2\2\u025b")
        buf.write("\u025c\b\27\1\2\u025c-\3\2\2\2\u025d\u025e\7-\2\2\u025e")
        buf.write("\u025f\7\r\2\2\u025f\u0260\5*\26\2\u0260\u0261\7\n\2\2")
        buf.write("\u0261\u0262\5*\26\2\u0262\u0263\7\n\2\2\u0263\u0264\5")
        buf.write("*\26\2\u0264\u0265\7\n\2\2\u0265\u0266\5*\26\2\u0266\u0267")
        buf.write("\7\16\2\2\u0267\u0268\7\b\2\2\u0268/\3\2\2\2\u0269\u026a")
        buf.write("\7.\2\2\u026a\u026b\7\r\2\2\u026b\u026c\5*\26\2\u026c")
        buf.write("\u026d\7\n\2\2\u026d\u026e\5*\26\2\u026e\u026f\7\16\2")
        buf.write("\2\u026f\u0270\7\b\2\2\u0270\61\3\2\2\2\u0271\u0272\7")
        buf.write("/\2\2\u0272\u0273\7\r\2\2\u0273\u0274\5*\26\2\u0274\u0275")
        buf.write("\7\n\2\2\u0275\u0276\5*\26\2\u0276\u0277\7\n\2\2\u0277")
        buf.write("\u0278\5*\26\2\u0278\u0279\7\16\2\2\u0279\u027a\7\b\2")
        buf.write("\2\u027a\63\3\2\2\2\u027b\u027c\7\60\2\2\u027c\u027d\7")
        buf.write("\r\2\2\u027d\u027e\5*\26\2\u027e\u027f\7\n\2\2\u027f\u0280")
        buf.write("\5*\26\2\u0280\u0281\7\16\2\2\u0281\u0282\7\b\2\2\u0282")
        buf.write("\65\3\2\2\2\u0283\u0284\7\61\2\2\u0284\u0285\7\r\2\2\u0285")
        buf.write("\u0286\5*\26\2\u0286\u0287\7\n\2\2\u0287\u0288\5*\26\2")
        buf.write("\u0288\u0289\7\16\2\2\u0289\u028a\7\b\2\2\u028a\67\3\2")
        buf.write("\2\2\u028b\u028c\7\62\2\2\u028c\u028d\7\r\2\2\u028d\u028e")
        buf.write("\7f\2\2\u028e\u028f\7\n\2\2\u028f\u0290\7f\2\2\u0290\u0291")
        buf.write("\7\n\2\2\u0291\u0292\5\b\5\2\u0292\u0293\7\16\2\2\u0293")
        buf.write("\u0294\7\b\2\2\u02949\3\2\2\2\u0295\u0296\7\63\2\2\u0296")
        buf.write("\u0297\7\r\2\2\u0297\u0298\5*\26\2\u0298\u0299\7\n\2\2")
        buf.write("\u0299\u029a\5*\26\2\u029a\u029b\7\n\2\2\u029b\u029c\5")
        buf.write("*\26\2\u029c\u029d\7\n\2\2\u029d\u029e\5*\26\2\u029e\u029f")
        buf.write("\7\16\2\2\u029f\u02a0\7\b\2\2\u02a0;\3\2\2\2\u02a1\u02a2")
        buf.write("\7\64\2\2\u02a2\u02a3\7\r\2\2\u02a3\u02a4\5*\26\2\u02a4")
        buf.write("\u02a5\7\n\2\2\u02a5\u02a6\5*\26\2\u02a6\u02a7\7\n\2\2")
        buf.write("\u02a7\u02a8\5*\26\2\u02a8\u02a9\7\n\2\2\u02a9\u02aa\5")
        buf.write("*\26\2\u02aa\u02ab\7\16\2\2\u02ab\u02ac\7\b\2\2\u02ac")
        buf.write("=\3\2\2\2\u02ad\u02ae\7\65\2\2\u02ae\u02af\7\r\2\2\u02af")
        buf.write("\u02b0\5*\26\2\u02b0\u02b1\7\n\2\2\u02b1\u02b2\5*\26\2")
        buf.write("\u02b2\u02b3\7\n\2\2\u02b3\u02b4\5*\26\2\u02b4\u02b5\7")
        buf.write("\n\2\2\u02b5\u02b6\5*\26\2\u02b6\u02b7\7\16\2\2\u02b7")
        buf.write("\u02b8\7\b\2\2\u02b8?\3\2\2\2\u02b9\u02ba\7\66\2\2\u02ba")
        buf.write("\u02bb\7\r\2\2\u02bb\u02bc\5*\26\2\u02bc\u02bd\7\n\2\2")
        buf.write("\u02bd\u02be\5*\26\2\u02be\u02bf\7\n\2\2\u02bf\u02c0\5")
        buf.write("*\26\2\u02c0\u02c1\7\n\2\2\u02c1\u02c2\5*\26\2\u02c2\u02c3")
        buf.write("\7\16\2\2\u02c3\u02c4\7\b\2\2\u02c4A\3\2\2\2\u02c5\u02c6")
        buf.write("\7\67\2\2\u02c6\u02c7\7\r\2\2\u02c7\u02c8\5*\26\2\u02c8")
        buf.write("\u02c9\7\n\2\2\u02c9\u02ca\5*\26\2\u02ca\u02cb\7\n\2\2")
        buf.write("\u02cb\u02cc\5*\26\2\u02cc\u02cd\7\n\2\2\u02cd\u02ce\5")
        buf.write("*\26\2\u02ce\u02cf\7\16\2\2\u02cf\u02d0\7\b\2\2\u02d0")
        buf.write("C\3\2\2\2\u02d1\u02d2\78\2\2\u02d2\u02d3\7\r\2\2\u02d3")
        buf.write("\u02d4\5 \21\2\u02d4\u02d5\7\16\2\2\u02d5\u02d6\7\b\2")
        buf.write("\2\u02d6E\3\2\2\2\u02d7\u02d8\79\2\2\u02d8\u02d9\7\r\2")
        buf.write("\2\u02d9\u02da\5 \21\2\u02da\u02db\7\16\2\2\u02db\u02dc")
        buf.write("\7\b\2\2\u02dcG\3\2\2\2\u02dd\u02de\7:\2\2\u02de\u02df")
        buf.write("\7\r\2\2\u02df\u02e0\5 \21\2\u02e0\u02e1\7\16\2\2\u02e1")
        buf.write("\u02e2\7\b\2\2\u02e2I\3\2\2\2\u02e3\u02e4\7;\2\2\u02e4")
        buf.write("\u02e5\7\r\2\2\u02e5\u02e6\5 \21\2\u02e6\u02e7\7\16\2")
        buf.write("\2\u02e7\u02e8\7\b\2\2\u02e8K\3\2\2\2\u02e9\u02ea\7<\2")
        buf.write("\2\u02ea\u02eb\7\r\2\2\u02eb\u02ec\5 \21\2\u02ec\u02ed")
        buf.write("\7\16\2\2\u02ed\u02ee\7\b\2\2\u02eeM\3\2\2\2\u02ef\u02f0")
        buf.write("\7=\2\2\u02f0\u02f1\7\r\2\2\u02f1\u02f2\5 \21\2\u02f2")
        buf.write("\u02f3\7\16\2\2\u02f3\u02f4\7\b\2\2\u02f4O\3\2\2\2\u02f5")
        buf.write("\u02f6\7>\2\2\u02f6\u02f7\7\r\2\2\u02f7\u02f8\5 \21\2")
        buf.write("\u02f8\u02f9\7\16\2\2\u02f9\u02fa\7\b\2\2\u02faQ\3\2\2")
        buf.write("\2\u02fb\u02fc\7?\2\2\u02fc\u02fd\7\r\2\2\u02fd\u02fe")
        buf.write("\5 \21\2\u02fe\u02ff\7\16\2\2\u02ff\u0300\7\b\2\2\u0300")
        buf.write("S\3\2\2\2\u0301\u0302\7@\2\2\u0302\u0303\7\r\2\2\u0303")
        buf.write("\u0304\5 \21\2\u0304\u0305\7\16\2\2\u0305\u0306\7\b\2")
        buf.write("\2\u0306U\3\2\2\2\u0307\u0308\7A\2\2\u0308\u0309\7\r\2")
        buf.write("\2\u0309\u030a\5 \21\2\u030a\u030b\7\16\2\2\u030b\u030c")
        buf.write("\7\b\2\2\u030cW\3\2\2\2\u030d\u030e\7B\2\2\u030e\u030f")
        buf.write("\7\r\2\2\u030f\u0314\5 \21\2\u0310\u0311\7\n\2\2\u0311")
        buf.write("\u0313\5 \21\2\u0312\u0310\3\2\2\2\u0313\u0316\3\2\2\2")
        buf.write("\u0314\u0312\3\2\2\2\u0314\u0315\3\2\2\2\u0315\u0317\3")
        buf.write("\2\2\2\u0316\u0314\3\2\2\2\u0317\u0318\7\16\2\2\u0318")
        buf.write("\u0319\7\b\2\2\u0319Y\3\2\2\2\u031a\u031b\7C\2\2\u031b")
        buf.write("\u031c\7\r\2\2\u031c\u0321\5 \21\2\u031d\u031e\7\n\2\2")
        buf.write("\u031e\u0320\5 \21\2\u031f\u031d\3\2\2\2\u0320\u0323\3")
        buf.write("\2\2\2\u0321\u031f\3\2\2\2\u0321\u0322\3\2\2\2\u0322\u0324")
        buf.write("\3\2\2\2\u0323\u0321\3\2\2\2\u0324\u0325\7\16\2\2\u0325")
        buf.write("\u0326\7\b\2\2\u0326[\3\2\2\2\u0327\u0328\7D\2\2\u0328")
        buf.write("\u0329\7\r\2\2\u0329\u032e\5 \21\2\u032a\u032b\7\n\2\2")
        buf.write("\u032b\u032d\5 \21\2\u032c\u032a\3\2\2\2\u032d\u0330\3")
        buf.write("\2\2\2\u032e\u032c\3\2\2\2\u032e\u032f\3\2\2\2\u032f\u0331")
        buf.write("\3\2\2\2\u0330\u032e\3\2\2\2\u0331\u0332\7\16\2\2\u0332")
        buf.write("\u0333\7\b\2\2\u0333]\3\2\2\2\u0334\u0335\7E\2\2\u0335")
        buf.write("\u0336\7\r\2\2\u0336\u033b\5 \21\2\u0337\u0338\7\n\2\2")
        buf.write("\u0338\u033a\5 \21\2\u0339\u0337\3\2\2\2\u033a\u033d\3")
        buf.write("\2\2\2\u033b\u0339\3\2\2\2\u033b\u033c\3\2\2\2\u033c\u033e")
        buf.write("\3\2\2\2\u033d\u033b\3\2\2\2\u033e\u033f\7\16\2\2\u033f")
        buf.write("\u0340\7\b\2\2\u0340_\3\2\2\2\u0341\u0342\7F\2\2\u0342")
        buf.write("\u0343\7\r\2\2\u0343\u0344\5\b\5\2\u0344\u0345\7\n\2\2")
        buf.write("\u0345\u0346\7f\2\2\u0346\u0347\7\16\2\2\u0347\u0348\7")
        buf.write("\b\2\2\u0348a\3\2\2\2\u0349\u034a\7G\2\2\u034a\u034b\7")
        buf.write("\r\2\2\u034b\u0350\5 \21\2\u034c\u034d\7\n\2\2\u034d\u034f")
        buf.write("\5 \21\2\u034e\u034c\3\2\2\2\u034f\u0352\3\2\2\2\u0350")
        buf.write("\u034e\3\2\2\2\u0350\u0351\3\2\2\2\u0351\u0353\3\2\2\2")
        buf.write("\u0352\u0350\3\2\2\2\u0353\u0354\7\16\2\2\u0354\u0355")
        buf.write("\7\b\2\2\u0355c\3\2\2\2\u0356\u0357\7H\2\2\u0357\u0358")
        buf.write("\7\r\2\2\u0358\u0359\5\b\5\2\u0359\u035a\7\16\2\2\u035a")
        buf.write("\u035b\7\b\2\2\u035be\3\2\2\2\u035c\u035d\7I\2\2\u035d")
        buf.write("\u035e\7\r\2\2\u035e\u035f\5\b\5\2\u035f\u0360\7\16\2")
        buf.write("\2\u0360\u0361\7\b\2\2\u0361g\3\2\2\2\u0362\u0363\7J\2")
        buf.write("\2\u0363\u0364\7\r\2\2\u0364\u0369\5 \21\2\u0365\u0366")
        buf.write("\7\n\2\2\u0366\u0368\5 \21\2\u0367\u0365\3\2\2\2\u0368")
        buf.write("\u036b\3\2\2\2\u0369\u0367\3\2\2\2\u0369\u036a\3\2\2\2")
        buf.write("\u036a\u036c\3\2\2\2\u036b\u0369\3\2\2\2\u036c\u036d\7")
        buf.write("\16\2\2\u036d\u036e\7\b\2\2\u036ei\3\2\2\2\u036f\u0370")
        buf.write("\7K\2\2\u0370\u0371\7\r\2\2\u0371\u0376\5 \21\2\u0372")
        buf.write("\u0373\7\n\2\2\u0373\u0375\5 \21\2\u0374\u0372\3\2\2\2")
        buf.write("\u0375\u0378\3\2\2\2\u0376\u0374\3\2\2\2\u0376\u0377\3")
        buf.write("\2\2\2\u0377\u0379\3\2\2\2\u0378\u0376\3\2\2\2\u0379\u037a")
        buf.write("\7\16\2\2\u037a\u037b\7\b\2\2\u037bk\3\2\2\2\u037c\u037d")
        buf.write("\7L\2\2\u037d\u037e\7\r\2\2\u037e\u037f\5\b\5\2\u037f")
        buf.write("\u0380\7\n\2\2\u0380\u0381\7k\2\2\u0381\u0382\7\16\2\2")
        buf.write("\u0382\u0383\7\b\2\2\u0383\u038d\3\2\2\2\u0384\u0385\7")
        buf.write("L\2\2\u0385\u0386\7\r\2\2\u0386\u0387\5\b\5\2\u0387\u0388")
        buf.write("\7\n\2\2\u0388\u0389\7l\2\2\u0389\u038a\7\16\2\2\u038a")
        buf.write("\u038b\7\b\2\2\u038b\u038d\3\2\2\2\u038c\u037c\3\2\2\2")
        buf.write("\u038c\u0384\3\2\2\2\u038dm\3\2\2\2\u038e\u038f\7M\2\2")
        buf.write("\u038f\u0390\7\r\2\2\u0390\u0391\5*\26\2\u0391\u0392\7")
        buf.write("\n\2\2\u0392\u0393\5*\26\2\u0393\u0394\7\16\2\2\u0394")
        buf.write("\u0395\7\b\2\2\u0395o\3\2\2\2\u0396\u0397\7N\2\2\u0397")
        buf.write("\u0398\7\r\2\2\u0398\u0399\5*\26\2\u0399\u039a\7\16\2")
        buf.write("\2\u039a\u039b\7\b\2\2\u039bq\3\2\2\2\u039c\u039d\7O\2")
        buf.write("\2\u039d\u039e\7\r\2\2\u039e\u039f\5*\26\2\u039f\u03a0")
        buf.write("\7\n\2\2\u03a0\u03a1\5*\26\2\u03a1\u03a2\7\n\2\2\u03a2")
        buf.write("\u03a3\t\3\2\2\u03a3\u03a4\7\16\2\2\u03a4\u03a5\7\b\2")
        buf.write("\2\u03a5s\3\2\2\2\u03a6\u03a7\7P\2\2\u03a7\u03a8\7\r\2")
        buf.write("\2\u03a8\u03a9\5*\26\2\u03a9\u03aa\7\16\2\2\u03aa\u03ab")
        buf.write("\7\b\2\2\u03abu\3\2\2\2\u03ac\u03ad\7Q\2\2\u03ad\u03ae")
        buf.write("\7\r\2\2\u03ae\u03b3\5*\26\2\u03af\u03b0\7\n\2\2\u03b0")
        buf.write("\u03b2\5*\26\2\u03b1\u03af\3\2\2\2\u03b2\u03b5\3\2\2\2")
        buf.write("\u03b3\u03b1\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4\u03b6\3")
        buf.write("\2\2\2\u03b5\u03b3\3\2\2\2\u03b6\u03b7\7\16\2\2\u03b7")
        buf.write("\u03b8\7\b\2\2\u03b8w\3\2\2\2\u03b9\u03ba\7R\2\2\u03ba")
        buf.write("\u03bb\7\r\2\2\u03bb\u03bc\5*\26\2\u03bc\u03bd\7\16\2")
        buf.write("\2\u03bd\u03be\7\b\2\2\u03bey\3\2\2\2\u03bf\u03c0\7S\2")
        buf.write("\2\u03c0\u03c1\7\r\2\2\u03c1\u03c2\5*\26\2\u03c2\u03c3")
        buf.write("\7\16\2\2\u03c3\u03c4\7\b\2\2\u03c4{\3\2\2\2\u03c5\u03c6")
        buf.write("\7T\2\2\u03c6\u03c7\7\r\2\2\u03c7\u03c8\5*\26\2\u03c8")
        buf.write("\u03c9\7\16\2\2\u03c9\u03ca\7\b\2\2\u03ca}\3\2\2\2\u03cb")
        buf.write("\u03cc\7U\2\2\u03cc\u03cd\7\r\2\2\u03cd\u03ce\5*\26\2")
        buf.write("\u03ce\u03cf\7\16\2\2\u03cf\u03d0\7\b\2\2\u03d0\177\3")
        buf.write("\2\2\2\u03d1\u03d2\7V\2\2\u03d2\u03d3\7\r\2\2\u03d3\u03d4")
        buf.write("\5*\26\2\u03d4\u03d5\7\16\2\2\u03d5\u03d6\7\b\2\2\u03d6")
        buf.write("\u0081\3\2\2\2\u03d7\u03d8\7W\2\2\u03d8\u03d9\7\r\2\2")
        buf.write("\u03d9\u03de\5*\26\2\u03da\u03db\7\n\2\2\u03db\u03dd\5")
        buf.write("*\26\2\u03dc\u03da\3\2\2\2\u03dd\u03e0\3\2\2\2\u03de\u03dc")
        buf.write("\3\2\2\2\u03de\u03df\3\2\2\2\u03df\u03e1\3\2\2\2\u03e0")
        buf.write("\u03de\3\2\2\2\u03e1\u03e2\7\16\2\2\u03e2\u03e3\7\b\2")
        buf.write("\2\u03e3\u0083\3\2\2\2\u03e4\u03e5\7X\2\2\u03e5\u03e6")
        buf.write("\7\r\2\2\u03e6\u03eb\5 \21\2\u03e7\u03e8\7\n\2\2\u03e8")
        buf.write("\u03ea\5 \21\2\u03e9\u03e7\3\2\2\2\u03ea\u03ed\3\2\2\2")
        buf.write("\u03eb\u03e9\3\2\2\2\u03eb\u03ec\3\2\2\2\u03ec\u03ee\3")
        buf.write("\2\2\2\u03ed\u03eb\3\2\2\2\u03ee\u03ef\7\16\2\2\u03ef")
        buf.write("\u03f0\7\b\2\2\u03f0\u0085\3\2\2\2\u03f1\u03f2\7Y\2\2")
        buf.write("\u03f2\u03f5\7\r\2\2\u03f3\u03f6\7i\2\2\u03f4\u03f6\5")
        buf.write("*\26\2\u03f5\u03f3\3\2\2\2\u03f5\u03f4\3\2\2\2\u03f6\u03f7")
        buf.write("\3\2\2\2\u03f7\u03f8\7\16\2\2\u03f8\u03f9\7\b\2\2\u03f9")
        buf.write("\u0087\3\2\2\2\u03fa\u03fb\7Z\2\2\u03fb\u03fc\7\r\2\2")
        buf.write("\u03fc\u03fd\5*\26\2\u03fd\u03fe\7\n\2\2\u03fe\u03ff\5")
        buf.write("*\26\2\u03ff\u0400\7\n\2\2\u0400\u0401\5*\26\2\u0401\u0402")
        buf.write("\7\16\2\2\u0402\u0403\7\b\2\2\u0403\u0089\3\2\2\2\u0404")
        buf.write("\u0405\7[\2\2\u0405\u0406\7\r\2\2\u0406\u0407\5*\26\2")
        buf.write("\u0407\u0408\7\16\2\2\u0408\u0409\7\b\2\2\u0409\u008b")
        buf.write("\3\2\2\2\u040a\u040b\7\\\2\2\u040b\u040c\7\r\2\2\u040c")
        buf.write("\u040d\5*\26\2\u040d\u040e\7\n\2\2\u040e\u040f\5*\26\2")
        buf.write("\u040f\u0410\7\n\2\2\u0410\u0411\5*\26\2\u0411\u0412\7")
        buf.write("\16\2\2\u0412\u0413\7\b\2\2\u0413\u008d\3\2\2\2\u0414")
        buf.write("\u0415\7]\2\2\u0415\u0416\7\r\2\2\u0416\u0417\5*\26\2")
        buf.write("\u0417\u0418\7\n\2\2\u0418\u0419\5*\26\2\u0419\u041a\7")
        buf.write("\16\2\2\u041a\u041b\7\b\2\2\u041b\u008f\3\2\2\2\u041c")
        buf.write("\u041d\7^\2\2\u041d\u041e\7\r\2\2\u041e\u041f\5*\26\2")
        buf.write("\u041f\u0420\7\n\2\2\u0420\u0421\5*\26\2\u0421\u0422\7")
        buf.write("\16\2\2\u0422\u0423\7\b\2\2\u0423\u0091\3\2\2\2\u0424")
        buf.write("\u0425\7\3\2\2\u0425\u0093\3\2\2\29\u009d\u00a3\u00ae")
        buf.write("\u00bc\u00d6\u00db\u00ea\u00f0\u00fd\u010f\u0112\u0118")
        buf.write("\u012b\u0136\u0149\u015e\u0164\u0167\u0176\u017c\u017f")
        buf.write("\u01c9\u01cc\u01d1\u01d9\u01db\u01e0\u01e6\u01f5\u01f7")
        buf.write("\u01fc\u0202\u020b\u020d\u0212\u0218\u0221\u0223\u0228")
        buf.write("\u022e\u0238\u023b\u0256\u0314\u0321\u032e\u033b\u0350")
        buf.write("\u0369\u0376\u038c\u03b3\u03de\u03eb\u03f5")
        return buf.getvalue()


class NmodParser ( Parser ):

    grammarFileName = "Nmod.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'dotchart'", "'program'", "'main'", "'var'", 
                     "'.'", "';'", "':'", "','", "'['", "']'", "'('", "')'", 
                     "'{'", "'}'", "'<-'", "'func'", "'error'", "'null'", 
                     "'void'", "'int'", "'float'", "'char'", "'if'", "'else'", 
                     "'while'", "'read'", "'print'", "'='", "'and'", "'or'", 
                     "'not'", "'>'", "'>='", "'<'", "'<='", "'equal'", "'+'", 
                     "'-'", "'*'", "'/'", "'%'", "'return'", "'rnom'", "'rexp'", 
                     "'rgamma'", "'points'", "'lines'", "'text'", "'barplot'", 
                     "'piechart'", "'xyplot'", "'densityplot'", "'histogram'", 
                     "'sin'", "'cos'", "'tan'", "'asin'", "'acos'", "'atan'", 
                     "'atan2'", "'log'", "'log10'", "'exp'", "'f_max'", 
                     "'f_min'", "'f_range'", "'f_sum'", "'diff'", "'prod'", 
                     "'mean'", "'median'", "'quantile'", "'weighedmean'", 
                     "'rank'", "'variance'", "'sd'", "'cor'", "'cov'", "'f_round'", 
                     "'transpose'", "'diagonal'", "'ginv'", "'rowsum'", 
                     "'colsum'", "'load'", "'data'", "'library'", "'rpois'", 
                     "'rweibull'", "'rbinom'", "'rgeom'", "'runif'", "'pearson'", 
                     "'kendall'", "'spearman'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'0'", "'1'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "PROGRAM", "MAIN", "VARIABLES", 
                      "PERIOD", "SEMICOLON", "COLON", "COMMA", "LBRACKET", 
                      "RBRACKET", "LPRACKET", "RPRACKET", "LCRACKET", "RCRACKET", 
                      "ISFUNCTION", "FUNC", "ERROR", "NULL", "VOID", "INT", 
                      "FLOAT", "CHAR", "IF", "ELSE", "WHILE", "READ", "PRINT", 
                      "EQUALS", "AND", "OR", "NOT", "GREATERTHAN", "GREATEROR", 
                      "LESSERTHAN", "LESSEROR", "EQUAL", "PLUS", "MINUS", 
                      "TIMES", "DIVISION", "MODULE", "RETURN", "RNOM", "REXP", 
                      "RGAMMA", "POINTS", "LINES", "TEXT", "BARPLOT", "PIECHART", 
                      "XYPLOT", "DENSITYPLOT", "HISTOGRAM", "SIN", "COS", 
                      "TAN", "ASIN", "ACOS", "ATAN", "ATAN2", "LOG", "LOG10", 
                      "EXPONENT", "MAX", "MIN", "RANGE", "SUM", "DIFF", 
                      "PROD", "MEAN", "MEDIAN", "QUANTILE", "WEIGHEDMEAN", 
                      "RANK", "VARIANCE", "SD", "COR", "COV", "ROUND", "TRANSPOSE", 
                      "DIAGONAL", "GINV", "ROWSUM", "COLSUM", "LOAD", "DATA", 
                      "LIBRARY", "RPOIS", "RWEIBULL", "RBINOM", "RGEOM", 
                      "RUNIF", "PEARSON", "KENDALL", "SPEARMAN", "WHITESPACE", 
                      "NEWLINE", "LINECOMMENT", "MULTICOMMENT", "CTEI", 
                      "CTEF", "CTEC", "STRING", "ID", "ZERO", "ONE" ]

    RULE_program = 0
    RULE_f_type = 1
    RULE_variables = 2
    RULE_id_decl = 3
    RULE_id_access = 4
    RULE_modules = 5
    RULE_main = 6
    RULE_block = 7
    RULE_statute = 8
    RULE_assignment = 9
    RULE_condition = 10
    RULE_cicle = 11
    RULE_reading = 12
    RULE_writing = 13
    RULE_call_module = 14
    RULE_expression = 15
    RULE_sub_exp = 16
    RULE_exp = 17
    RULE_term = 18
    RULE_factor = 19
    RULE_var_cte = 20
    RULE_r_return = 21
    RULE_rnom = 22
    RULE_rexp = 23
    RULE_rgamma = 24
    RULE_points = 25
    RULE_lines = 26
    RULE_text = 27
    RULE_barplot = 28
    RULE_piechart = 29
    RULE_xyplot = 30
    RULE_densityplot = 31
    RULE_histogram = 32
    RULE_sin = 33
    RULE_cos = 34
    RULE_tan = 35
    RULE_asin = 36
    RULE_acos = 37
    RULE_atan = 38
    RULE_atan2 = 39
    RULE_log = 40
    RULE_log10 = 41
    RULE_exponent = 42
    RULE_f_max = 43
    RULE_f_min = 44
    RULE_f_range = 45
    RULE_f_sum = 46
    RULE_diff = 47
    RULE_prod = 48
    RULE_mean = 49
    RULE_median = 50
    RULE_quantile = 51
    RULE_weighedmean = 52
    RULE_rank = 53
    RULE_var = 54
    RULE_sd = 55
    RULE_cor = 56
    RULE_cov = 57
    RULE_f_round = 58
    RULE_transpose = 59
    RULE_diagonal = 60
    RULE_ginv = 61
    RULE_rowsum = 62
    RULE_colsum = 63
    RULE_load = 64
    RULE_data = 65
    RULE_library = 66
    RULE_rpois = 67
    RULE_rweibull = 68
    RULE_rbinom = 69
    RULE_rgeom = 70
    RULE_runif = 71
    RULE_dotchart = 72

    ruleNames =  [ "program", "f_type", "variables", "id_decl", "id_access", 
                   "modules", "main", "block", "statute", "assignment", 
                   "condition", "cicle", "reading", "writing", "call_module", 
                   "expression", "sub_exp", "exp", "term", "factor", "var_cte", 
                   "r_return", "rnom", "rexp", "rgamma", "points", "lines", 
                   "text", "barplot", "piechart", "xyplot", "densityplot", 
                   "histogram", "sin", "cos", "tan", "asin", "acos", "atan", 
                   "atan2", "log", "log10", "exponent", "f_max", "f_min", 
                   "f_range", "f_sum", "diff", "prod", "mean", "median", 
                   "quantile", "weighedmean", "rank", "var", "sd", "cor", 
                   "cov", "f_round", "transpose", "diagonal", "ginv", "rowsum", 
                   "colsum", "load", "data", "library", "rpois", "rweibull", 
                   "rbinom", "rgeom", "runif", "dotchart" ]

    EOF = Token.EOF
    T__0=1
    PROGRAM=2
    MAIN=3
    VARIABLES=4
    PERIOD=5
    SEMICOLON=6
    COLON=7
    COMMA=8
    LBRACKET=9
    RBRACKET=10
    LPRACKET=11
    RPRACKET=12
    LCRACKET=13
    RCRACKET=14
    ISFUNCTION=15
    FUNC=16
    ERROR=17
    NULL=18
    VOID=19
    INT=20
    FLOAT=21
    CHAR=22
    IF=23
    ELSE=24
    WHILE=25
    READ=26
    PRINT=27
    EQUALS=28
    AND=29
    OR=30
    NOT=31
    GREATERTHAN=32
    GREATEROR=33
    LESSERTHAN=34
    LESSEROR=35
    EQUAL=36
    PLUS=37
    MINUS=38
    TIMES=39
    DIVISION=40
    MODULE=41
    RETURN=42
    RNOM=43
    REXP=44
    RGAMMA=45
    POINTS=46
    LINES=47
    TEXT=48
    BARPLOT=49
    PIECHART=50
    XYPLOT=51
    DENSITYPLOT=52
    HISTOGRAM=53
    SIN=54
    COS=55
    TAN=56
    ASIN=57
    ACOS=58
    ATAN=59
    ATAN2=60
    LOG=61
    LOG10=62
    EXPONENT=63
    MAX=64
    MIN=65
    RANGE=66
    SUM=67
    DIFF=68
    PROD=69
    MEAN=70
    MEDIAN=71
    QUANTILE=72
    WEIGHEDMEAN=73
    RANK=74
    VARIANCE=75
    SD=76
    COR=77
    COV=78
    ROUND=79
    TRANSPOSE=80
    DIAGONAL=81
    GINV=82
    ROWSUM=83
    COLSUM=84
    LOAD=85
    DATA=86
    LIBRARY=87
    RPOIS=88
    RWEIBULL=89
    RBINOM=90
    RGEOM=91
    RUNIF=92
    PEARSON=93
    KENDALL=94
    SPEARMAN=95
    WHITESPACE=96
    NEWLINE=97
    LINECOMMENT=98
    MULTICOMMENT=99
    CTEI=100
    CTEF=101
    CTEC=102
    STRING=103
    ID=104
    ZERO=105
    ONE=106

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class ProgramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROGRAM(self):
            return self.getToken(NmodParser.PROGRAM, 0)

        def ID(self):
            return self.getToken(NmodParser.ID, 0)

        def COLON(self):
            return self.getToken(NmodParser.COLON, 0)

        def main(self):
            return self.getTypedRuleContext(NmodParser.MainContext,0)


        def variables(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.VariablesContext)
            else:
                return self.getTypedRuleContext(NmodParser.VariablesContext,i)


        def modules(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ModulesContext)
            else:
                return self.getTypedRuleContext(NmodParser.ModulesContext,i)


        def getRuleIndex(self):
            return NmodParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = NmodParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            c.initialGoto()
            self.state = 147
            self.match(NmodParser.PROGRAM)
            self.state = 148
            self.match(NmodParser.ID)
            c.localFunc = 'global'
            c.insertFunctionDirectory(c.localFunc, 'void')
            self.state = 151
            self.match(NmodParser.COLON)
            self.state = 155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.VARIABLES:
                self.state = 152
                self.variables()
                self.state = 157
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.ID:
                self.state = 158
                self.modules()
                self.state = 163
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 164
            self.main()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class F_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self._INT = None # Token
            self._FLOAT = None # Token
            self._CHAR = None # Token

        def INT(self):
            return self.getToken(NmodParser.INT, 0)

        def FLOAT(self):
            return self.getToken(NmodParser.FLOAT, 0)

        def CHAR(self):
            return self.getToken(NmodParser.CHAR, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_f_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterF_type" ):
                listener.enterF_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitF_type" ):
                listener.exitF_type(self)




    def f_type(self):

        localctx = NmodParser.F_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_f_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 172
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NmodParser.INT]:
                self.state = 166
                localctx._INT = self.match(NmodParser.INT)
                localctx.type = (None if localctx._INT is None else localctx._INT.text)
                pass
            elif token in [NmodParser.FLOAT]:
                self.state = 168
                localctx._FLOAT = self.match(NmodParser.FLOAT)
                localctx.type = (None if localctx._FLOAT is None else localctx._FLOAT.text)
                pass
            elif token in [NmodParser.CHAR]:
                self.state = 170
                localctx._CHAR = self.match(NmodParser.CHAR)
                localctx.type = (None if localctx._CHAR is None else localctx._CHAR.text)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._f_type = None # F_typeContext
            self._id_decl = None # Id_declContext

        def VARIABLES(self):
            return self.getToken(NmodParser.VARIABLES, 0)

        def f_type(self):
            return self.getTypedRuleContext(NmodParser.F_typeContext,0)


        def COLON(self):
            return self.getToken(NmodParser.COLON, 0)

        def id_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Id_declContext)
            else:
                return self.getTypedRuleContext(NmodParser.Id_declContext,i)


        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_variables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariables" ):
                listener.enterVariables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariables" ):
                listener.exitVariables(self)




    def variables(self):

        localctx = NmodParser.VariablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_variables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 174
            self.match(NmodParser.VARIABLES)
            self.state = 175
            localctx._f_type = self.f_type()
            c.localType = (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop)))
            self.state = 177
            self.match(NmodParser.COLON)
            self.state = 178
            localctx._id_decl = self.id_decl()
            c.insertVarTable(c.localFunc, (None if localctx._id_decl is None else self._input.getText((localctx._id_decl.start,localctx._id_decl.stop))), c.localType)
            self.state = 186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 180
                self.match(NmodParser.COMMA)
                self.state = 181
                localctx._id_decl = self.id_decl()
                c.insertVarTable(c.localFunc, (None if localctx._id_decl is None else self._input.getText((localctx._id_decl.start,localctx._id_decl.stop))), c.localType)
                self.state = 188
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 189
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Id_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._CTEI = None # Token

        def ID(self):
            return self.getToken(NmodParser.ID, 0)

        def LBRACKET(self):
            return self.getToken(NmodParser.LBRACKET, 0)

        def CTEI(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.CTEI)
            else:
                return self.getToken(NmodParser.CTEI, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COLON)
            else:
                return self.getToken(NmodParser.COLON, i)

        def RBRACKET(self):
            return self.getToken(NmodParser.RBRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_id_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_decl" ):
                listener.enterId_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_decl" ):
                listener.exitId_decl(self)




    def id_decl(self):

        localctx = NmodParser.Id_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_id_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 191
            self.match(NmodParser.ID)
            self.state = 217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NmodParser.LBRACKET:
                self.state = 192
                self.match(NmodParser.LBRACKET)
                c.initDimVar()
                self.state = 194
                localctx._CTEI = self.match(NmodParser.CTEI)
                c.insertConstant('int', (None if localctx._CTEI is None else localctx._CTEI.text))
                c.setDimLowBound((None if localctx._CTEI is None else localctx._CTEI.text))
                self.state = 197
                self.match(NmodParser.COLON)
                self.state = 198
                localctx._CTEI = self.match(NmodParser.CTEI)
                c.insertConstant('int', (None if localctx._CTEI is None else localctx._CTEI.text))
                c.setDimHighBound((None if localctx._CTEI is None else localctx._CTEI.text))
                self.state = 212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NmodParser.COMMA:
                    self.state = 201
                    self.match(NmodParser.COMMA)
                    c.addDimension()
                    self.state = 203
                    localctx._CTEI = self.match(NmodParser.CTEI)
                    c.insertConstant('int', (None if localctx._CTEI is None else localctx._CTEI.text))
                    c.setDimLowBound((None if localctx._CTEI is None else localctx._CTEI.text))
                    self.state = 206
                    self.match(NmodParser.COLON)
                    self.state = 207
                    localctx._CTEI = self.match(NmodParser.CTEI)
                    c.insertConstant('int', (None if localctx._CTEI is None else localctx._CTEI.text))
                    c.setDimHighBound((None if localctx._CTEI is None else localctx._CTEI.text))
                    self.state = 214
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 215
                self.match(NmodParser.RBRACKET)
                c.calculateK()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Id_accessContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._ID = None # Token

        def ID(self):
            return self.getToken(NmodParser.ID, 0)

        def LBRACKET(self):
            return self.getToken(NmodParser.LBRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def RBRACKET(self):
            return self.getToken(NmodParser.RBRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_id_access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_access" ):
                listener.enterId_access(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_access" ):
                listener.exitId_access(self)




    def id_access(self):

        localctx = NmodParser.Id_accessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_id_access)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 219
            localctx._ID = self.match(NmodParser.ID)
            c.insertStackOperand((None if localctx._ID is None else localctx._ID.text))
            self.state = 238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NmodParser.LBRACKET:
                self.state = 221
                self.match(NmodParser.LBRACKET)
                c.dimVarBegin()
                self.state = 223
                self.exp()
                c.generateDimVarQuad()
                self.state = 232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NmodParser.COMMA:
                    self.state = 225
                    self.match(NmodParser.COMMA)
                    c.nextDimension((None if localctx._ID is None else localctx._ID.text))
                    self.state = 227
                    self.exp()
                    c.generateDimVarQuad()
                    self.state = 234
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 235
                self.match(NmodParser.RBRACKET)
                c.dimVarEnd((None if localctx._ID is None else localctx._ID.text))


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModulesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._ID = None # Token
            self._f_type = None # F_typeContext

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.ID)
            else:
                return self.getToken(NmodParser.ID, i)

        def ISFUNCTION(self):
            return self.getToken(NmodParser.ISFUNCTION, 0)

        def FUNC(self):
            return self.getToken(NmodParser.FUNC, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def block(self):
            return self.getTypedRuleContext(NmodParser.BlockContext,0)


        def VOID(self):
            return self.getToken(NmodParser.VOID, 0)

        def f_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.F_typeContext)
            else:
                return self.getTypedRuleContext(NmodParser.F_typeContext,i)


        def variables(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.VariablesContext)
            else:
                return self.getTypedRuleContext(NmodParser.VariablesContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_modules

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModules" ):
                listener.enterModules(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModules" ):
                listener.exitModules(self)




    def modules(self):

        localctx = NmodParser.ModulesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_modules)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            localctx._ID = self.match(NmodParser.ID)
            c.localFunc = (None if localctx._ID is None else localctx._ID.text)
            self.state = 242
            self.match(NmodParser.ISFUNCTION)
            self.state = 251
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NmodParser.VOID]:
                self.state = 243
                self.match(NmodParser.VOID)
                c.localType = 'void'
                c.insertFunctionDirectory((None if localctx._ID is None else localctx._ID.text), 'void')
                pass
            elif token in [NmodParser.INT, NmodParser.FLOAT, NmodParser.CHAR]:
                self.state = 246
                localctx._f_type = self.f_type()
                c.localType = (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop)))
                c.insertFunctionDirectory((None if localctx._ID is None else localctx._ID.text), (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop))))
                c.insertVarTable('global', (None if localctx._ID is None else localctx._ID.text), (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop))))
                pass
            else:
                raise NoViableAltException(self)

            self.state = 253
            self.match(NmodParser.FUNC)
            self.state = 254
            self.match(NmodParser.LPRACKET)
            self.state = 272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NmodParser.INT) | (1 << NmodParser.FLOAT) | (1 << NmodParser.CHAR))) != 0):
                self.state = 255
                localctx._f_type = self.f_type()
                c.localType = (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop)))
                self.state = 257
                localctx._ID = self.match(NmodParser.ID)
                c.insertVarTable(c.localFunc, (None if localctx._ID is None else localctx._ID.text), (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop))))
                c.insertParam(c.localFunc, (None if localctx._ID is None else localctx._ID.text), (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop))))
                self.state = 269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NmodParser.COMMA:
                    self.state = 260
                    self.match(NmodParser.COMMA)
                    self.state = 261
                    localctx._f_type = self.f_type()
                    c.localType = (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop)))
                    self.state = 263
                    localctx._ID = self.match(NmodParser.ID)
                    c.insertVarTable(c.localFunc, (None if localctx._ID is None else localctx._ID.text), (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop))))
                    c.insertParam(c.localFunc, (None if localctx._ID is None else localctx._ID.text), (None if localctx._f_type is None else self._input.getText((localctx._f_type.start,localctx._f_type.stop))))
                    self.state = 271
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 274
            self.match(NmodParser.RPRACKET)
            self.state = 278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.VARIABLES:
                self.state = 275
                self.variables()
                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            c.moduleBegin()
            self.state = 282
            self.block()
            c.moduleEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MainContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAIN(self):
            return self.getToken(NmodParser.MAIN, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def block(self):
            return self.getTypedRuleContext(NmodParser.BlockContext,0)


        def getRuleIndex(self):
            return NmodParser.RULE_main

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMain" ):
                listener.enterMain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMain" ):
                listener.exitMain(self)




    def main(self):

        localctx = NmodParser.MainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_main)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self.match(NmodParser.MAIN)
            c.localFunc = 'global'
            c.mainBegin()
            self.state = 288
            self.match(NmodParser.LPRACKET)
            self.state = 289
            self.match(NmodParser.RPRACKET)
            self.state = 290
            self.block()
            c.mainEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCRACKET(self):
            return self.getToken(NmodParser.LCRACKET, 0)

        def RCRACKET(self):
            return self.getToken(NmodParser.RCRACKET, 0)

        def statute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.StatuteContext)
            else:
                return self.getTypedRuleContext(NmodParser.StatuteContext,i)


        def getRuleIndex(self):
            return NmodParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = NmodParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self.match(NmodParser.LCRACKET)
            self.state = 297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NmodParser.IF) | (1 << NmodParser.WHILE) | (1 << NmodParser.READ) | (1 << NmodParser.PRINT) | (1 << NmodParser.RETURN) | (1 << NmodParser.RNOM) | (1 << NmodParser.REXP) | (1 << NmodParser.RGAMMA) | (1 << NmodParser.POINTS) | (1 << NmodParser.LINES) | (1 << NmodParser.TEXT) | (1 << NmodParser.BARPLOT) | (1 << NmodParser.PIECHART) | (1 << NmodParser.XYPLOT) | (1 << NmodParser.DENSITYPLOT) | (1 << NmodParser.HISTOGRAM) | (1 << NmodParser.SIN) | (1 << NmodParser.COS) | (1 << NmodParser.TAN) | (1 << NmodParser.ASIN) | (1 << NmodParser.ACOS) | (1 << NmodParser.ATAN) | (1 << NmodParser.ATAN2) | (1 << NmodParser.LOG) | (1 << NmodParser.LOG10) | (1 << NmodParser.EXPONENT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NmodParser.MAX - 64)) | (1 << (NmodParser.MIN - 64)) | (1 << (NmodParser.RANGE - 64)) | (1 << (NmodParser.SUM - 64)) | (1 << (NmodParser.DIFF - 64)) | (1 << (NmodParser.PROD - 64)) | (1 << (NmodParser.MEAN - 64)) | (1 << (NmodParser.MEDIAN - 64)) | (1 << (NmodParser.QUANTILE - 64)) | (1 << (NmodParser.WEIGHEDMEAN - 64)) | (1 << (NmodParser.RANK - 64)) | (1 << (NmodParser.VARIANCE - 64)) | (1 << (NmodParser.SD - 64)) | (1 << (NmodParser.COR - 64)) | (1 << (NmodParser.COV - 64)) | (1 << (NmodParser.ROUND - 64)) | (1 << (NmodParser.TRANSPOSE - 64)) | (1 << (NmodParser.DIAGONAL - 64)) | (1 << (NmodParser.GINV - 64)) | (1 << (NmodParser.ROWSUM - 64)) | (1 << (NmodParser.COLSUM - 64)) | (1 << (NmodParser.LOAD - 64)) | (1 << (NmodParser.DATA - 64)) | (1 << (NmodParser.LIBRARY - 64)) | (1 << (NmodParser.RPOIS - 64)) | (1 << (NmodParser.RWEIBULL - 64)) | (1 << (NmodParser.RBINOM - 64)) | (1 << (NmodParser.RGEOM - 64)) | (1 << (NmodParser.RUNIF - 64)) | (1 << (NmodParser.ID - 64)))) != 0):
                self.state = 294
                self.statute()
                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 300
            self.match(NmodParser.RCRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatuteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self):
            return self.getTypedRuleContext(NmodParser.AssignmentContext,0)


        def condition(self):
            return self.getTypedRuleContext(NmodParser.ConditionContext,0)


        def reading(self):
            return self.getTypedRuleContext(NmodParser.ReadingContext,0)


        def writing(self):
            return self.getTypedRuleContext(NmodParser.WritingContext,0)


        def cicle(self):
            return self.getTypedRuleContext(NmodParser.CicleContext,0)


        def call_module(self):
            return self.getTypedRuleContext(NmodParser.Call_moduleContext,0)


        def getRuleIndex(self):
            return NmodParser.RULE_statute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatute" ):
                listener.enterStatute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatute" ):
                listener.exitStatute(self)




    def statute(self):

        localctx = NmodParser.StatuteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_statute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 302
                self.assignment()
                pass

            elif la_ == 2:
                self.state = 303
                self.condition()
                pass

            elif la_ == 3:
                self.state = 304
                self.reading()
                pass

            elif la_ == 4:
                self.state = 305
                self.writing()
                pass

            elif la_ == 5:
                self.state = 306
                self.cicle()
                pass

            elif la_ == 6:
                self.state = 307
                self.call_module()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._id_access = None # Id_accessContext
            self._EQUALS = None # Token

        def id_access(self):
            return self.getTypedRuleContext(NmodParser.Id_accessContext,0)


        def EQUALS(self):
            return self.getToken(NmodParser.EQUALS, 0)

        def exp(self):
            return self.getTypedRuleContext(NmodParser.ExpContext,0)


        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = NmodParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 310
            localctx._id_access = self.id_access()
            c.insertStackOperand((None if localctx._id_access is None else self._input.getText((localctx._id_access.start,localctx._id_access.stop))))
            self.state = 312
            localctx._EQUALS = self.match(NmodParser.EQUALS)
            c.insertStackOperator((None if localctx._EQUALS is None else localctx._EQUALS.text))
            self.state = 314
            self.exp()
            c.generateAssignmentQuad()
            self.state = 316
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(NmodParser.IF, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.BlockContext)
            else:
                return self.getTypedRuleContext(NmodParser.BlockContext,i)


        def ELSE(self):
            return self.getToken(NmodParser.ELSE, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)




    def condition(self):

        localctx = NmodParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_condition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self.match(NmodParser.IF)
            self.state = 319
            self.match(NmodParser.LPRACKET)
            self.state = 320
            self.expression()
            self.state = 321
            self.match(NmodParser.RPRACKET)
            c.conditionStart('condition')
            self.state = 323
            self.block()
            self.state = 327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NmodParser.ELSE:
                self.state = 324
                self.match(NmodParser.ELSE)
                c.conditionElse()
                self.state = 326
                self.block()


            c.conditionEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CicleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(NmodParser.WHILE, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def block(self):
            return self.getTypedRuleContext(NmodParser.BlockContext,0)


        def getRuleIndex(self):
            return NmodParser.RULE_cicle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCicle" ):
                listener.enterCicle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCicle" ):
                listener.exitCicle(self)




    def cicle(self):

        localctx = NmodParser.CicleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_cicle)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 331
            self.match(NmodParser.WHILE)
            c.insertStackJump(c.quadCount)
            self.state = 333
            self.match(NmodParser.LPRACKET)
            self.state = 334
            self.expression()
            self.state = 335
            self.match(NmodParser.RPRACKET)
            c.conditionStart('cicle')
            self.state = 337
            self.block()
            c.cicleEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReadingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._STRING = None # Token

        def READ(self):
            return self.getToken(NmodParser.READ, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def STRING(self):
            return self.getToken(NmodParser.STRING, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_reading

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReading" ):
                listener.enterReading(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReading" ):
                listener.exitReading(self)




    def reading(self):

        localctx = NmodParser.ReadingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_reading)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 340
            self.match(NmodParser.READ)
            self.state = 341
            self.match(NmodParser.LPRACKET)
            self.state = 357
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NmodParser.STRING]:
                self.state = 342
                localctx._STRING = self.match(NmodParser.STRING)
                c.insertStackOperand((None if localctx._STRING is None else localctx._STRING.text))
                c.insertStackType('char[]')
                pass
            elif token in [NmodParser.LPRACKET, NmodParser.PLUS, NmodParser.MINUS, NmodParser.RETURN, NmodParser.RNOM, NmodParser.REXP, NmodParser.RGAMMA, NmodParser.POINTS, NmodParser.LINES, NmodParser.TEXT, NmodParser.BARPLOT, NmodParser.PIECHART, NmodParser.XYPLOT, NmodParser.DENSITYPLOT, NmodParser.HISTOGRAM, NmodParser.SIN, NmodParser.COS, NmodParser.TAN, NmodParser.ASIN, NmodParser.ACOS, NmodParser.ATAN, NmodParser.ATAN2, NmodParser.LOG, NmodParser.LOG10, NmodParser.EXPONENT, NmodParser.MAX, NmodParser.MIN, NmodParser.RANGE, NmodParser.SUM, NmodParser.DIFF, NmodParser.PROD, NmodParser.MEAN, NmodParser.MEDIAN, NmodParser.QUANTILE, NmodParser.WEIGHEDMEAN, NmodParser.RANK, NmodParser.VARIANCE, NmodParser.SD, NmodParser.COR, NmodParser.COV, NmodParser.ROUND, NmodParser.TRANSPOSE, NmodParser.DIAGONAL, NmodParser.GINV, NmodParser.ROWSUM, NmodParser.COLSUM, NmodParser.LOAD, NmodParser.DATA, NmodParser.LIBRARY, NmodParser.RPOIS, NmodParser.RWEIBULL, NmodParser.RBINOM, NmodParser.RGEOM, NmodParser.RUNIF, NmodParser.CTEI, NmodParser.CTEF, NmodParser.CTEC, NmodParser.ID]:
                self.state = 346 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 345
                    self.expression()
                    self.state = 348 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NmodParser.LPRACKET) | (1 << NmodParser.PLUS) | (1 << NmodParser.MINUS) | (1 << NmodParser.RETURN) | (1 << NmodParser.RNOM) | (1 << NmodParser.REXP) | (1 << NmodParser.RGAMMA) | (1 << NmodParser.POINTS) | (1 << NmodParser.LINES) | (1 << NmodParser.TEXT) | (1 << NmodParser.BARPLOT) | (1 << NmodParser.PIECHART) | (1 << NmodParser.XYPLOT) | (1 << NmodParser.DENSITYPLOT) | (1 << NmodParser.HISTOGRAM) | (1 << NmodParser.SIN) | (1 << NmodParser.COS) | (1 << NmodParser.TAN) | (1 << NmodParser.ASIN) | (1 << NmodParser.ACOS) | (1 << NmodParser.ATAN) | (1 << NmodParser.ATAN2) | (1 << NmodParser.LOG) | (1 << NmodParser.LOG10) | (1 << NmodParser.EXPONENT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NmodParser.MAX - 64)) | (1 << (NmodParser.MIN - 64)) | (1 << (NmodParser.RANGE - 64)) | (1 << (NmodParser.SUM - 64)) | (1 << (NmodParser.DIFF - 64)) | (1 << (NmodParser.PROD - 64)) | (1 << (NmodParser.MEAN - 64)) | (1 << (NmodParser.MEDIAN - 64)) | (1 << (NmodParser.QUANTILE - 64)) | (1 << (NmodParser.WEIGHEDMEAN - 64)) | (1 << (NmodParser.RANK - 64)) | (1 << (NmodParser.VARIANCE - 64)) | (1 << (NmodParser.SD - 64)) | (1 << (NmodParser.COR - 64)) | (1 << (NmodParser.COV - 64)) | (1 << (NmodParser.ROUND - 64)) | (1 << (NmodParser.TRANSPOSE - 64)) | (1 << (NmodParser.DIAGONAL - 64)) | (1 << (NmodParser.GINV - 64)) | (1 << (NmodParser.ROWSUM - 64)) | (1 << (NmodParser.COLSUM - 64)) | (1 << (NmodParser.LOAD - 64)) | (1 << (NmodParser.DATA - 64)) | (1 << (NmodParser.LIBRARY - 64)) | (1 << (NmodParser.RPOIS - 64)) | (1 << (NmodParser.RWEIBULL - 64)) | (1 << (NmodParser.RBINOM - 64)) | (1 << (NmodParser.RGEOM - 64)) | (1 << (NmodParser.RUNIF - 64)) | (1 << (NmodParser.CTEI - 64)) | (1 << (NmodParser.CTEF - 64)) | (1 << (NmodParser.CTEC - 64)) | (1 << (NmodParser.ID - 64)))) != 0)):
                        break

                self.state = 354
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NmodParser.COMMA:
                    self.state = 350
                    self.match(NmodParser.COMMA)
                    self.state = 351
                    self.expression()
                    self.state = 356
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [NmodParser.RPRACKET]:
                pass
            else:
                pass
            self.state = 359
            self.match(NmodParser.RPRACKET)
            self.state = 360
            self.match(NmodParser.SEMICOLON)
            c.generateCommonQuad('read')
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WritingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None
            self._STRING = None # Token

        def PRINT(self):
            return self.getToken(NmodParser.PRINT, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def STRING(self):
            return self.getToken(NmodParser.STRING, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_writing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWriting" ):
                listener.enterWriting(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWriting" ):
                listener.exitWriting(self)




    def writing(self):

        localctx = NmodParser.WritingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_writing)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.match(NmodParser.PRINT)
            self.state = 364
            self.match(NmodParser.LPRACKET)
            self.state = 381
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NmodParser.STRING]:
                self.state = 365
                localctx._STRING = self.match(NmodParser.STRING)
                localctx.val = c.insertConstant('char', (None if localctx._STRING is None else localctx._STRING.text))
                c.insertStackOperand(localctx.val)
                c.insertStackType('char')
                pass
            elif token in [NmodParser.LPRACKET, NmodParser.PLUS, NmodParser.MINUS, NmodParser.RETURN, NmodParser.RNOM, NmodParser.REXP, NmodParser.RGAMMA, NmodParser.POINTS, NmodParser.LINES, NmodParser.TEXT, NmodParser.BARPLOT, NmodParser.PIECHART, NmodParser.XYPLOT, NmodParser.DENSITYPLOT, NmodParser.HISTOGRAM, NmodParser.SIN, NmodParser.COS, NmodParser.TAN, NmodParser.ASIN, NmodParser.ACOS, NmodParser.ATAN, NmodParser.ATAN2, NmodParser.LOG, NmodParser.LOG10, NmodParser.EXPONENT, NmodParser.MAX, NmodParser.MIN, NmodParser.RANGE, NmodParser.SUM, NmodParser.DIFF, NmodParser.PROD, NmodParser.MEAN, NmodParser.MEDIAN, NmodParser.QUANTILE, NmodParser.WEIGHEDMEAN, NmodParser.RANK, NmodParser.VARIANCE, NmodParser.SD, NmodParser.COR, NmodParser.COV, NmodParser.ROUND, NmodParser.TRANSPOSE, NmodParser.DIAGONAL, NmodParser.GINV, NmodParser.ROWSUM, NmodParser.COLSUM, NmodParser.LOAD, NmodParser.DATA, NmodParser.LIBRARY, NmodParser.RPOIS, NmodParser.RWEIBULL, NmodParser.RBINOM, NmodParser.RGEOM, NmodParser.RUNIF, NmodParser.CTEI, NmodParser.CTEF, NmodParser.CTEC, NmodParser.ID]:
                self.state = 370 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 369
                    self.expression()
                    self.state = 372 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NmodParser.LPRACKET) | (1 << NmodParser.PLUS) | (1 << NmodParser.MINUS) | (1 << NmodParser.RETURN) | (1 << NmodParser.RNOM) | (1 << NmodParser.REXP) | (1 << NmodParser.RGAMMA) | (1 << NmodParser.POINTS) | (1 << NmodParser.LINES) | (1 << NmodParser.TEXT) | (1 << NmodParser.BARPLOT) | (1 << NmodParser.PIECHART) | (1 << NmodParser.XYPLOT) | (1 << NmodParser.DENSITYPLOT) | (1 << NmodParser.HISTOGRAM) | (1 << NmodParser.SIN) | (1 << NmodParser.COS) | (1 << NmodParser.TAN) | (1 << NmodParser.ASIN) | (1 << NmodParser.ACOS) | (1 << NmodParser.ATAN) | (1 << NmodParser.ATAN2) | (1 << NmodParser.LOG) | (1 << NmodParser.LOG10) | (1 << NmodParser.EXPONENT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NmodParser.MAX - 64)) | (1 << (NmodParser.MIN - 64)) | (1 << (NmodParser.RANGE - 64)) | (1 << (NmodParser.SUM - 64)) | (1 << (NmodParser.DIFF - 64)) | (1 << (NmodParser.PROD - 64)) | (1 << (NmodParser.MEAN - 64)) | (1 << (NmodParser.MEDIAN - 64)) | (1 << (NmodParser.QUANTILE - 64)) | (1 << (NmodParser.WEIGHEDMEAN - 64)) | (1 << (NmodParser.RANK - 64)) | (1 << (NmodParser.VARIANCE - 64)) | (1 << (NmodParser.SD - 64)) | (1 << (NmodParser.COR - 64)) | (1 << (NmodParser.COV - 64)) | (1 << (NmodParser.ROUND - 64)) | (1 << (NmodParser.TRANSPOSE - 64)) | (1 << (NmodParser.DIAGONAL - 64)) | (1 << (NmodParser.GINV - 64)) | (1 << (NmodParser.ROWSUM - 64)) | (1 << (NmodParser.COLSUM - 64)) | (1 << (NmodParser.LOAD - 64)) | (1 << (NmodParser.DATA - 64)) | (1 << (NmodParser.LIBRARY - 64)) | (1 << (NmodParser.RPOIS - 64)) | (1 << (NmodParser.RWEIBULL - 64)) | (1 << (NmodParser.RBINOM - 64)) | (1 << (NmodParser.RGEOM - 64)) | (1 << (NmodParser.RUNIF - 64)) | (1 << (NmodParser.CTEI - 64)) | (1 << (NmodParser.CTEF - 64)) | (1 << (NmodParser.CTEC - 64)) | (1 << (NmodParser.ID - 64)))) != 0)):
                        break

                self.state = 378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NmodParser.COMMA:
                    self.state = 374
                    self.match(NmodParser.COMMA)
                    self.state = 375
                    self.expression()
                    self.state = 380
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [NmodParser.RPRACKET]:
                pass
            else:
                pass
            self.state = 383
            self.match(NmodParser.RPRACKET)
            self.state = 384
            self.match(NmodParser.SEMICOLON)
            c.generateCommonQuad('print')
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Call_moduleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self.val = None
            self._ID = None # Token

        def r_return(self):
            return self.getTypedRuleContext(NmodParser.R_returnContext,0)


        def rnom(self):
            return self.getTypedRuleContext(NmodParser.RnomContext,0)


        def rexp(self):
            return self.getTypedRuleContext(NmodParser.RexpContext,0)


        def rgamma(self):
            return self.getTypedRuleContext(NmodParser.RgammaContext,0)


        def points(self):
            return self.getTypedRuleContext(NmodParser.PointsContext,0)


        def lines(self):
            return self.getTypedRuleContext(NmodParser.LinesContext,0)


        def text(self):
            return self.getTypedRuleContext(NmodParser.TextContext,0)


        def barplot(self):
            return self.getTypedRuleContext(NmodParser.BarplotContext,0)


        def piechart(self):
            return self.getTypedRuleContext(NmodParser.PiechartContext,0)


        def xyplot(self):
            return self.getTypedRuleContext(NmodParser.XyplotContext,0)


        def densityplot(self):
            return self.getTypedRuleContext(NmodParser.DensityplotContext,0)


        def histogram(self):
            return self.getTypedRuleContext(NmodParser.HistogramContext,0)


        def sin(self):
            return self.getTypedRuleContext(NmodParser.SinContext,0)


        def cos(self):
            return self.getTypedRuleContext(NmodParser.CosContext,0)


        def tan(self):
            return self.getTypedRuleContext(NmodParser.TanContext,0)


        def asin(self):
            return self.getTypedRuleContext(NmodParser.AsinContext,0)


        def acos(self):
            return self.getTypedRuleContext(NmodParser.AcosContext,0)


        def atan(self):
            return self.getTypedRuleContext(NmodParser.AtanContext,0)


        def atan2(self):
            return self.getTypedRuleContext(NmodParser.Atan2Context,0)


        def log(self):
            return self.getTypedRuleContext(NmodParser.LogContext,0)


        def log10(self):
            return self.getTypedRuleContext(NmodParser.Log10Context,0)


        def exponent(self):
            return self.getTypedRuleContext(NmodParser.ExponentContext,0)


        def f_max(self):
            return self.getTypedRuleContext(NmodParser.F_maxContext,0)


        def f_min(self):
            return self.getTypedRuleContext(NmodParser.F_minContext,0)


        def f_range(self):
            return self.getTypedRuleContext(NmodParser.F_rangeContext,0)


        def f_sum(self):
            return self.getTypedRuleContext(NmodParser.F_sumContext,0)


        def diff(self):
            return self.getTypedRuleContext(NmodParser.DiffContext,0)


        def prod(self):
            return self.getTypedRuleContext(NmodParser.ProdContext,0)


        def mean(self):
            return self.getTypedRuleContext(NmodParser.MeanContext,0)


        def median(self):
            return self.getTypedRuleContext(NmodParser.MedianContext,0)


        def quantile(self):
            return self.getTypedRuleContext(NmodParser.QuantileContext,0)


        def weighedmean(self):
            return self.getTypedRuleContext(NmodParser.WeighedmeanContext,0)


        def rank(self):
            return self.getTypedRuleContext(NmodParser.RankContext,0)


        def var(self):
            return self.getTypedRuleContext(NmodParser.VarContext,0)


        def sd(self):
            return self.getTypedRuleContext(NmodParser.SdContext,0)


        def cor(self):
            return self.getTypedRuleContext(NmodParser.CorContext,0)


        def cov(self):
            return self.getTypedRuleContext(NmodParser.CovContext,0)


        def f_round(self):
            return self.getTypedRuleContext(NmodParser.F_roundContext,0)


        def transpose(self):
            return self.getTypedRuleContext(NmodParser.TransposeContext,0)


        def diagonal(self):
            return self.getTypedRuleContext(NmodParser.DiagonalContext,0)


        def ginv(self):
            return self.getTypedRuleContext(NmodParser.GinvContext,0)


        def rowsum(self):
            return self.getTypedRuleContext(NmodParser.RowsumContext,0)


        def colsum(self):
            return self.getTypedRuleContext(NmodParser.ColsumContext,0)


        def load(self):
            return self.getTypedRuleContext(NmodParser.LoadContext,0)


        def data(self):
            return self.getTypedRuleContext(NmodParser.DataContext,0)


        def library(self):
            return self.getTypedRuleContext(NmodParser.LibraryContext,0)


        def rpois(self):
            return self.getTypedRuleContext(NmodParser.RpoisContext,0)


        def rweibull(self):
            return self.getTypedRuleContext(NmodParser.RweibullContext,0)


        def rbinom(self):
            return self.getTypedRuleContext(NmodParser.RbinomContext,0)


        def rgeom(self):
            return self.getTypedRuleContext(NmodParser.RgeomContext,0)


        def runif(self):
            return self.getTypedRuleContext(NmodParser.RunifContext,0)


        def ID(self):
            return self.getToken(NmodParser.ID, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_call_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCall_module" ):
                listener.enterCall_module(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCall_module" ):
                listener.exitCall_module(self)




    def call_module(self):

        localctx = NmodParser.Call_moduleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_call_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NmodParser.RETURN]:
                self.state = 387
                self.r_return()
                pass
            elif token in [NmodParser.RNOM]:
                self.state = 388
                self.rnom()
                pass
            elif token in [NmodParser.REXP]:
                self.state = 389
                self.rexp()
                pass
            elif token in [NmodParser.RGAMMA]:
                self.state = 390
                self.rgamma()
                pass
            elif token in [NmodParser.POINTS]:
                self.state = 391
                self.points()
                pass
            elif token in [NmodParser.LINES]:
                self.state = 392
                self.lines()
                pass
            elif token in [NmodParser.TEXT]:
                self.state = 393
                self.text()
                pass
            elif token in [NmodParser.BARPLOT]:
                self.state = 394
                self.barplot()
                pass
            elif token in [NmodParser.PIECHART]:
                self.state = 395
                self.piechart()
                pass
            elif token in [NmodParser.XYPLOT]:
                self.state = 396
                self.xyplot()
                pass
            elif token in [NmodParser.DENSITYPLOT]:
                self.state = 397
                self.densityplot()
                pass
            elif token in [NmodParser.HISTOGRAM]:
                self.state = 398
                self.histogram()
                pass
            elif token in [NmodParser.SIN]:
                self.state = 399
                self.sin()
                pass
            elif token in [NmodParser.COS]:
                self.state = 400
                self.cos()
                pass
            elif token in [NmodParser.TAN]:
                self.state = 401
                self.tan()
                pass
            elif token in [NmodParser.ASIN]:
                self.state = 402
                self.asin()
                pass
            elif token in [NmodParser.ACOS]:
                self.state = 403
                self.acos()
                pass
            elif token in [NmodParser.ATAN]:
                self.state = 404
                self.atan()
                pass
            elif token in [NmodParser.ATAN2]:
                self.state = 405
                self.atan2()
                pass
            elif token in [NmodParser.LOG]:
                self.state = 406
                self.log()
                pass
            elif token in [NmodParser.LOG10]:
                self.state = 407
                self.log10()
                pass
            elif token in [NmodParser.EXPONENT]:
                self.state = 408
                self.exponent()
                pass
            elif token in [NmodParser.MAX]:
                self.state = 409
                self.f_max()
                pass
            elif token in [NmodParser.MIN]:
                self.state = 410
                self.f_min()
                pass
            elif token in [NmodParser.RANGE]:
                self.state = 411
                self.f_range()
                pass
            elif token in [NmodParser.SUM]:
                self.state = 412
                self.f_sum()
                pass
            elif token in [NmodParser.DIFF]:
                self.state = 413
                self.diff()
                pass
            elif token in [NmodParser.PROD]:
                self.state = 414
                self.prod()
                pass
            elif token in [NmodParser.MEAN]:
                self.state = 415
                self.mean()
                pass
            elif token in [NmodParser.MEDIAN]:
                self.state = 416
                self.median()
                pass
            elif token in [NmodParser.QUANTILE]:
                self.state = 417
                self.quantile()
                pass
            elif token in [NmodParser.WEIGHEDMEAN]:
                self.state = 418
                self.weighedmean()
                pass
            elif token in [NmodParser.RANK]:
                self.state = 419
                self.rank()
                pass
            elif token in [NmodParser.VARIANCE]:
                self.state = 420
                self.var()
                pass
            elif token in [NmodParser.SD]:
                self.state = 421
                self.sd()
                pass
            elif token in [NmodParser.COR]:
                self.state = 422
                self.cor()
                pass
            elif token in [NmodParser.COV]:
                self.state = 423
                self.cov()
                pass
            elif token in [NmodParser.ROUND]:
                self.state = 424
                self.f_round()
                pass
            elif token in [NmodParser.TRANSPOSE]:
                self.state = 425
                self.transpose()
                pass
            elif token in [NmodParser.DIAGONAL]:
                self.state = 426
                self.diagonal()
                pass
            elif token in [NmodParser.GINV]:
                self.state = 427
                self.ginv()
                pass
            elif token in [NmodParser.ROWSUM]:
                self.state = 428
                self.rowsum()
                pass
            elif token in [NmodParser.COLSUM]:
                self.state = 429
                self.colsum()
                pass
            elif token in [NmodParser.LOAD]:
                self.state = 430
                self.load()
                pass
            elif token in [NmodParser.DATA]:
                self.state = 431
                self.data()
                pass
            elif token in [NmodParser.LIBRARY]:
                self.state = 432
                self.library()
                pass
            elif token in [NmodParser.RPOIS]:
                self.state = 433
                self.rpois()
                pass
            elif token in [NmodParser.RWEIBULL]:
                self.state = 434
                self.rweibull()
                pass
            elif token in [NmodParser.RBINOM]:
                self.state = 435
                self.rbinom()
                pass
            elif token in [NmodParser.RGEOM]:
                self.state = 436
                self.rgeom()
                pass
            elif token in [NmodParser.RUNIF]:
                self.state = 437
                self.runif()
                pass
            elif token in [NmodParser.ID]:
                self.state = 438
                localctx._ID = self.match(NmodParser.ID)
                c.generateERA((None if localctx._ID is None else localctx._ID.text))
                c.functionDirectory.functionExists((None if localctx._ID is None else localctx._ID.text))
                c.localFunc = (None if localctx._ID is None else localctx._ID.text)
                localctx.val = c.getModuleReturnAddr((None if localctx._ID is None else localctx._ID.text))
                localctx.type = c.getModuleReturnType((None if localctx._ID is None else localctx._ID.text))
                self.state = 444
                self.match(NmodParser.LPRACKET)
                c.insertFalseBottom()
                self.state = 458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NmodParser.LPRACKET) | (1 << NmodParser.PLUS) | (1 << NmodParser.MINUS) | (1 << NmodParser.RETURN) | (1 << NmodParser.RNOM) | (1 << NmodParser.REXP) | (1 << NmodParser.RGAMMA) | (1 << NmodParser.POINTS) | (1 << NmodParser.LINES) | (1 << NmodParser.TEXT) | (1 << NmodParser.BARPLOT) | (1 << NmodParser.PIECHART) | (1 << NmodParser.XYPLOT) | (1 << NmodParser.DENSITYPLOT) | (1 << NmodParser.HISTOGRAM) | (1 << NmodParser.SIN) | (1 << NmodParser.COS) | (1 << NmodParser.TAN) | (1 << NmodParser.ASIN) | (1 << NmodParser.ACOS) | (1 << NmodParser.ATAN) | (1 << NmodParser.ATAN2) | (1 << NmodParser.LOG) | (1 << NmodParser.LOG10) | (1 << NmodParser.EXPONENT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NmodParser.MAX - 64)) | (1 << (NmodParser.MIN - 64)) | (1 << (NmodParser.RANGE - 64)) | (1 << (NmodParser.SUM - 64)) | (1 << (NmodParser.DIFF - 64)) | (1 << (NmodParser.PROD - 64)) | (1 << (NmodParser.MEAN - 64)) | (1 << (NmodParser.MEDIAN - 64)) | (1 << (NmodParser.QUANTILE - 64)) | (1 << (NmodParser.WEIGHEDMEAN - 64)) | (1 << (NmodParser.RANK - 64)) | (1 << (NmodParser.VARIANCE - 64)) | (1 << (NmodParser.SD - 64)) | (1 << (NmodParser.COR - 64)) | (1 << (NmodParser.COV - 64)) | (1 << (NmodParser.ROUND - 64)) | (1 << (NmodParser.TRANSPOSE - 64)) | (1 << (NmodParser.DIAGONAL - 64)) | (1 << (NmodParser.GINV - 64)) | (1 << (NmodParser.ROWSUM - 64)) | (1 << (NmodParser.COLSUM - 64)) | (1 << (NmodParser.LOAD - 64)) | (1 << (NmodParser.DATA - 64)) | (1 << (NmodParser.LIBRARY - 64)) | (1 << (NmodParser.RPOIS - 64)) | (1 << (NmodParser.RWEIBULL - 64)) | (1 << (NmodParser.RBINOM - 64)) | (1 << (NmodParser.RGEOM - 64)) | (1 << (NmodParser.RUNIF - 64)) | (1 << (NmodParser.CTEI - 64)) | (1 << (NmodParser.CTEF - 64)) | (1 << (NmodParser.CTEC - 64)) | (1 << (NmodParser.ID - 64)))) != 0):
                    self.state = 446
                    self.exp()
                    c.generateActionParameter()
                    self.state = 455
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==NmodParser.COMMA:
                        self.state = 448
                        self.match(NmodParser.COMMA)
                        c.moveParameterPointer()
                        self.state = 450
                        self.exp()
                        c.generateActionParameter()
                        self.state = 457
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 460
                self.match(NmodParser.RPRACKET)
                c.removeFalseBottom()
                c.resetParameterPointer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._AND = None # Token
            self._OR = None # Token

        def sub_exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Sub_expContext)
            else:
                return self.getTypedRuleContext(NmodParser.Sub_expContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.AND)
            else:
                return self.getToken(NmodParser.AND, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.OR)
            else:
                return self.getToken(NmodParser.OR, i)

        def getRuleIndex(self):
            return NmodParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = NmodParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            self.sub_exp()
            c.generateQuad(c.localFunc, 'sub_exp')
            self.state = 484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.AND or _la==NmodParser.OR:
                self.state = 471 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 471
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [NmodParser.AND]:
                        self.state = 467
                        localctx._AND = self.match(NmodParser.AND)
                        c.insertStackOperator((None if localctx._AND is None else localctx._AND.text))
                        pass
                    elif token in [NmodParser.OR]:
                        self.state = 469
                        localctx._OR = self.match(NmodParser.OR)
                        c.insertStackOperator((None if localctx._OR is None else localctx._OR.text))
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 473 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==NmodParser.AND or _la==NmodParser.OR):
                        break

                self.state = 476 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 475
                        self.sub_exp()

                    else:
                        raise NoViableAltException(self)
                    self.state = 478 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

                c.generateQuad(c.localFunc, 'sub_exp')
                self.state = 486
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sub_expContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._EQUAL = None # Token
            self._GREATEROR = None # Token
            self._GREATERTHAN = None # Token
            self._LESSEROR = None # Token
            self._LESSERTHAN = None # Token

        def exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpContext,i)


        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.EQUAL)
            else:
                return self.getToken(NmodParser.EQUAL, i)

        def GREATEROR(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.GREATEROR)
            else:
                return self.getToken(NmodParser.GREATEROR, i)

        def GREATERTHAN(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.GREATERTHAN)
            else:
                return self.getToken(NmodParser.GREATERTHAN, i)

        def LESSEROR(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.LESSEROR)
            else:
                return self.getToken(NmodParser.LESSEROR, i)

        def LESSERTHAN(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.LESSERTHAN)
            else:
                return self.getToken(NmodParser.LESSERTHAN, i)

        def getRuleIndex(self):
            return NmodParser.RULE_sub_exp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSub_exp" ):
                listener.enterSub_exp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSub_exp" ):
                listener.exitSub_exp(self)




    def sub_exp(self):

        localctx = NmodParser.Sub_expContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_sub_exp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.exp()
            c.generateQuad(c.localFunc, 'exp')
            self.state = 512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NmodParser.GREATERTHAN) | (1 << NmodParser.GREATEROR) | (1 << NmodParser.LESSERTHAN) | (1 << NmodParser.LESSEROR) | (1 << NmodParser.EQUAL))) != 0):
                self.state = 499 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 499
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [NmodParser.EQUAL]:
                        self.state = 489
                        localctx._EQUAL = self.match(NmodParser.EQUAL)
                        c.insertStackOperator((None if localctx._EQUAL is None else localctx._EQUAL.text))
                        pass
                    elif token in [NmodParser.GREATEROR]:
                        self.state = 491
                        localctx._GREATEROR = self.match(NmodParser.GREATEROR)
                        c.insertStackOperator((None if localctx._GREATEROR is None else localctx._GREATEROR.text))
                        pass
                    elif token in [NmodParser.GREATERTHAN]:
                        self.state = 493
                        localctx._GREATERTHAN = self.match(NmodParser.GREATERTHAN)
                        c.insertStackOperator((None if localctx._GREATERTHAN is None else localctx._GREATERTHAN.text))
                        pass
                    elif token in [NmodParser.LESSEROR]:
                        self.state = 495
                        localctx._LESSEROR = self.match(NmodParser.LESSEROR)
                        c.insertStackOperator((None if localctx._LESSEROR is None else localctx._LESSEROR.text))
                        pass
                    elif token in [NmodParser.LESSERTHAN]:
                        self.state = 497
                        localctx._LESSERTHAN = self.match(NmodParser.LESSERTHAN)
                        c.insertStackOperator((None if localctx._LESSERTHAN is None else localctx._LESSERTHAN.text))
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 501 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NmodParser.GREATERTHAN) | (1 << NmodParser.GREATEROR) | (1 << NmodParser.LESSERTHAN) | (1 << NmodParser.LESSEROR) | (1 << NmodParser.EQUAL))) != 0)):
                        break

                self.state = 504 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 503
                        self.exp()

                    else:
                        raise NoViableAltException(self)
                    self.state = 506 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

                c.generateQuad(c.localFunc, 'exp')
                self.state = 514
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._MINUS = None # Token
            self._PLUS = None # Token

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.TermContext)
            else:
                return self.getTypedRuleContext(NmodParser.TermContext,i)


        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.MINUS)
            else:
                return self.getToken(NmodParser.MINUS, i)

        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.PLUS)
            else:
                return self.getToken(NmodParser.PLUS, i)

        def getRuleIndex(self):
            return NmodParser.RULE_exp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp" ):
                listener.enterExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp" ):
                listener.exitExp(self)




    def exp(self):

        localctx = NmodParser.ExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_exp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.term()
            c.generateQuad(c.localFunc, 'term')
            self.state = 534
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 521 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 521
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [NmodParser.MINUS]:
                                self.state = 517
                                localctx._MINUS = self.match(NmodParser.MINUS)
                                c.insertStackOperator((None if localctx._MINUS is None else localctx._MINUS.text))
                                pass
                            elif token in [NmodParser.PLUS]:
                                self.state = 519
                                localctx._PLUS = self.match(NmodParser.PLUS)
                                c.insertStackOperator((None if localctx._PLUS is None else localctx._PLUS.text))
                                pass
                            else:
                                raise NoViableAltException(self)


                        else:
                            raise NoViableAltException(self)
                        self.state = 523 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

                    self.state = 526 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 525
                            self.term()

                        else:
                            raise NoViableAltException(self)
                        self.state = 528 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

                    c.generateQuad(c.localFunc, 'term') 
                self.state = 536
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._DIVISION = None # Token
            self._TIMES = None # Token

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.FactorContext)
            else:
                return self.getTypedRuleContext(NmodParser.FactorContext,i)


        def DIVISION(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.DIVISION)
            else:
                return self.getToken(NmodParser.DIVISION, i)

        def TIMES(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.TIMES)
            else:
                return self.getToken(NmodParser.TIMES, i)

        def getRuleIndex(self):
            return NmodParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = NmodParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self.factor()
            c.generateQuad(c.localFunc, 'factor')
            self.state = 556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.TIMES or _la==NmodParser.DIVISION:
                self.state = 543 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 543
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [NmodParser.DIVISION]:
                        self.state = 539
                        localctx._DIVISION = self.match(NmodParser.DIVISION)
                        c.insertStackOperator((None if localctx._DIVISION is None else localctx._DIVISION.text))
                        pass
                    elif token in [NmodParser.TIMES]:
                        self.state = 541
                        localctx._TIMES = self.match(NmodParser.TIMES)
                        c.insertStackOperator((None if localctx._TIMES is None else localctx._TIMES.text))
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 545 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==NmodParser.TIMES or _la==NmodParser.DIVISION):
                        break

                self.state = 548 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 547
                        self.factor()

                    else:
                        raise NoViableAltException(self)
                    self.state = 550 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

                c.generateQuad(c.localFunc, 'factor')
                self.state = 558
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def var_cte(self):
            return self.getTypedRuleContext(NmodParser.Var_cteContext,0)


        def PLUS(self):
            return self.getToken(NmodParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(NmodParser.MINUS, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)




    def factor(self):

        localctx = NmodParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_factor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NmodParser.LPRACKET]:
                self.state = 559
                self.match(NmodParser.LPRACKET)
                c.insertFalseBottom()
                self.state = 561
                self.expression()
                self.state = 562
                self.match(NmodParser.RPRACKET)
                c.removeFalseBottom()
                pass
            elif token in [NmodParser.PLUS, NmodParser.MINUS, NmodParser.RETURN, NmodParser.RNOM, NmodParser.REXP, NmodParser.RGAMMA, NmodParser.POINTS, NmodParser.LINES, NmodParser.TEXT, NmodParser.BARPLOT, NmodParser.PIECHART, NmodParser.XYPLOT, NmodParser.DENSITYPLOT, NmodParser.HISTOGRAM, NmodParser.SIN, NmodParser.COS, NmodParser.TAN, NmodParser.ASIN, NmodParser.ACOS, NmodParser.ATAN, NmodParser.ATAN2, NmodParser.LOG, NmodParser.LOG10, NmodParser.EXPONENT, NmodParser.MAX, NmodParser.MIN, NmodParser.RANGE, NmodParser.SUM, NmodParser.DIFF, NmodParser.PROD, NmodParser.MEAN, NmodParser.MEDIAN, NmodParser.QUANTILE, NmodParser.WEIGHEDMEAN, NmodParser.RANK, NmodParser.VARIANCE, NmodParser.SD, NmodParser.COR, NmodParser.COV, NmodParser.ROUND, NmodParser.TRANSPOSE, NmodParser.DIAGONAL, NmodParser.GINV, NmodParser.ROWSUM, NmodParser.COLSUM, NmodParser.LOAD, NmodParser.DATA, NmodParser.LIBRARY, NmodParser.RPOIS, NmodParser.RWEIBULL, NmodParser.RBINOM, NmodParser.RGEOM, NmodParser.RUNIF, NmodParser.CTEI, NmodParser.CTEF, NmodParser.CTEC, NmodParser.ID]:
                self.state = 566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NmodParser.PLUS or _la==NmodParser.MINUS:
                    self.state = 565
                    _la = self._input.LA(1)
                    if not(_la==NmodParser.PLUS or _la==NmodParser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 568
                self.var_cte()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Var_cteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self.val = None
            self._call_module = None # Call_moduleContext
            self._id_access = None # Id_accessContext
            self._CTEI = None # Token
            self._CTEF = None # Token
            self._CTEC = None # Token

        def call_module(self):
            return self.getTypedRuleContext(NmodParser.Call_moduleContext,0)


        def id_access(self):
            return self.getTypedRuleContext(NmodParser.Id_accessContext,0)


        def CTEI(self):
            return self.getToken(NmodParser.CTEI, 0)

        def CTEF(self):
            return self.getToken(NmodParser.CTEF, 0)

        def CTEC(self):
            return self.getToken(NmodParser.CTEC, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_var_cte

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_cte" ):
                listener.enterVar_cte(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_cte" ):
                listener.exitVar_cte(self)




    def var_cte(self):

        localctx = NmodParser.Var_cteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_var_cte)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 571
                localctx._call_module = self.call_module()
                localctx.type = localctx._call_module.type
                localctx.val = localctx._call_module.val
                pass

            elif la_ == 2:
                self.state = 575
                localctx._id_access = self.id_access()
                localctx.type = c.getVarType(c.localFunc, (None if localctx._id_access is None else self._input.getText((localctx._id_access.start,localctx._id_access.stop))))
                localctx.val = c.getVarVal(c.localFunc, (None if localctx._id_access is None else self._input.getText((localctx._id_access.start,localctx._id_access.stop))))
                c.insertStackOperand((None if localctx._id_access is None else self._input.getText((localctx._id_access.start,localctx._id_access.stop))))
                c.insertStackType(localctx.type)
                pass

            elif la_ == 3:
                self.state = 581
                localctx._CTEI = self.match(NmodParser.CTEI)
                localctx.type = 'int'
                localctx.val = c.insertConstant(localctx.type, (None if localctx._CTEI is None else localctx._CTEI.text))
                c.insertStackOperand((None if localctx._CTEI is None else localctx._CTEI.text))
                c.insertStackType(localctx.type)
                pass

            elif la_ == 4:
                self.state = 586
                localctx._CTEF = self.match(NmodParser.CTEF)
                localctx.type = 'float'
                localctx.val = c.insertConstant(localctx.type, (None if localctx._CTEF is None else localctx._CTEF.text))
                c.insertStackOperand((None if localctx._CTEF is None else localctx._CTEF.text))
                c.insertStackType(localctx.type)
                pass

            elif la_ == 5:
                self.state = 591
                localctx._CTEC = self.match(NmodParser.CTEC)
                localctx.type = 'char'
                localctx.val = c.insertConstant(localctx.type, (None if localctx._CTEC is None else localctx._CTEC.text))
                c.insertStackOperand((None if localctx._CTEC is None else localctx._CTEC.text))
                c.insertStackType(localctx.type)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class R_returnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(NmodParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_r_return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterR_return" ):
                listener.enterR_return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitR_return" ):
                listener.exitR_return(self)




    def r_return(self):

        localctx = NmodParser.R_returnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_r_return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self.match(NmodParser.RETURN)
            self.state = 599
            self.expression()
            self.state = 600
            self.match(NmodParser.SEMICOLON)
            c.generateCommonQuad('return')
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RnomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RNOM(self):
            return self.getToken(NmodParser.RNOM, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_rnom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRnom" ):
                listener.enterRnom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRnom" ):
                listener.exitRnom(self)




    def rnom(self):

        localctx = NmodParser.RnomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_rnom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 603
            self.match(NmodParser.RNOM)
            self.state = 604
            self.match(NmodParser.LPRACKET)
            self.state = 605
            self.var_cte()
            self.state = 606
            self.match(NmodParser.COMMA)
            self.state = 607
            self.var_cte()
            self.state = 608
            self.match(NmodParser.COMMA)
            self.state = 609
            self.var_cte()
            self.state = 610
            self.match(NmodParser.COMMA)
            self.state = 611
            self.var_cte()
            self.state = 612
            self.match(NmodParser.RPRACKET)
            self.state = 613
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RexpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REXP(self):
            return self.getToken(NmodParser.REXP, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self):
            return self.getToken(NmodParser.COMMA, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_rexp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRexp" ):
                listener.enterRexp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRexp" ):
                listener.exitRexp(self)




    def rexp(self):

        localctx = NmodParser.RexpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_rexp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.match(NmodParser.REXP)
            self.state = 616
            self.match(NmodParser.LPRACKET)
            self.state = 617
            self.var_cte()
            self.state = 618
            self.match(NmodParser.COMMA)
            self.state = 619
            self.var_cte()
            self.state = 620
            self.match(NmodParser.RPRACKET)
            self.state = 621
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RgammaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RGAMMA(self):
            return self.getToken(NmodParser.RGAMMA, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_rgamma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRgamma" ):
                listener.enterRgamma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRgamma" ):
                listener.exitRgamma(self)




    def rgamma(self):

        localctx = NmodParser.RgammaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_rgamma)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.match(NmodParser.RGAMMA)
            self.state = 624
            self.match(NmodParser.LPRACKET)
            self.state = 625
            self.var_cte()
            self.state = 626
            self.match(NmodParser.COMMA)
            self.state = 627
            self.var_cte()
            self.state = 628
            self.match(NmodParser.COMMA)
            self.state = 629
            self.var_cte()
            self.state = 630
            self.match(NmodParser.RPRACKET)
            self.state = 631
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PointsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POINTS(self):
            return self.getToken(NmodParser.POINTS, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self):
            return self.getToken(NmodParser.COMMA, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_points

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPoints" ):
                listener.enterPoints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPoints" ):
                listener.exitPoints(self)




    def points(self):

        localctx = NmodParser.PointsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_points)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            self.match(NmodParser.POINTS)
            self.state = 634
            self.match(NmodParser.LPRACKET)
            self.state = 635
            self.var_cte()
            self.state = 636
            self.match(NmodParser.COMMA)
            self.state = 637
            self.var_cte()
            self.state = 638
            self.match(NmodParser.RPRACKET)
            self.state = 639
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LinesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINES(self):
            return self.getToken(NmodParser.LINES, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self):
            return self.getToken(NmodParser.COMMA, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_lines

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLines" ):
                listener.enterLines(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLines" ):
                listener.exitLines(self)




    def lines(self):

        localctx = NmodParser.LinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_lines)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.match(NmodParser.LINES)
            self.state = 642
            self.match(NmodParser.LPRACKET)
            self.state = 643
            self.var_cte()
            self.state = 644
            self.match(NmodParser.COMMA)
            self.state = 645
            self.var_cte()
            self.state = 646
            self.match(NmodParser.RPRACKET)
            self.state = 647
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TextContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TEXT(self):
            return self.getToken(NmodParser.TEXT, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def CTEI(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.CTEI)
            else:
                return self.getToken(NmodParser.CTEI, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def id_decl(self):
            return self.getTypedRuleContext(NmodParser.Id_declContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_text

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterText" ):
                listener.enterText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitText" ):
                listener.exitText(self)




    def text(self):

        localctx = NmodParser.TextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_text)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.match(NmodParser.TEXT)
            self.state = 650
            self.match(NmodParser.LPRACKET)
            self.state = 651
            self.match(NmodParser.CTEI)
            self.state = 652
            self.match(NmodParser.COMMA)
            self.state = 653
            self.match(NmodParser.CTEI)
            self.state = 654
            self.match(NmodParser.COMMA)
            self.state = 655
            self.id_decl()
            self.state = 656
            self.match(NmodParser.RPRACKET)
            self.state = 657
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BarplotContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BARPLOT(self):
            return self.getToken(NmodParser.BARPLOT, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_barplot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBarplot" ):
                listener.enterBarplot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBarplot" ):
                listener.exitBarplot(self)




    def barplot(self):

        localctx = NmodParser.BarplotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_barplot)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.match(NmodParser.BARPLOT)
            self.state = 660
            self.match(NmodParser.LPRACKET)
            self.state = 661
            self.var_cte()
            self.state = 662
            self.match(NmodParser.COMMA)
            self.state = 663
            self.var_cte()
            self.state = 664
            self.match(NmodParser.COMMA)
            self.state = 665
            self.var_cte()
            self.state = 666
            self.match(NmodParser.COMMA)
            self.state = 667
            self.var_cte()
            self.state = 668
            self.match(NmodParser.RPRACKET)
            self.state = 669
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PiechartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PIECHART(self):
            return self.getToken(NmodParser.PIECHART, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_piechart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPiechart" ):
                listener.enterPiechart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPiechart" ):
                listener.exitPiechart(self)




    def piechart(self):

        localctx = NmodParser.PiechartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_piechart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.match(NmodParser.PIECHART)
            self.state = 672
            self.match(NmodParser.LPRACKET)
            self.state = 673
            self.var_cte()
            self.state = 674
            self.match(NmodParser.COMMA)
            self.state = 675
            self.var_cte()
            self.state = 676
            self.match(NmodParser.COMMA)
            self.state = 677
            self.var_cte()
            self.state = 678
            self.match(NmodParser.COMMA)
            self.state = 679
            self.var_cte()
            self.state = 680
            self.match(NmodParser.RPRACKET)
            self.state = 681
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class XyplotContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XYPLOT(self):
            return self.getToken(NmodParser.XYPLOT, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_xyplot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXyplot" ):
                listener.enterXyplot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXyplot" ):
                listener.exitXyplot(self)




    def xyplot(self):

        localctx = NmodParser.XyplotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_xyplot)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.match(NmodParser.XYPLOT)
            self.state = 684
            self.match(NmodParser.LPRACKET)
            self.state = 685
            self.var_cte()
            self.state = 686
            self.match(NmodParser.COMMA)
            self.state = 687
            self.var_cte()
            self.state = 688
            self.match(NmodParser.COMMA)
            self.state = 689
            self.var_cte()
            self.state = 690
            self.match(NmodParser.COMMA)
            self.state = 691
            self.var_cte()
            self.state = 692
            self.match(NmodParser.RPRACKET)
            self.state = 693
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DensityplotContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DENSITYPLOT(self):
            return self.getToken(NmodParser.DENSITYPLOT, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_densityplot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDensityplot" ):
                listener.enterDensityplot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDensityplot" ):
                listener.exitDensityplot(self)




    def densityplot(self):

        localctx = NmodParser.DensityplotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_densityplot)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(NmodParser.DENSITYPLOT)
            self.state = 696
            self.match(NmodParser.LPRACKET)
            self.state = 697
            self.var_cte()
            self.state = 698
            self.match(NmodParser.COMMA)
            self.state = 699
            self.var_cte()
            self.state = 700
            self.match(NmodParser.COMMA)
            self.state = 701
            self.var_cte()
            self.state = 702
            self.match(NmodParser.COMMA)
            self.state = 703
            self.var_cte()
            self.state = 704
            self.match(NmodParser.RPRACKET)
            self.state = 705
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HistogramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HISTOGRAM(self):
            return self.getToken(NmodParser.HISTOGRAM, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_histogram

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHistogram" ):
                listener.enterHistogram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHistogram" ):
                listener.exitHistogram(self)




    def histogram(self):

        localctx = NmodParser.HistogramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_histogram)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.match(NmodParser.HISTOGRAM)
            self.state = 708
            self.match(NmodParser.LPRACKET)
            self.state = 709
            self.var_cte()
            self.state = 710
            self.match(NmodParser.COMMA)
            self.state = 711
            self.var_cte()
            self.state = 712
            self.match(NmodParser.COMMA)
            self.state = 713
            self.var_cte()
            self.state = 714
            self.match(NmodParser.COMMA)
            self.state = 715
            self.var_cte()
            self.state = 716
            self.match(NmodParser.RPRACKET)
            self.state = 717
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SinContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIN(self):
            return self.getToken(NmodParser.SIN, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_sin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSin" ):
                listener.enterSin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSin" ):
                listener.exitSin(self)




    def sin(self):

        localctx = NmodParser.SinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_sin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.match(NmodParser.SIN)
            self.state = 720
            self.match(NmodParser.LPRACKET)
            self.state = 721
            self.expression()
            self.state = 722
            self.match(NmodParser.RPRACKET)
            self.state = 723
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CosContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COS(self):
            return self.getToken(NmodParser.COS, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_cos

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCos" ):
                listener.enterCos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCos" ):
                listener.exitCos(self)




    def cos(self):

        localctx = NmodParser.CosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_cos)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.match(NmodParser.COS)
            self.state = 726
            self.match(NmodParser.LPRACKET)
            self.state = 727
            self.expression()
            self.state = 728
            self.match(NmodParser.RPRACKET)
            self.state = 729
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TanContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAN(self):
            return self.getToken(NmodParser.TAN, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_tan

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTan" ):
                listener.enterTan(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTan" ):
                listener.exitTan(self)




    def tan(self):

        localctx = NmodParser.TanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_tan)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.match(NmodParser.TAN)
            self.state = 732
            self.match(NmodParser.LPRACKET)
            self.state = 733
            self.expression()
            self.state = 734
            self.match(NmodParser.RPRACKET)
            self.state = 735
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AsinContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASIN(self):
            return self.getToken(NmodParser.ASIN, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_asin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsin" ):
                listener.enterAsin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsin" ):
                listener.exitAsin(self)




    def asin(self):

        localctx = NmodParser.AsinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_asin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 737
            self.match(NmodParser.ASIN)
            self.state = 738
            self.match(NmodParser.LPRACKET)
            self.state = 739
            self.expression()
            self.state = 740
            self.match(NmodParser.RPRACKET)
            self.state = 741
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AcosContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACOS(self):
            return self.getToken(NmodParser.ACOS, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_acos

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAcos" ):
                listener.enterAcos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAcos" ):
                listener.exitAcos(self)




    def acos(self):

        localctx = NmodParser.AcosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_acos)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.match(NmodParser.ACOS)
            self.state = 744
            self.match(NmodParser.LPRACKET)
            self.state = 745
            self.expression()
            self.state = 746
            self.match(NmodParser.RPRACKET)
            self.state = 747
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtanContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATAN(self):
            return self.getToken(NmodParser.ATAN, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_atan

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtan" ):
                listener.enterAtan(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtan" ):
                listener.exitAtan(self)




    def atan(self):

        localctx = NmodParser.AtanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_atan)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self.match(NmodParser.ATAN)
            self.state = 750
            self.match(NmodParser.LPRACKET)
            self.state = 751
            self.expression()
            self.state = 752
            self.match(NmodParser.RPRACKET)
            self.state = 753
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Atan2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATAN2(self):
            return self.getToken(NmodParser.ATAN2, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_atan2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtan2" ):
                listener.enterAtan2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtan2" ):
                listener.exitAtan2(self)




    def atan2(self):

        localctx = NmodParser.Atan2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_atan2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.match(NmodParser.ATAN2)
            self.state = 756
            self.match(NmodParser.LPRACKET)
            self.state = 757
            self.expression()
            self.state = 758
            self.match(NmodParser.RPRACKET)
            self.state = 759
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LogContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG(self):
            return self.getToken(NmodParser.LOG, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_log

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLog" ):
                listener.enterLog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLog" ):
                listener.exitLog(self)




    def log(self):

        localctx = NmodParser.LogContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_log)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            self.match(NmodParser.LOG)
            self.state = 762
            self.match(NmodParser.LPRACKET)
            self.state = 763
            self.expression()
            self.state = 764
            self.match(NmodParser.RPRACKET)
            self.state = 765
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Log10Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG10(self):
            return self.getToken(NmodParser.LOG10, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_log10

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLog10" ):
                listener.enterLog10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLog10" ):
                listener.exitLog10(self)




    def log10(self):

        localctx = NmodParser.Log10Context(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_log10)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self.match(NmodParser.LOG10)
            self.state = 768
            self.match(NmodParser.LPRACKET)
            self.state = 769
            self.expression()
            self.state = 770
            self.match(NmodParser.RPRACKET)
            self.state = 771
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExponentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPONENT(self):
            return self.getToken(NmodParser.EXPONENT, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(NmodParser.ExpressionContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_exponent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExponent" ):
                listener.enterExponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExponent" ):
                listener.exitExponent(self)




    def exponent(self):

        localctx = NmodParser.ExponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_exponent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self.match(NmodParser.EXPONENT)
            self.state = 774
            self.match(NmodParser.LPRACKET)
            self.state = 775
            self.expression()
            self.state = 776
            self.match(NmodParser.RPRACKET)
            self.state = 777
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class F_maxContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAX(self):
            return self.getToken(NmodParser.MAX, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpressionContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_f_max

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterF_max" ):
                listener.enterF_max(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitF_max" ):
                listener.exitF_max(self)




    def f_max(self):

        localctx = NmodParser.F_maxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_f_max)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.match(NmodParser.MAX)
            self.state = 780
            self.match(NmodParser.LPRACKET)
            self.state = 781
            self.expression()
            self.state = 786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 782
                self.match(NmodParser.COMMA)
                self.state = 783
                self.expression()
                self.state = 788
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 789
            self.match(NmodParser.RPRACKET)
            self.state = 790
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class F_minContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MIN(self):
            return self.getToken(NmodParser.MIN, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpressionContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_f_min

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterF_min" ):
                listener.enterF_min(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitF_min" ):
                listener.exitF_min(self)




    def f_min(self):

        localctx = NmodParser.F_minContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_f_min)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.match(NmodParser.MIN)
            self.state = 793
            self.match(NmodParser.LPRACKET)
            self.state = 794
            self.expression()
            self.state = 799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 795
                self.match(NmodParser.COMMA)
                self.state = 796
                self.expression()
                self.state = 801
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 802
            self.match(NmodParser.RPRACKET)
            self.state = 803
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class F_rangeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANGE(self):
            return self.getToken(NmodParser.RANGE, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpressionContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_f_range

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterF_range" ):
                listener.enterF_range(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitF_range" ):
                listener.exitF_range(self)




    def f_range(self):

        localctx = NmodParser.F_rangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_f_range)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.match(NmodParser.RANGE)
            self.state = 806
            self.match(NmodParser.LPRACKET)
            self.state = 807
            self.expression()
            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 808
                self.match(NmodParser.COMMA)
                self.state = 809
                self.expression()
                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 815
            self.match(NmodParser.RPRACKET)
            self.state = 816
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class F_sumContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUM(self):
            return self.getToken(NmodParser.SUM, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpressionContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_f_sum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterF_sum" ):
                listener.enterF_sum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitF_sum" ):
                listener.exitF_sum(self)




    def f_sum(self):

        localctx = NmodParser.F_sumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_f_sum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.match(NmodParser.SUM)
            self.state = 819
            self.match(NmodParser.LPRACKET)
            self.state = 820
            self.expression()
            self.state = 825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 821
                self.match(NmodParser.COMMA)
                self.state = 822
                self.expression()
                self.state = 827
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 828
            self.match(NmodParser.RPRACKET)
            self.state = 829
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DiffContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIFF(self):
            return self.getToken(NmodParser.DIFF, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def id_decl(self):
            return self.getTypedRuleContext(NmodParser.Id_declContext,0)


        def COMMA(self):
            return self.getToken(NmodParser.COMMA, 0)

        def CTEI(self):
            return self.getToken(NmodParser.CTEI, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_diff

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiff" ):
                listener.enterDiff(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiff" ):
                listener.exitDiff(self)




    def diff(self):

        localctx = NmodParser.DiffContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_diff)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.match(NmodParser.DIFF)
            self.state = 832
            self.match(NmodParser.LPRACKET)
            self.state = 833
            self.id_decl()
            self.state = 834
            self.match(NmodParser.COMMA)
            self.state = 835
            self.match(NmodParser.CTEI)
            self.state = 836
            self.match(NmodParser.RPRACKET)
            self.state = 837
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROD(self):
            return self.getToken(NmodParser.PROD, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpressionContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_prod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProd" ):
                listener.enterProd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProd" ):
                listener.exitProd(self)




    def prod(self):

        localctx = NmodParser.ProdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_prod)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            self.match(NmodParser.PROD)
            self.state = 840
            self.match(NmodParser.LPRACKET)
            self.state = 841
            self.expression()
            self.state = 846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 842
                self.match(NmodParser.COMMA)
                self.state = 843
                self.expression()
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 849
            self.match(NmodParser.RPRACKET)
            self.state = 850
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MeanContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEAN(self):
            return self.getToken(NmodParser.MEAN, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def id_decl(self):
            return self.getTypedRuleContext(NmodParser.Id_declContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_mean

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMean" ):
                listener.enterMean(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMean" ):
                listener.exitMean(self)




    def mean(self):

        localctx = NmodParser.MeanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_mean)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            self.match(NmodParser.MEAN)
            self.state = 853
            self.match(NmodParser.LPRACKET)
            self.state = 854
            self.id_decl()
            self.state = 855
            self.match(NmodParser.RPRACKET)
            self.state = 856
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MedianContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEDIAN(self):
            return self.getToken(NmodParser.MEDIAN, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def id_decl(self):
            return self.getTypedRuleContext(NmodParser.Id_declContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_median

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMedian" ):
                listener.enterMedian(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMedian" ):
                listener.exitMedian(self)




    def median(self):

        localctx = NmodParser.MedianContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_median)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self.match(NmodParser.MEDIAN)
            self.state = 859
            self.match(NmodParser.LPRACKET)
            self.state = 860
            self.id_decl()
            self.state = 861
            self.match(NmodParser.RPRACKET)
            self.state = 862
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantileContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUANTILE(self):
            return self.getToken(NmodParser.QUANTILE, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpressionContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_quantile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantile" ):
                listener.enterQuantile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantile" ):
                listener.exitQuantile(self)




    def quantile(self):

        localctx = NmodParser.QuantileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_quantile)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self.match(NmodParser.QUANTILE)
            self.state = 865
            self.match(NmodParser.LPRACKET)
            self.state = 866
            self.expression()
            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 867
                self.match(NmodParser.COMMA)
                self.state = 868
                self.expression()
                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 874
            self.match(NmodParser.RPRACKET)
            self.state = 875
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WeighedmeanContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WEIGHEDMEAN(self):
            return self.getToken(NmodParser.WEIGHEDMEAN, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpressionContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_weighedmean

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeighedmean" ):
                listener.enterWeighedmean(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeighedmean" ):
                listener.exitWeighedmean(self)




    def weighedmean(self):

        localctx = NmodParser.WeighedmeanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_weighedmean)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.match(NmodParser.WEIGHEDMEAN)
            self.state = 878
            self.match(NmodParser.LPRACKET)
            self.state = 879
            self.expression()
            self.state = 884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 880
                self.match(NmodParser.COMMA)
                self.state = 881
                self.expression()
                self.state = 886
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 887
            self.match(NmodParser.RPRACKET)
            self.state = 888
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RankContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANK(self):
            return self.getToken(NmodParser.RANK, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def id_decl(self):
            return self.getTypedRuleContext(NmodParser.Id_declContext,0)


        def COMMA(self):
            return self.getToken(NmodParser.COMMA, 0)

        def ZERO(self):
            return self.getToken(NmodParser.ZERO, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def ONE(self):
            return self.getToken(NmodParser.ONE, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_rank

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRank" ):
                listener.enterRank(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRank" ):
                listener.exitRank(self)




    def rank(self):

        localctx = NmodParser.RankContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_rank)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 890
                self.match(NmodParser.RANK)
                self.state = 891
                self.match(NmodParser.LPRACKET)
                self.state = 892
                self.id_decl()
                self.state = 893
                self.match(NmodParser.COMMA)
                self.state = 894
                self.match(NmodParser.ZERO)
                self.state = 895
                self.match(NmodParser.RPRACKET)
                self.state = 896
                self.match(NmodParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.state = 898
                self.match(NmodParser.RANK)
                self.state = 899
                self.match(NmodParser.LPRACKET)
                self.state = 900
                self.id_decl()
                self.state = 901
                self.match(NmodParser.COMMA)
                self.state = 902
                self.match(NmodParser.ONE)
                self.state = 903
                self.match(NmodParser.RPRACKET)
                self.state = 904
                self.match(NmodParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIANCE(self):
            return self.getToken(NmodParser.VARIANCE, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self):
            return self.getToken(NmodParser.COMMA, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_var

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar" ):
                listener.enterVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar" ):
                listener.exitVar(self)




    def var(self):

        localctx = NmodParser.VarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_var)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 908
            self.match(NmodParser.VARIANCE)
            self.state = 909
            self.match(NmodParser.LPRACKET)
            self.state = 910
            self.var_cte()
            self.state = 911
            self.match(NmodParser.COMMA)
            self.state = 912
            self.var_cte()
            self.state = 913
            self.match(NmodParser.RPRACKET)
            self.state = 914
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SD(self):
            return self.getToken(NmodParser.SD, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self):
            return self.getTypedRuleContext(NmodParser.Var_cteContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_sd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSd" ):
                listener.enterSd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSd" ):
                listener.exitSd(self)




    def sd(self):

        localctx = NmodParser.SdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_sd)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 916
            self.match(NmodParser.SD)
            self.state = 917
            self.match(NmodParser.LPRACKET)
            self.state = 918
            self.var_cte()
            self.state = 919
            self.match(NmodParser.RPRACKET)
            self.state = 920
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COR(self):
            return self.getToken(NmodParser.COR, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def PEARSON(self):
            return self.getToken(NmodParser.PEARSON, 0)

        def KENDALL(self):
            return self.getToken(NmodParser.KENDALL, 0)

        def SPEARMAN(self):
            return self.getToken(NmodParser.SPEARMAN, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_cor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCor" ):
                listener.enterCor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCor" ):
                listener.exitCor(self)




    def cor(self):

        localctx = NmodParser.CorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_cor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self.match(NmodParser.COR)
            self.state = 923
            self.match(NmodParser.LPRACKET)
            self.state = 924
            self.var_cte()
            self.state = 925
            self.match(NmodParser.COMMA)
            self.state = 926
            self.var_cte()
            self.state = 927
            self.match(NmodParser.COMMA)
            self.state = 928
            _la = self._input.LA(1)
            if not(((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (NmodParser.PEARSON - 93)) | (1 << (NmodParser.KENDALL - 93)) | (1 << (NmodParser.SPEARMAN - 93)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 929
            self.match(NmodParser.RPRACKET)
            self.state = 930
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CovContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COV(self):
            return self.getToken(NmodParser.COV, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self):
            return self.getTypedRuleContext(NmodParser.Var_cteContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_cov

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCov" ):
                listener.enterCov(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCov" ):
                listener.exitCov(self)




    def cov(self):

        localctx = NmodParser.CovContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_cov)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            self.match(NmodParser.COV)
            self.state = 933
            self.match(NmodParser.LPRACKET)
            self.state = 934
            self.var_cte()
            self.state = 935
            self.match(NmodParser.RPRACKET)
            self.state = 936
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class F_roundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROUND(self):
            return self.getToken(NmodParser.ROUND, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_f_round

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterF_round" ):
                listener.enterF_round(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitF_round" ):
                listener.exitF_round(self)




    def f_round(self):

        localctx = NmodParser.F_roundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_f_round)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.match(NmodParser.ROUND)
            self.state = 939
            self.match(NmodParser.LPRACKET)
            self.state = 940
            self.var_cte()
            self.state = 945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 941
                self.match(NmodParser.COMMA)
                self.state = 942
                self.var_cte()
                self.state = 947
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 948
            self.match(NmodParser.RPRACKET)
            self.state = 949
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TransposeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRANSPOSE(self):
            return self.getToken(NmodParser.TRANSPOSE, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self):
            return self.getTypedRuleContext(NmodParser.Var_cteContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_transpose

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranspose" ):
                listener.enterTranspose(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranspose" ):
                listener.exitTranspose(self)




    def transpose(self):

        localctx = NmodParser.TransposeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_transpose)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.match(NmodParser.TRANSPOSE)
            self.state = 952
            self.match(NmodParser.LPRACKET)
            self.state = 953
            self.var_cte()
            self.state = 954
            self.match(NmodParser.RPRACKET)
            self.state = 955
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DiagonalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIAGONAL(self):
            return self.getToken(NmodParser.DIAGONAL, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self):
            return self.getTypedRuleContext(NmodParser.Var_cteContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_diagonal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiagonal" ):
                listener.enterDiagonal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiagonal" ):
                listener.exitDiagonal(self)




    def diagonal(self):

        localctx = NmodParser.DiagonalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_diagonal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 957
            self.match(NmodParser.DIAGONAL)
            self.state = 958
            self.match(NmodParser.LPRACKET)
            self.state = 959
            self.var_cte()
            self.state = 960
            self.match(NmodParser.RPRACKET)
            self.state = 961
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GinvContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GINV(self):
            return self.getToken(NmodParser.GINV, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self):
            return self.getTypedRuleContext(NmodParser.Var_cteContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_ginv

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGinv" ):
                listener.enterGinv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGinv" ):
                listener.exitGinv(self)




    def ginv(self):

        localctx = NmodParser.GinvContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_ginv)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self.match(NmodParser.GINV)
            self.state = 964
            self.match(NmodParser.LPRACKET)
            self.state = 965
            self.var_cte()
            self.state = 966
            self.match(NmodParser.RPRACKET)
            self.state = 967
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RowsumContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROWSUM(self):
            return self.getToken(NmodParser.ROWSUM, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self):
            return self.getTypedRuleContext(NmodParser.Var_cteContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_rowsum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowsum" ):
                listener.enterRowsum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowsum" ):
                listener.exitRowsum(self)




    def rowsum(self):

        localctx = NmodParser.RowsumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_rowsum)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 969
            self.match(NmodParser.ROWSUM)
            self.state = 970
            self.match(NmodParser.LPRACKET)
            self.state = 971
            self.var_cte()
            self.state = 972
            self.match(NmodParser.RPRACKET)
            self.state = 973
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColsumContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLSUM(self):
            return self.getToken(NmodParser.COLSUM, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self):
            return self.getTypedRuleContext(NmodParser.Var_cteContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_colsum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColsum" ):
                listener.enterColsum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColsum" ):
                listener.exitColsum(self)




    def colsum(self):

        localctx = NmodParser.ColsumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_colsum)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self.match(NmodParser.COLSUM)
            self.state = 976
            self.match(NmodParser.LPRACKET)
            self.state = 977
            self.var_cte()
            self.state = 978
            self.match(NmodParser.RPRACKET)
            self.state = 979
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LoadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD(self):
            return self.getToken(NmodParser.LOAD, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_load

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoad" ):
                listener.enterLoad(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoad" ):
                listener.exitLoad(self)




    def load(self):

        localctx = NmodParser.LoadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_load)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.match(NmodParser.LOAD)
            self.state = 982
            self.match(NmodParser.LPRACKET)
            self.state = 983
            self.var_cte()
            self.state = 988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 984
                self.match(NmodParser.COMMA)
                self.state = 985
                self.var_cte()
                self.state = 990
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 991
            self.match(NmodParser.RPRACKET)
            self.state = 992
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATA(self):
            return self.getToken(NmodParser.DATA, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NmodParser.ExpressionContext,i)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def getRuleIndex(self):
            return NmodParser.RULE_data

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData" ):
                listener.enterData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData" ):
                listener.exitData(self)




    def data(self):

        localctx = NmodParser.DataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_data)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 994
            self.match(NmodParser.DATA)
            self.state = 995
            self.match(NmodParser.LPRACKET)
            self.state = 996
            self.expression()
            self.state = 1001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NmodParser.COMMA:
                self.state = 997
                self.match(NmodParser.COMMA)
                self.state = 998
                self.expression()
                self.state = 1003
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1004
            self.match(NmodParser.RPRACKET)
            self.state = 1005
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LibraryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIBRARY(self):
            return self.getToken(NmodParser.LIBRARY, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def STRING(self):
            return self.getToken(NmodParser.STRING, 0)

        def var_cte(self):
            return self.getTypedRuleContext(NmodParser.Var_cteContext,0)


        def getRuleIndex(self):
            return NmodParser.RULE_library

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibrary" ):
                listener.enterLibrary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibrary" ):
                listener.exitLibrary(self)




    def library(self):

        localctx = NmodParser.LibraryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_library)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self.match(NmodParser.LIBRARY)
            self.state = 1008
            self.match(NmodParser.LPRACKET)
            self.state = 1011
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NmodParser.STRING]:
                self.state = 1009
                self.match(NmodParser.STRING)
                pass
            elif token in [NmodParser.RETURN, NmodParser.RNOM, NmodParser.REXP, NmodParser.RGAMMA, NmodParser.POINTS, NmodParser.LINES, NmodParser.TEXT, NmodParser.BARPLOT, NmodParser.PIECHART, NmodParser.XYPLOT, NmodParser.DENSITYPLOT, NmodParser.HISTOGRAM, NmodParser.SIN, NmodParser.COS, NmodParser.TAN, NmodParser.ASIN, NmodParser.ACOS, NmodParser.ATAN, NmodParser.ATAN2, NmodParser.LOG, NmodParser.LOG10, NmodParser.EXPONENT, NmodParser.MAX, NmodParser.MIN, NmodParser.RANGE, NmodParser.SUM, NmodParser.DIFF, NmodParser.PROD, NmodParser.MEAN, NmodParser.MEDIAN, NmodParser.QUANTILE, NmodParser.WEIGHEDMEAN, NmodParser.RANK, NmodParser.VARIANCE, NmodParser.SD, NmodParser.COR, NmodParser.COV, NmodParser.ROUND, NmodParser.TRANSPOSE, NmodParser.DIAGONAL, NmodParser.GINV, NmodParser.ROWSUM, NmodParser.COLSUM, NmodParser.LOAD, NmodParser.DATA, NmodParser.LIBRARY, NmodParser.RPOIS, NmodParser.RWEIBULL, NmodParser.RBINOM, NmodParser.RGEOM, NmodParser.RUNIF, NmodParser.CTEI, NmodParser.CTEF, NmodParser.CTEC, NmodParser.ID]:
                self.state = 1010
                self.var_cte()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1013
            self.match(NmodParser.RPRACKET)
            self.state = 1014
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RpoisContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RPOIS(self):
            return self.getToken(NmodParser.RPOIS, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_rpois

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRpois" ):
                listener.enterRpois(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRpois" ):
                listener.exitRpois(self)




    def rpois(self):

        localctx = NmodParser.RpoisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_rpois)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            self.match(NmodParser.RPOIS)
            self.state = 1017
            self.match(NmodParser.LPRACKET)
            self.state = 1018
            self.var_cte()
            self.state = 1019
            self.match(NmodParser.COMMA)
            self.state = 1020
            self.var_cte()
            self.state = 1021
            self.match(NmodParser.COMMA)
            self.state = 1022
            self.var_cte()
            self.state = 1023
            self.match(NmodParser.RPRACKET)
            self.state = 1024
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RweibullContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RWEIBULL(self):
            return self.getToken(NmodParser.RWEIBULL, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self):
            return self.getTypedRuleContext(NmodParser.Var_cteContext,0)


        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_rweibull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRweibull" ):
                listener.enterRweibull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRweibull" ):
                listener.exitRweibull(self)




    def rweibull(self):

        localctx = NmodParser.RweibullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_rweibull)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1026
            self.match(NmodParser.RWEIBULL)
            self.state = 1027
            self.match(NmodParser.LPRACKET)
            self.state = 1028
            self.var_cte()
            self.state = 1029
            self.match(NmodParser.RPRACKET)
            self.state = 1030
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RbinomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RBINOM(self):
            return self.getToken(NmodParser.RBINOM, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(NmodParser.COMMA)
            else:
                return self.getToken(NmodParser.COMMA, i)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_rbinom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRbinom" ):
                listener.enterRbinom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRbinom" ):
                listener.exitRbinom(self)




    def rbinom(self):

        localctx = NmodParser.RbinomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_rbinom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self.match(NmodParser.RBINOM)
            self.state = 1033
            self.match(NmodParser.LPRACKET)
            self.state = 1034
            self.var_cte()
            self.state = 1035
            self.match(NmodParser.COMMA)
            self.state = 1036
            self.var_cte()
            self.state = 1037
            self.match(NmodParser.COMMA)
            self.state = 1038
            self.var_cte()
            self.state = 1039
            self.match(NmodParser.RPRACKET)
            self.state = 1040
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RgeomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RGEOM(self):
            return self.getToken(NmodParser.RGEOM, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self):
            return self.getToken(NmodParser.COMMA, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_rgeom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRgeom" ):
                listener.enterRgeom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRgeom" ):
                listener.exitRgeom(self)




    def rgeom(self):

        localctx = NmodParser.RgeomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_rgeom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1042
            self.match(NmodParser.RGEOM)
            self.state = 1043
            self.match(NmodParser.LPRACKET)
            self.state = 1044
            self.var_cte()
            self.state = 1045
            self.match(NmodParser.COMMA)
            self.state = 1046
            self.var_cte()
            self.state = 1047
            self.match(NmodParser.RPRACKET)
            self.state = 1048
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RunifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RUNIF(self):
            return self.getToken(NmodParser.RUNIF, 0)

        def LPRACKET(self):
            return self.getToken(NmodParser.LPRACKET, 0)

        def var_cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NmodParser.Var_cteContext)
            else:
                return self.getTypedRuleContext(NmodParser.Var_cteContext,i)


        def COMMA(self):
            return self.getToken(NmodParser.COMMA, 0)

        def RPRACKET(self):
            return self.getToken(NmodParser.RPRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(NmodParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return NmodParser.RULE_runif

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRunif" ):
                listener.enterRunif(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRunif" ):
                listener.exitRunif(self)




    def runif(self):

        localctx = NmodParser.RunifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_runif)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1050
            self.match(NmodParser.RUNIF)
            self.state = 1051
            self.match(NmodParser.LPRACKET)
            self.state = 1052
            self.var_cte()
            self.state = 1053
            self.match(NmodParser.COMMA)
            self.state = 1054
            self.var_cte()
            self.state = 1055
            self.match(NmodParser.RPRACKET)
            self.state = 1056
            self.match(NmodParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DotchartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NmodParser.RULE_dotchart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotchart" ):
                listener.enterDotchart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotchart" ):
                listener.exitDotchart(self)




    def dotchart(self):

        localctx = NmodParser.DotchartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_dotchart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1058
            self.match(NmodParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





